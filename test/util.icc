{
    # sum with usage of the function stack #
    sum = (a...) -> {
        if size(a):
        {
            x = 0;
            for e in a: x += e.
        }
    };
    # nice unicode syntax #
    ∑ = (a) -> {
        ? ‖ (a):
        {
            x = 0;
            ∀ e ∈ a: x += e.
        }
    };
    # recursive multiplication #
    mul = (a,b) ->
        if a > 0:
            b += mul(a--, b)
        else: a;
    # recursive factorial #
    fact = (n) ->
        if n <= 1:
            1
        else: fact(n--) * n.;
    # map higher order #
    map = (f, x...) -> {
        arr = ();
        for xi in x:
                arr += [f(xi)];
        arr
    };
    # or even better #
    🗺️ = ƒ$ -> {
         = ();
        ∀ ι ∈ ]0,$0]:
             += (f($ι),).;
        
    }
}
