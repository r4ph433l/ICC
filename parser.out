Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> exp
Rule 1     arr -> exp , exp
Rule 2     arr -> arr , exp
Rule 3     exp -> arr
Rule 4     exp -> ( )
Rule 5     exp -> exp ,
Rule 6     agt -> exp [ exp ]
Rule 7     exp -> agt
Rule 8     exp -> ID + ASG exp
Rule 9     exp -> ID - ASG exp
Rule 10    exp -> ID USG
Rule 11    exp -> ID * ASG exp
Rule 12    exp -> ID DIV ASG exp
Rule 13    exp -> ID MOD ASG exp
Rule 14    exp -> ID POW ASG exp
Rule 15    exp -> ID OR ASG exp
Rule 16    exp -> ID XOR ASG exp
Rule 17    exp -> ID AND ASG exp
Rule 18    exp -> ID ASG exp
Rule 19    exp -> exp + exp
Rule 20    exp -> exp - exp
Rule 21    exp -> exp * exp
Rule 22    exp -> exp DIV exp
Rule 23    exp -> exp MOD exp
Rule 24    exp -> exp POW exp
Rule 25    exp -> exp OR exp
Rule 26    exp -> exp XOR exp
Rule 27    exp -> exp AND exp
Rule 28    cmp -> exp CMP exp
Rule 29    cmp -> cmp CMP exp
Rule 30    exp -> cmp
Rule 31    ifc -> IF exp : exp
Rule 32    ifc -> IF exp : exp ELSE exp
Rule 33    ifc -> IF exp : exp ELSE ifc
Rule 34    exp -> ifc END
Rule 35    exp -> FOR ID IN exp : exp END
Rule 36    exp -> FOR NUM ID IN it : exp END
Rule 37    exp -> exp TO exp
Rule 38    exp -> ID ( exp )
Rule 39    exp -> ID ( )
Rule 40    exp -> ( exp )
Rule 41    exp -> ID
Rule 42    it -> [ exp , exp ]
Rule 43    it -> ] exp , exp ]
Rule 44    it -> [ exp , exp [
Rule 45    it -> ] exp , exp [
Rule 46    exp -> it
Rule 47    exp -> exp IN it
Rule 48    exp -> ID + exp
Rule 49    exp -> ID - exp
Rule 50    exp -> - exp
Rule 51    exp -> ID * exp
Rule 52    exp -> ID DIV exp
Rule 53    exp -> ID MOD exp
Rule 54    exp -> ID POW exp
Rule 55    exp -> ID OR exp
Rule 56    exp -> ID XOR exp
Rule 57    exp -> ID AND exp
Rule 58    exp -> + exp
Rule 59    exp -> NOT exp
Rule 60    exp -> ECHO exp
Rule 61    exp -> LOAD exp
Rule 62    exp -> EVAL exp
Rule 63    seq -> exp ; seq
Rule 64    seq -> exp ;
Rule 65    seq -> exp
Rule 66    exp -> { seq }
Rule 67    exp -> STK exp
Rule 68    exp -> NUM
Rule 69    exp -> STR
Rule 70    exp -> WHILE exp : exp END

Terminals, with rules where they appear

(                    : 4 38 39 40
)                    : 4 38 39 40
*                    : 11 21 51
+                    : 8 19 48 58
,                    : 1 2 5 42 43 44 45
-                    : 9 20 49 50
:                    : 31 32 33 35 36 70
;                    : 63 64
AND                  : 17 27 57
ASG                  : 8 9 11 12 13 14 15 16 17 18
CMP                  : 28 29
DIV                  : 12 22 52
ECHO                 : 60
ELSE                 : 32 33
END                  : 34 35 36 70
EVAL                 : 62
FOR                  : 35 36
ID                   : 8 9 10 11 12 13 14 15 16 17 18 35 36 38 39 41 48 49 51 52 53 54 55 56 57
IF                   : 31 32 33
IN                   : 35 36 47
LOAD                 : 61
MOD                  : 13 23 53
NOT                  : 59
NUM                  : 36 68
OR                   : 15 25 55
POW                  : 14 24 54
STK                  : 67
STR                  : 69
TO                   : 37
USG                  : 10
WHILE                : 70
XOR                  : 16 26 56
[                    : 6 42 44 44 45
]                    : 6 42 43 43 45
error                : 
{                    : 66
}                    : 66

Nonterminals, with rules where they appear

agt                  : 7
arr                  : 2 3
cmp                  : 29 30
exp                  : 1 1 2 5 6 6 8 9 11 12 13 14 15 16 17 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 31 31 32 32 32 33 33 35 35 36 37 37 38 40 42 42 43 43 44 44 45 45 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 67 70 70 0
ifc                  : 33 34
it                   : 36 46 47
seq                  : 63 66

Parsing method: LALR

state 0

    (0) S' -> . exp
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

    exp                            shift and go to state 1
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    ifc                            shift and go to state 9
    it                             shift and go to state 12

state 1

    (0) S' -> exp .
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    ,               shift and go to state 24
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    DIV             shift and go to state 28
    MOD             shift and go to state 29
    POW             shift and go to state 30
    OR              shift and go to state 31
    XOR             shift and go to state 32
    AND             shift and go to state 33
    TO              shift and go to state 34
    IN              shift and go to state 35
    [               shift and go to state 36
    CMP             shift and go to state 37


state 2

    (3) exp -> arr .
    (2) arr -> arr . , exp

    +               reduce using rule 3 (exp -> arr .)
    -               reduce using rule 3 (exp -> arr .)
    *               reduce using rule 3 (exp -> arr .)
    DIV             reduce using rule 3 (exp -> arr .)
    MOD             reduce using rule 3 (exp -> arr .)
    POW             reduce using rule 3 (exp -> arr .)
    OR              reduce using rule 3 (exp -> arr .)
    XOR             reduce using rule 3 (exp -> arr .)
    AND             reduce using rule 3 (exp -> arr .)
    TO              reduce using rule 3 (exp -> arr .)
    IN              reduce using rule 3 (exp -> arr .)
    [               reduce using rule 3 (exp -> arr .)
    CMP             reduce using rule 3 (exp -> arr .)
    $end            reduce using rule 3 (exp -> arr .)
    )               reduce using rule 3 (exp -> arr .)
    ;               reduce using rule 3 (exp -> arr .)
    }               reduce using rule 3 (exp -> arr .)
    :               reduce using rule 3 (exp -> arr .)
    ]               reduce using rule 3 (exp -> arr .)
    END             reduce using rule 3 (exp -> arr .)
    ELSE            reduce using rule 3 (exp -> arr .)
    ,               shift and go to state 38

  ! ,               [ reduce using rule 3 (exp -> arr .) ]


state 3

    (4) exp -> ( . )
    (40) exp -> ( . exp )
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    )               shift and go to state 39
    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

    exp                            shift and go to state 40
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    ifc                            shift and go to state 9
    it                             shift and go to state 12

state 4

    (7) exp -> agt .

    ,               reduce using rule 7 (exp -> agt .)
    +               reduce using rule 7 (exp -> agt .)
    -               reduce using rule 7 (exp -> agt .)
    *               reduce using rule 7 (exp -> agt .)
    DIV             reduce using rule 7 (exp -> agt .)
    MOD             reduce using rule 7 (exp -> agt .)
    POW             reduce using rule 7 (exp -> agt .)
    OR              reduce using rule 7 (exp -> agt .)
    XOR             reduce using rule 7 (exp -> agt .)
    AND             reduce using rule 7 (exp -> agt .)
    TO              reduce using rule 7 (exp -> agt .)
    IN              reduce using rule 7 (exp -> agt .)
    [               reduce using rule 7 (exp -> agt .)
    CMP             reduce using rule 7 (exp -> agt .)
    $end            reduce using rule 7 (exp -> agt .)
    )               reduce using rule 7 (exp -> agt .)
    ;               reduce using rule 7 (exp -> agt .)
    }               reduce using rule 7 (exp -> agt .)
    :               reduce using rule 7 (exp -> agt .)
    ]               reduce using rule 7 (exp -> agt .)
    END             reduce using rule 7 (exp -> agt .)
    ELSE            reduce using rule 7 (exp -> agt .)


state 5

    (8) exp -> ID . + ASG exp
    (9) exp -> ID . - ASG exp
    (10) exp -> ID . USG
    (11) exp -> ID . * ASG exp
    (12) exp -> ID . DIV ASG exp
    (13) exp -> ID . MOD ASG exp
    (14) exp -> ID . POW ASG exp
    (15) exp -> ID . OR ASG exp
    (16) exp -> ID . XOR ASG exp
    (17) exp -> ID . AND ASG exp
    (18) exp -> ID . ASG exp
    (38) exp -> ID . ( exp )
    (39) exp -> ID . ( )
    (41) exp -> ID .
    (48) exp -> ID . + exp
    (49) exp -> ID . - exp
    (51) exp -> ID . * exp
    (52) exp -> ID . DIV exp
    (53) exp -> ID . MOD exp
    (54) exp -> ID . POW exp
    (55) exp -> ID . OR exp
    (56) exp -> ID . XOR exp
    (57) exp -> ID . AND exp

    +               shift and go to state 41
    -               shift and go to state 43
    USG             shift and go to state 44
    *               shift and go to state 45
    DIV             shift and go to state 46
    MOD             shift and go to state 47
    POW             shift and go to state 48
    OR              shift and go to state 49
    XOR             shift and go to state 50
    AND             shift and go to state 51
    ASG             shift and go to state 42
    (               shift and go to state 52
    ,               reduce using rule 41 (exp -> ID .)
    TO              reduce using rule 41 (exp -> ID .)
    IN              reduce using rule 41 (exp -> ID .)
    [               reduce using rule 41 (exp -> ID .)
    CMP             reduce using rule 41 (exp -> ID .)
    $end            reduce using rule 41 (exp -> ID .)
    )               reduce using rule 41 (exp -> ID .)
    ;               reduce using rule 41 (exp -> ID .)
    }               reduce using rule 41 (exp -> ID .)
    :               reduce using rule 41 (exp -> ID .)
    ]               reduce using rule 41 (exp -> ID .)
    END             reduce using rule 41 (exp -> ID .)
    ELSE            reduce using rule 41 (exp -> ID .)

  ! +               [ reduce using rule 41 (exp -> ID .) ]
  ! -               [ reduce using rule 41 (exp -> ID .) ]
  ! *               [ reduce using rule 41 (exp -> ID .) ]
  ! DIV             [ reduce using rule 41 (exp -> ID .) ]
  ! MOD             [ reduce using rule 41 (exp -> ID .) ]
  ! POW             [ reduce using rule 41 (exp -> ID .) ]
  ! OR              [ reduce using rule 41 (exp -> ID .) ]
  ! XOR             [ reduce using rule 41 (exp -> ID .) ]
  ! AND             [ reduce using rule 41 (exp -> ID .) ]


state 6

    (58) exp -> + . exp
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

    exp                            shift and go to state 53
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    ifc                            shift and go to state 9
    it                             shift and go to state 12

state 7

    (50) exp -> - . exp
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

    exp                            shift and go to state 54
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    ifc                            shift and go to state 9
    it                             shift and go to state 12

state 8

    (30) exp -> cmp .
    (29) cmp -> cmp . CMP exp

    ,               reduce using rule 30 (exp -> cmp .)
    +               reduce using rule 30 (exp -> cmp .)
    -               reduce using rule 30 (exp -> cmp .)
    *               reduce using rule 30 (exp -> cmp .)
    DIV             reduce using rule 30 (exp -> cmp .)
    MOD             reduce using rule 30 (exp -> cmp .)
    POW             reduce using rule 30 (exp -> cmp .)
    OR              reduce using rule 30 (exp -> cmp .)
    XOR             reduce using rule 30 (exp -> cmp .)
    AND             reduce using rule 30 (exp -> cmp .)
    TO              reduce using rule 30 (exp -> cmp .)
    IN              reduce using rule 30 (exp -> cmp .)
    [               reduce using rule 30 (exp -> cmp .)
    $end            reduce using rule 30 (exp -> cmp .)
    )               reduce using rule 30 (exp -> cmp .)
    ;               reduce using rule 30 (exp -> cmp .)
    }               reduce using rule 30 (exp -> cmp .)
    :               reduce using rule 30 (exp -> cmp .)
    ]               reduce using rule 30 (exp -> cmp .)
    END             reduce using rule 30 (exp -> cmp .)
    ELSE            reduce using rule 30 (exp -> cmp .)
    CMP             shift and go to state 55

  ! CMP             [ reduce using rule 30 (exp -> cmp .) ]


state 9

    (34) exp -> ifc . END

    END             shift and go to state 56


state 10

    (35) exp -> FOR . ID IN exp : exp END
    (36) exp -> FOR . NUM ID IN it : exp END

    ID              shift and go to state 57
    NUM             shift and go to state 58


state 11

    (68) exp -> NUM .

    ,               reduce using rule 68 (exp -> NUM .)
    +               reduce using rule 68 (exp -> NUM .)
    -               reduce using rule 68 (exp -> NUM .)
    *               reduce using rule 68 (exp -> NUM .)
    DIV             reduce using rule 68 (exp -> NUM .)
    MOD             reduce using rule 68 (exp -> NUM .)
    POW             reduce using rule 68 (exp -> NUM .)
    OR              reduce using rule 68 (exp -> NUM .)
    XOR             reduce using rule 68 (exp -> NUM .)
    AND             reduce using rule 68 (exp -> NUM .)
    TO              reduce using rule 68 (exp -> NUM .)
    IN              reduce using rule 68 (exp -> NUM .)
    [               reduce using rule 68 (exp -> NUM .)
    CMP             reduce using rule 68 (exp -> NUM .)
    $end            reduce using rule 68 (exp -> NUM .)
    )               reduce using rule 68 (exp -> NUM .)
    ;               reduce using rule 68 (exp -> NUM .)
    }               reduce using rule 68 (exp -> NUM .)
    :               reduce using rule 68 (exp -> NUM .)
    ]               reduce using rule 68 (exp -> NUM .)
    END             reduce using rule 68 (exp -> NUM .)
    ELSE            reduce using rule 68 (exp -> NUM .)


state 12

    (46) exp -> it .

    ,               reduce using rule 46 (exp -> it .)
    +               reduce using rule 46 (exp -> it .)
    -               reduce using rule 46 (exp -> it .)
    *               reduce using rule 46 (exp -> it .)
    DIV             reduce using rule 46 (exp -> it .)
    MOD             reduce using rule 46 (exp -> it .)
    POW             reduce using rule 46 (exp -> it .)
    OR              reduce using rule 46 (exp -> it .)
    XOR             reduce using rule 46 (exp -> it .)
    AND             reduce using rule 46 (exp -> it .)
    TO              reduce using rule 46 (exp -> it .)
    IN              reduce using rule 46 (exp -> it .)
    [               reduce using rule 46 (exp -> it .)
    CMP             reduce using rule 46 (exp -> it .)
    $end            reduce using rule 46 (exp -> it .)
    )               reduce using rule 46 (exp -> it .)
    ;               reduce using rule 46 (exp -> it .)
    }               reduce using rule 46 (exp -> it .)
    :               reduce using rule 46 (exp -> it .)
    ]               reduce using rule 46 (exp -> it .)
    END             reduce using rule 46 (exp -> it .)
    ELSE            reduce using rule 46 (exp -> it .)


state 13

    (59) exp -> NOT . exp
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

    exp                            shift and go to state 59
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    ifc                            shift and go to state 9
    it                             shift and go to state 12

state 14

    (60) exp -> ECHO . exp
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

    exp                            shift and go to state 60
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    ifc                            shift and go to state 9
    it                             shift and go to state 12

state 15

    (61) exp -> LOAD . exp
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

    exp                            shift and go to state 61
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    ifc                            shift and go to state 9
    it                             shift and go to state 12

state 16

    (62) exp -> EVAL . exp
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

    exp                            shift and go to state 62
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    ifc                            shift and go to state 9
    it                             shift and go to state 12

state 17

    (66) exp -> { . seq }
    (63) seq -> . exp ; seq
    (64) seq -> . exp ;
    (65) seq -> . exp
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

    seq                            shift and go to state 63
    exp                            shift and go to state 64
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    ifc                            shift and go to state 9
    it                             shift and go to state 12

state 18

    (67) exp -> STK . exp
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

    exp                            shift and go to state 65
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    ifc                            shift and go to state 9
    it                             shift and go to state 12

state 19

    (69) exp -> STR .

    ,               reduce using rule 69 (exp -> STR .)
    +               reduce using rule 69 (exp -> STR .)
    -               reduce using rule 69 (exp -> STR .)
    *               reduce using rule 69 (exp -> STR .)
    DIV             reduce using rule 69 (exp -> STR .)
    MOD             reduce using rule 69 (exp -> STR .)
    POW             reduce using rule 69 (exp -> STR .)
    OR              reduce using rule 69 (exp -> STR .)
    XOR             reduce using rule 69 (exp -> STR .)
    AND             reduce using rule 69 (exp -> STR .)
    TO              reduce using rule 69 (exp -> STR .)
    IN              reduce using rule 69 (exp -> STR .)
    [               reduce using rule 69 (exp -> STR .)
    CMP             reduce using rule 69 (exp -> STR .)
    $end            reduce using rule 69 (exp -> STR .)
    )               reduce using rule 69 (exp -> STR .)
    ;               reduce using rule 69 (exp -> STR .)
    }               reduce using rule 69 (exp -> STR .)
    :               reduce using rule 69 (exp -> STR .)
    ]               reduce using rule 69 (exp -> STR .)
    END             reduce using rule 69 (exp -> STR .)
    ELSE            reduce using rule 69 (exp -> STR .)


state 20

    (70) exp -> WHILE . exp : exp END
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

    exp                            shift and go to state 66
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    ifc                            shift and go to state 9
    it                             shift and go to state 12

state 21

    (42) it -> [ . exp , exp ]
    (44) it -> [ . exp , exp [
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

    exp                            shift and go to state 67
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    ifc                            shift and go to state 9
    it                             shift and go to state 12

state 22

    (43) it -> ] . exp , exp ]
    (45) it -> ] . exp , exp [
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

    exp                            shift and go to state 68
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    ifc                            shift and go to state 9
    it                             shift and go to state 12

state 23

    (31) ifc -> IF . exp : exp
    (32) ifc -> IF . exp : exp ELSE exp
    (33) ifc -> IF . exp : exp ELSE ifc
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

    exp                            shift and go to state 69
    ifc                            shift and go to state 9
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    it                             shift and go to state 12

state 24

    (5) exp -> exp , .
    (1) arr -> exp , . exp
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    ,               reduce using rule 5 (exp -> exp , .)
    *               reduce using rule 5 (exp -> exp , .)
    DIV             reduce using rule 5 (exp -> exp , .)
    MOD             reduce using rule 5 (exp -> exp , .)
    POW             reduce using rule 5 (exp -> exp , .)
    OR              reduce using rule 5 (exp -> exp , .)
    XOR             reduce using rule 5 (exp -> exp , .)
    AND             reduce using rule 5 (exp -> exp , .)
    TO              reduce using rule 5 (exp -> exp , .)
    IN              reduce using rule 5 (exp -> exp , .)
    CMP             reduce using rule 5 (exp -> exp , .)
    $end            reduce using rule 5 (exp -> exp , .)
    )               reduce using rule 5 (exp -> exp , .)
    ;               reduce using rule 5 (exp -> exp , .)
    }               reduce using rule 5 (exp -> exp , .)
    :               reduce using rule 5 (exp -> exp , .)
    ]               reduce using rule 5 (exp -> exp , .)
    END             reduce using rule 5 (exp -> exp , .)
    ELSE            reduce using rule 5 (exp -> exp , .)
    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21

  ! +               [ reduce using rule 5 (exp -> exp , .) ]
  ! -               [ reduce using rule 5 (exp -> exp , .) ]
  ! [               [ reduce using rule 5 (exp -> exp , .) ]
  ! ]               [ shift and go to state 22 ]

    exp                            shift and go to state 70
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    ifc                            shift and go to state 9
    it                             shift and go to state 12

state 25

    (19) exp -> exp + . exp
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

    exp                            shift and go to state 71
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    ifc                            shift and go to state 9
    it                             shift and go to state 12

state 26

    (20) exp -> exp - . exp
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

    exp                            shift and go to state 72
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    ifc                            shift and go to state 9
    it                             shift and go to state 12

state 27

    (21) exp -> exp * . exp
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

    exp                            shift and go to state 73
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    ifc                            shift and go to state 9
    it                             shift and go to state 12

state 28

    (22) exp -> exp DIV . exp
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

    exp                            shift and go to state 74
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    ifc                            shift and go to state 9
    it                             shift and go to state 12

state 29

    (23) exp -> exp MOD . exp
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

    exp                            shift and go to state 75
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    ifc                            shift and go to state 9
    it                             shift and go to state 12

state 30

    (24) exp -> exp POW . exp
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

    exp                            shift and go to state 76
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    ifc                            shift and go to state 9
    it                             shift and go to state 12

state 31

    (25) exp -> exp OR . exp
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

    exp                            shift and go to state 77
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    ifc                            shift and go to state 9
    it                             shift and go to state 12

state 32

    (26) exp -> exp XOR . exp
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

    exp                            shift and go to state 78
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    ifc                            shift and go to state 9
    it                             shift and go to state 12

state 33

    (27) exp -> exp AND . exp
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

    exp                            shift and go to state 79
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    ifc                            shift and go to state 9
    it                             shift and go to state 12

state 34

    (37) exp -> exp TO . exp
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

    exp                            shift and go to state 80
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    ifc                            shift and go to state 9
    it                             shift and go to state 12

state 35

    (47) exp -> exp IN . it
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    [               shift and go to state 21
    ]               shift and go to state 22

    it                             shift and go to state 81

state 36

    (6) agt -> exp [ . exp ]
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

    exp                            shift and go to state 82
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    ifc                            shift and go to state 9
    it                             shift and go to state 12

state 37

    (28) cmp -> exp CMP . exp
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

    exp                            shift and go to state 83
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    ifc                            shift and go to state 9
    it                             shift and go to state 12

state 38

    (2) arr -> arr , . exp
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

    arr                            shift and go to state 2
    exp                            shift and go to state 84
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    ifc                            shift and go to state 9
    it                             shift and go to state 12

state 39

    (4) exp -> ( ) .

    ,               reduce using rule 4 (exp -> ( ) .)
    +               reduce using rule 4 (exp -> ( ) .)
    -               reduce using rule 4 (exp -> ( ) .)
    *               reduce using rule 4 (exp -> ( ) .)
    DIV             reduce using rule 4 (exp -> ( ) .)
    MOD             reduce using rule 4 (exp -> ( ) .)
    POW             reduce using rule 4 (exp -> ( ) .)
    OR              reduce using rule 4 (exp -> ( ) .)
    XOR             reduce using rule 4 (exp -> ( ) .)
    AND             reduce using rule 4 (exp -> ( ) .)
    TO              reduce using rule 4 (exp -> ( ) .)
    IN              reduce using rule 4 (exp -> ( ) .)
    [               reduce using rule 4 (exp -> ( ) .)
    CMP             reduce using rule 4 (exp -> ( ) .)
    $end            reduce using rule 4 (exp -> ( ) .)
    )               reduce using rule 4 (exp -> ( ) .)
    ;               reduce using rule 4 (exp -> ( ) .)
    }               reduce using rule 4 (exp -> ( ) .)
    :               reduce using rule 4 (exp -> ( ) .)
    ]               reduce using rule 4 (exp -> ( ) .)
    END             reduce using rule 4 (exp -> ( ) .)
    ELSE            reduce using rule 4 (exp -> ( ) .)


state 40

    (40) exp -> ( exp . )
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    )               shift and go to state 85
    ,               shift and go to state 24
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    DIV             shift and go to state 28
    MOD             shift and go to state 29
    POW             shift and go to state 30
    OR              shift and go to state 31
    XOR             shift and go to state 32
    AND             shift and go to state 33
    TO              shift and go to state 34
    IN              shift and go to state 35
    [               shift and go to state 36
    CMP             shift and go to state 37


state 41

    (8) exp -> ID + . ASG exp
    (48) exp -> ID + . exp
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    ASG             shift and go to state 86
    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

    exp                            shift and go to state 87
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    ifc                            shift and go to state 9
    it                             shift and go to state 12

state 42

    (18) exp -> ID ASG . exp
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

    exp                            shift and go to state 88
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    ifc                            shift and go to state 9
    it                             shift and go to state 12

state 43

    (9) exp -> ID - . ASG exp
    (49) exp -> ID - . exp
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    ASG             shift and go to state 89
    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

    exp                            shift and go to state 90
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    ifc                            shift and go to state 9
    it                             shift and go to state 12

state 44

    (10) exp -> ID USG .

    ,               reduce using rule 10 (exp -> ID USG .)
    +               reduce using rule 10 (exp -> ID USG .)
    -               reduce using rule 10 (exp -> ID USG .)
    *               reduce using rule 10 (exp -> ID USG .)
    DIV             reduce using rule 10 (exp -> ID USG .)
    MOD             reduce using rule 10 (exp -> ID USG .)
    POW             reduce using rule 10 (exp -> ID USG .)
    OR              reduce using rule 10 (exp -> ID USG .)
    XOR             reduce using rule 10 (exp -> ID USG .)
    AND             reduce using rule 10 (exp -> ID USG .)
    TO              reduce using rule 10 (exp -> ID USG .)
    IN              reduce using rule 10 (exp -> ID USG .)
    [               reduce using rule 10 (exp -> ID USG .)
    CMP             reduce using rule 10 (exp -> ID USG .)
    $end            reduce using rule 10 (exp -> ID USG .)
    )               reduce using rule 10 (exp -> ID USG .)
    ;               reduce using rule 10 (exp -> ID USG .)
    }               reduce using rule 10 (exp -> ID USG .)
    :               reduce using rule 10 (exp -> ID USG .)
    ]               reduce using rule 10 (exp -> ID USG .)
    END             reduce using rule 10 (exp -> ID USG .)
    ELSE            reduce using rule 10 (exp -> ID USG .)


state 45

    (11) exp -> ID * . ASG exp
    (51) exp -> ID * . exp
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    ASG             shift and go to state 91
    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

    exp                            shift and go to state 92
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    ifc                            shift and go to state 9
    it                             shift and go to state 12

state 46

    (12) exp -> ID DIV . ASG exp
    (52) exp -> ID DIV . exp
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    ASG             shift and go to state 93
    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

    exp                            shift and go to state 94
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    ifc                            shift and go to state 9
    it                             shift and go to state 12

state 47

    (13) exp -> ID MOD . ASG exp
    (53) exp -> ID MOD . exp
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    ASG             shift and go to state 95
    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

    exp                            shift and go to state 96
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    ifc                            shift and go to state 9
    it                             shift and go to state 12

state 48

    (14) exp -> ID POW . ASG exp
    (54) exp -> ID POW . exp
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    ASG             shift and go to state 97
    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

    exp                            shift and go to state 98
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    ifc                            shift and go to state 9
    it                             shift and go to state 12

state 49

    (15) exp -> ID OR . ASG exp
    (55) exp -> ID OR . exp
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    ASG             shift and go to state 99
    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

    exp                            shift and go to state 100
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    ifc                            shift and go to state 9
    it                             shift and go to state 12

state 50

    (16) exp -> ID XOR . ASG exp
    (56) exp -> ID XOR . exp
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    ASG             shift and go to state 101
    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

    exp                            shift and go to state 102
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    ifc                            shift and go to state 9
    it                             shift and go to state 12

state 51

    (17) exp -> ID AND . ASG exp
    (57) exp -> ID AND . exp
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    ASG             shift and go to state 103
    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

    exp                            shift and go to state 104
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    ifc                            shift and go to state 9
    it                             shift and go to state 12

state 52

    (38) exp -> ID ( . exp )
    (39) exp -> ID ( . )
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    )               shift and go to state 106
    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

    exp                            shift and go to state 105
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    ifc                            shift and go to state 9
    it                             shift and go to state 12

state 53

    (58) exp -> + exp .
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    ,               reduce using rule 58 (exp -> + exp .)
    +               reduce using rule 58 (exp -> + exp .)
    -               reduce using rule 58 (exp -> + exp .)
    OR              reduce using rule 58 (exp -> + exp .)
    XOR             reduce using rule 58 (exp -> + exp .)
    AND             reduce using rule 58 (exp -> + exp .)
    TO              reduce using rule 58 (exp -> + exp .)
    IN              reduce using rule 58 (exp -> + exp .)
    CMP             reduce using rule 58 (exp -> + exp .)
    $end            reduce using rule 58 (exp -> + exp .)
    )               reduce using rule 58 (exp -> + exp .)
    ;               reduce using rule 58 (exp -> + exp .)
    }               reduce using rule 58 (exp -> + exp .)
    :               reduce using rule 58 (exp -> + exp .)
    ]               reduce using rule 58 (exp -> + exp .)
    END             reduce using rule 58 (exp -> + exp .)
    ELSE            reduce using rule 58 (exp -> + exp .)
    *               shift and go to state 27
    DIV             shift and go to state 28
    MOD             shift and go to state 29
    POW             shift and go to state 30
    [               shift and go to state 36

  ! *               [ reduce using rule 58 (exp -> + exp .) ]
  ! DIV             [ reduce using rule 58 (exp -> + exp .) ]
  ! MOD             [ reduce using rule 58 (exp -> + exp .) ]
  ! POW             [ reduce using rule 58 (exp -> + exp .) ]
  ! [               [ reduce using rule 58 (exp -> + exp .) ]
  ! ,               [ shift and go to state 24 ]
  ! +               [ shift and go to state 25 ]
  ! -               [ shift and go to state 26 ]
  ! OR              [ shift and go to state 31 ]
  ! XOR             [ shift and go to state 32 ]
  ! AND             [ shift and go to state 33 ]
  ! TO              [ shift and go to state 34 ]
  ! IN              [ shift and go to state 35 ]
  ! CMP             [ shift and go to state 37 ]


state 54

    (50) exp -> - exp .
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    ,               reduce using rule 50 (exp -> - exp .)
    +               reduce using rule 50 (exp -> - exp .)
    -               reduce using rule 50 (exp -> - exp .)
    OR              reduce using rule 50 (exp -> - exp .)
    XOR             reduce using rule 50 (exp -> - exp .)
    AND             reduce using rule 50 (exp -> - exp .)
    TO              reduce using rule 50 (exp -> - exp .)
    IN              reduce using rule 50 (exp -> - exp .)
    CMP             reduce using rule 50 (exp -> - exp .)
    $end            reduce using rule 50 (exp -> - exp .)
    )               reduce using rule 50 (exp -> - exp .)
    ;               reduce using rule 50 (exp -> - exp .)
    }               reduce using rule 50 (exp -> - exp .)
    :               reduce using rule 50 (exp -> - exp .)
    ]               reduce using rule 50 (exp -> - exp .)
    END             reduce using rule 50 (exp -> - exp .)
    ELSE            reduce using rule 50 (exp -> - exp .)
    *               shift and go to state 27
    DIV             shift and go to state 28
    MOD             shift and go to state 29
    POW             shift and go to state 30
    [               shift and go to state 36

  ! *               [ reduce using rule 50 (exp -> - exp .) ]
  ! DIV             [ reduce using rule 50 (exp -> - exp .) ]
  ! MOD             [ reduce using rule 50 (exp -> - exp .) ]
  ! POW             [ reduce using rule 50 (exp -> - exp .) ]
  ! [               [ reduce using rule 50 (exp -> - exp .) ]
  ! ,               [ shift and go to state 24 ]
  ! +               [ shift and go to state 25 ]
  ! -               [ shift and go to state 26 ]
  ! OR              [ shift and go to state 31 ]
  ! XOR             [ shift and go to state 32 ]
  ! AND             [ shift and go to state 33 ]
  ! TO              [ shift and go to state 34 ]
  ! IN              [ shift and go to state 35 ]
  ! CMP             [ shift and go to state 37 ]


state 55

    (29) cmp -> cmp CMP . exp
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

    cmp                            shift and go to state 8
    exp                            shift and go to state 107
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    ifc                            shift and go to state 9
    it                             shift and go to state 12

state 56

    (34) exp -> ifc END .

    ,               reduce using rule 34 (exp -> ifc END .)
    +               reduce using rule 34 (exp -> ifc END .)
    -               reduce using rule 34 (exp -> ifc END .)
    *               reduce using rule 34 (exp -> ifc END .)
    DIV             reduce using rule 34 (exp -> ifc END .)
    MOD             reduce using rule 34 (exp -> ifc END .)
    POW             reduce using rule 34 (exp -> ifc END .)
    OR              reduce using rule 34 (exp -> ifc END .)
    XOR             reduce using rule 34 (exp -> ifc END .)
    AND             reduce using rule 34 (exp -> ifc END .)
    TO              reduce using rule 34 (exp -> ifc END .)
    IN              reduce using rule 34 (exp -> ifc END .)
    [               reduce using rule 34 (exp -> ifc END .)
    CMP             reduce using rule 34 (exp -> ifc END .)
    $end            reduce using rule 34 (exp -> ifc END .)
    )               reduce using rule 34 (exp -> ifc END .)
    ;               reduce using rule 34 (exp -> ifc END .)
    }               reduce using rule 34 (exp -> ifc END .)
    :               reduce using rule 34 (exp -> ifc END .)
    ]               reduce using rule 34 (exp -> ifc END .)
    END             reduce using rule 34 (exp -> ifc END .)
    ELSE            reduce using rule 34 (exp -> ifc END .)


state 57

    (35) exp -> FOR ID . IN exp : exp END

    IN              shift and go to state 108


state 58

    (36) exp -> FOR NUM . ID IN it : exp END

    ID              shift and go to state 109


state 59

    (59) exp -> NOT exp .
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    ,               reduce using rule 59 (exp -> NOT exp .)
    +               reduce using rule 59 (exp -> NOT exp .)
    -               reduce using rule 59 (exp -> NOT exp .)
    *               reduce using rule 59 (exp -> NOT exp .)
    DIV             reduce using rule 59 (exp -> NOT exp .)
    MOD             reduce using rule 59 (exp -> NOT exp .)
    POW             reduce using rule 59 (exp -> NOT exp .)
    OR              reduce using rule 59 (exp -> NOT exp .)
    XOR             reduce using rule 59 (exp -> NOT exp .)
    AND             reduce using rule 59 (exp -> NOT exp .)
    TO              reduce using rule 59 (exp -> NOT exp .)
    IN              reduce using rule 59 (exp -> NOT exp .)
    CMP             reduce using rule 59 (exp -> NOT exp .)
    $end            reduce using rule 59 (exp -> NOT exp .)
    )               reduce using rule 59 (exp -> NOT exp .)
    ;               reduce using rule 59 (exp -> NOT exp .)
    }               reduce using rule 59 (exp -> NOT exp .)
    :               reduce using rule 59 (exp -> NOT exp .)
    ]               reduce using rule 59 (exp -> NOT exp .)
    END             reduce using rule 59 (exp -> NOT exp .)
    ELSE            reduce using rule 59 (exp -> NOT exp .)
    [               shift and go to state 36

  ! [               [ reduce using rule 59 (exp -> NOT exp .) ]
  ! ,               [ shift and go to state 24 ]
  ! +               [ shift and go to state 25 ]
  ! -               [ shift and go to state 26 ]
  ! *               [ shift and go to state 27 ]
  ! DIV             [ shift and go to state 28 ]
  ! MOD             [ shift and go to state 29 ]
  ! POW             [ shift and go to state 30 ]
  ! OR              [ shift and go to state 31 ]
  ! XOR             [ shift and go to state 32 ]
  ! AND             [ shift and go to state 33 ]
  ! TO              [ shift and go to state 34 ]
  ! IN              [ shift and go to state 35 ]
  ! CMP             [ shift and go to state 37 ]


state 60

    (60) exp -> ECHO exp .
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    IN              reduce using rule 60 (exp -> ECHO exp .)
    $end            reduce using rule 60 (exp -> ECHO exp .)
    )               reduce using rule 60 (exp -> ECHO exp .)
    ;               reduce using rule 60 (exp -> ECHO exp .)
    }               reduce using rule 60 (exp -> ECHO exp .)
    :               reduce using rule 60 (exp -> ECHO exp .)
    ]               reduce using rule 60 (exp -> ECHO exp .)
    END             reduce using rule 60 (exp -> ECHO exp .)
    ELSE            reduce using rule 60 (exp -> ECHO exp .)
    ,               shift and go to state 24
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    DIV             shift and go to state 28
    MOD             shift and go to state 29
    POW             shift and go to state 30
    OR              shift and go to state 31
    XOR             shift and go to state 32
    AND             shift and go to state 33
    TO              shift and go to state 34
    [               shift and go to state 36
    CMP             shift and go to state 37

  ! ,               [ reduce using rule 60 (exp -> ECHO exp .) ]
  ! +               [ reduce using rule 60 (exp -> ECHO exp .) ]
  ! -               [ reduce using rule 60 (exp -> ECHO exp .) ]
  ! *               [ reduce using rule 60 (exp -> ECHO exp .) ]
  ! DIV             [ reduce using rule 60 (exp -> ECHO exp .) ]
  ! MOD             [ reduce using rule 60 (exp -> ECHO exp .) ]
  ! POW             [ reduce using rule 60 (exp -> ECHO exp .) ]
  ! OR              [ reduce using rule 60 (exp -> ECHO exp .) ]
  ! XOR             [ reduce using rule 60 (exp -> ECHO exp .) ]
  ! AND             [ reduce using rule 60 (exp -> ECHO exp .) ]
  ! TO              [ reduce using rule 60 (exp -> ECHO exp .) ]
  ! [               [ reduce using rule 60 (exp -> ECHO exp .) ]
  ! CMP             [ reduce using rule 60 (exp -> ECHO exp .) ]
  ! IN              [ shift and go to state 35 ]


state 61

    (61) exp -> LOAD exp .
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    IN              reduce using rule 61 (exp -> LOAD exp .)
    $end            reduce using rule 61 (exp -> LOAD exp .)
    )               reduce using rule 61 (exp -> LOAD exp .)
    ;               reduce using rule 61 (exp -> LOAD exp .)
    }               reduce using rule 61 (exp -> LOAD exp .)
    :               reduce using rule 61 (exp -> LOAD exp .)
    ]               reduce using rule 61 (exp -> LOAD exp .)
    END             reduce using rule 61 (exp -> LOAD exp .)
    ELSE            reduce using rule 61 (exp -> LOAD exp .)
    ,               shift and go to state 24
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    DIV             shift and go to state 28
    MOD             shift and go to state 29
    POW             shift and go to state 30
    OR              shift and go to state 31
    XOR             shift and go to state 32
    AND             shift and go to state 33
    TO              shift and go to state 34
    [               shift and go to state 36
    CMP             shift and go to state 37

  ! ,               [ reduce using rule 61 (exp -> LOAD exp .) ]
  ! +               [ reduce using rule 61 (exp -> LOAD exp .) ]
  ! -               [ reduce using rule 61 (exp -> LOAD exp .) ]
  ! *               [ reduce using rule 61 (exp -> LOAD exp .) ]
  ! DIV             [ reduce using rule 61 (exp -> LOAD exp .) ]
  ! MOD             [ reduce using rule 61 (exp -> LOAD exp .) ]
  ! POW             [ reduce using rule 61 (exp -> LOAD exp .) ]
  ! OR              [ reduce using rule 61 (exp -> LOAD exp .) ]
  ! XOR             [ reduce using rule 61 (exp -> LOAD exp .) ]
  ! AND             [ reduce using rule 61 (exp -> LOAD exp .) ]
  ! TO              [ reduce using rule 61 (exp -> LOAD exp .) ]
  ! [               [ reduce using rule 61 (exp -> LOAD exp .) ]
  ! CMP             [ reduce using rule 61 (exp -> LOAD exp .) ]
  ! IN              [ shift and go to state 35 ]


state 62

    (62) exp -> EVAL exp .
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    IN              reduce using rule 62 (exp -> EVAL exp .)
    $end            reduce using rule 62 (exp -> EVAL exp .)
    )               reduce using rule 62 (exp -> EVAL exp .)
    ;               reduce using rule 62 (exp -> EVAL exp .)
    }               reduce using rule 62 (exp -> EVAL exp .)
    :               reduce using rule 62 (exp -> EVAL exp .)
    ]               reduce using rule 62 (exp -> EVAL exp .)
    END             reduce using rule 62 (exp -> EVAL exp .)
    ELSE            reduce using rule 62 (exp -> EVAL exp .)
    ,               shift and go to state 24
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    DIV             shift and go to state 28
    MOD             shift and go to state 29
    POW             shift and go to state 30
    OR              shift and go to state 31
    XOR             shift and go to state 32
    AND             shift and go to state 33
    TO              shift and go to state 34
    [               shift and go to state 36
    CMP             shift and go to state 37

  ! ,               [ reduce using rule 62 (exp -> EVAL exp .) ]
  ! +               [ reduce using rule 62 (exp -> EVAL exp .) ]
  ! -               [ reduce using rule 62 (exp -> EVAL exp .) ]
  ! *               [ reduce using rule 62 (exp -> EVAL exp .) ]
  ! DIV             [ reduce using rule 62 (exp -> EVAL exp .) ]
  ! MOD             [ reduce using rule 62 (exp -> EVAL exp .) ]
  ! POW             [ reduce using rule 62 (exp -> EVAL exp .) ]
  ! OR              [ reduce using rule 62 (exp -> EVAL exp .) ]
  ! XOR             [ reduce using rule 62 (exp -> EVAL exp .) ]
  ! AND             [ reduce using rule 62 (exp -> EVAL exp .) ]
  ! TO              [ reduce using rule 62 (exp -> EVAL exp .) ]
  ! [               [ reduce using rule 62 (exp -> EVAL exp .) ]
  ! CMP             [ reduce using rule 62 (exp -> EVAL exp .) ]
  ! IN              [ shift and go to state 35 ]


state 63

    (66) exp -> { seq . }

    }               shift and go to state 110


state 64

    (63) seq -> exp . ; seq
    (64) seq -> exp . ;
    (65) seq -> exp .
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    ;               shift and go to state 111
    }               reduce using rule 65 (seq -> exp .)
    ,               shift and go to state 24
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    DIV             shift and go to state 28
    MOD             shift and go to state 29
    POW             shift and go to state 30
    OR              shift and go to state 31
    XOR             shift and go to state 32
    AND             shift and go to state 33
    TO              shift and go to state 34
    IN              shift and go to state 35
    [               shift and go to state 36
    CMP             shift and go to state 37


state 65

    (67) exp -> STK exp .
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    ,               reduce using rule 67 (exp -> STK exp .)
    +               reduce using rule 67 (exp -> STK exp .)
    -               reduce using rule 67 (exp -> STK exp .)
    *               reduce using rule 67 (exp -> STK exp .)
    DIV             reduce using rule 67 (exp -> STK exp .)
    MOD             reduce using rule 67 (exp -> STK exp .)
    POW             reduce using rule 67 (exp -> STK exp .)
    OR              reduce using rule 67 (exp -> STK exp .)
    XOR             reduce using rule 67 (exp -> STK exp .)
    AND             reduce using rule 67 (exp -> STK exp .)
    TO              reduce using rule 67 (exp -> STK exp .)
    IN              reduce using rule 67 (exp -> STK exp .)
    CMP             reduce using rule 67 (exp -> STK exp .)
    $end            reduce using rule 67 (exp -> STK exp .)
    )               reduce using rule 67 (exp -> STK exp .)
    ;               reduce using rule 67 (exp -> STK exp .)
    }               reduce using rule 67 (exp -> STK exp .)
    :               reduce using rule 67 (exp -> STK exp .)
    ]               reduce using rule 67 (exp -> STK exp .)
    END             reduce using rule 67 (exp -> STK exp .)
    ELSE            reduce using rule 67 (exp -> STK exp .)
    [               shift and go to state 36

  ! [               [ reduce using rule 67 (exp -> STK exp .) ]
  ! ,               [ shift and go to state 24 ]
  ! +               [ shift and go to state 25 ]
  ! -               [ shift and go to state 26 ]
  ! *               [ shift and go to state 27 ]
  ! DIV             [ shift and go to state 28 ]
  ! MOD             [ shift and go to state 29 ]
  ! POW             [ shift and go to state 30 ]
  ! OR              [ shift and go to state 31 ]
  ! XOR             [ shift and go to state 32 ]
  ! AND             [ shift and go to state 33 ]
  ! TO              [ shift and go to state 34 ]
  ! IN              [ shift and go to state 35 ]
  ! CMP             [ shift and go to state 37 ]


state 66

    (70) exp -> WHILE exp . : exp END
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    :               shift and go to state 112
    ,               shift and go to state 24
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    DIV             shift and go to state 28
    MOD             shift and go to state 29
    POW             shift and go to state 30
    OR              shift and go to state 31
    XOR             shift and go to state 32
    AND             shift and go to state 33
    TO              shift and go to state 34
    IN              shift and go to state 35
    [               shift and go to state 36
    CMP             shift and go to state 37


state 67

    (42) it -> [ exp . , exp ]
    (44) it -> [ exp . , exp [
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    ,               shift and go to state 113
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    DIV             shift and go to state 28
    MOD             shift and go to state 29
    POW             shift and go to state 30
    OR              shift and go to state 31
    XOR             shift and go to state 32
    AND             shift and go to state 33
    TO              shift and go to state 34
    IN              shift and go to state 35
    [               shift and go to state 36
    CMP             shift and go to state 37


state 68

    (43) it -> ] exp . , exp ]
    (45) it -> ] exp . , exp [
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    ,               shift and go to state 114
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    DIV             shift and go to state 28
    MOD             shift and go to state 29
    POW             shift and go to state 30
    OR              shift and go to state 31
    XOR             shift and go to state 32
    AND             shift and go to state 33
    TO              shift and go to state 34
    IN              shift and go to state 35
    [               shift and go to state 36
    CMP             shift and go to state 37


state 69

    (31) ifc -> IF exp . : exp
    (32) ifc -> IF exp . : exp ELSE exp
    (33) ifc -> IF exp . : exp ELSE ifc
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    :               shift and go to state 115
    ,               shift and go to state 24
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    DIV             shift and go to state 28
    MOD             shift and go to state 29
    POW             shift and go to state 30
    OR              shift and go to state 31
    XOR             shift and go to state 32
    AND             shift and go to state 33
    TO              shift and go to state 34
    IN              shift and go to state 35
    [               shift and go to state 36
    CMP             shift and go to state 37


state 70

    (1) arr -> exp , exp .
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    ,               reduce using rule 1 (arr -> exp , exp .)
    TO              reduce using rule 1 (arr -> exp , exp .)
    IN              reduce using rule 1 (arr -> exp , exp .)
    $end            reduce using rule 1 (arr -> exp , exp .)
    )               reduce using rule 1 (arr -> exp , exp .)
    ;               reduce using rule 1 (arr -> exp , exp .)
    }               reduce using rule 1 (arr -> exp , exp .)
    :               reduce using rule 1 (arr -> exp , exp .)
    ]               reduce using rule 1 (arr -> exp , exp .)
    END             reduce using rule 1 (arr -> exp , exp .)
    ELSE            reduce using rule 1 (arr -> exp , exp .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    DIV             shift and go to state 28
    MOD             shift and go to state 29
    POW             shift and go to state 30
    OR              shift and go to state 31
    XOR             shift and go to state 32
    AND             shift and go to state 33
    [               shift and go to state 36
    CMP             shift and go to state 37

  ! +               [ reduce using rule 1 (arr -> exp , exp .) ]
  ! -               [ reduce using rule 1 (arr -> exp , exp .) ]
  ! *               [ reduce using rule 1 (arr -> exp , exp .) ]
  ! DIV             [ reduce using rule 1 (arr -> exp , exp .) ]
  ! MOD             [ reduce using rule 1 (arr -> exp , exp .) ]
  ! POW             [ reduce using rule 1 (arr -> exp , exp .) ]
  ! OR              [ reduce using rule 1 (arr -> exp , exp .) ]
  ! XOR             [ reduce using rule 1 (arr -> exp , exp .) ]
  ! AND             [ reduce using rule 1 (arr -> exp , exp .) ]
  ! [               [ reduce using rule 1 (arr -> exp , exp .) ]
  ! CMP             [ reduce using rule 1 (arr -> exp , exp .) ]
  ! ,               [ shift and go to state 24 ]
  ! TO              [ shift and go to state 34 ]
  ! IN              [ shift and go to state 35 ]


state 71

    (19) exp -> exp + exp .
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    ,               reduce using rule 19 (exp -> exp + exp .)
    +               reduce using rule 19 (exp -> exp + exp .)
    -               reduce using rule 19 (exp -> exp + exp .)
    OR              reduce using rule 19 (exp -> exp + exp .)
    XOR             reduce using rule 19 (exp -> exp + exp .)
    AND             reduce using rule 19 (exp -> exp + exp .)
    TO              reduce using rule 19 (exp -> exp + exp .)
    IN              reduce using rule 19 (exp -> exp + exp .)
    CMP             reduce using rule 19 (exp -> exp + exp .)
    $end            reduce using rule 19 (exp -> exp + exp .)
    )               reduce using rule 19 (exp -> exp + exp .)
    ;               reduce using rule 19 (exp -> exp + exp .)
    }               reduce using rule 19 (exp -> exp + exp .)
    :               reduce using rule 19 (exp -> exp + exp .)
    ]               reduce using rule 19 (exp -> exp + exp .)
    END             reduce using rule 19 (exp -> exp + exp .)
    ELSE            reduce using rule 19 (exp -> exp + exp .)
    *               shift and go to state 27
    DIV             shift and go to state 28
    MOD             shift and go to state 29
    POW             shift and go to state 30
    [               shift and go to state 36

  ! *               [ reduce using rule 19 (exp -> exp + exp .) ]
  ! DIV             [ reduce using rule 19 (exp -> exp + exp .) ]
  ! MOD             [ reduce using rule 19 (exp -> exp + exp .) ]
  ! POW             [ reduce using rule 19 (exp -> exp + exp .) ]
  ! [               [ reduce using rule 19 (exp -> exp + exp .) ]
  ! ,               [ shift and go to state 24 ]
  ! +               [ shift and go to state 25 ]
  ! -               [ shift and go to state 26 ]
  ! OR              [ shift and go to state 31 ]
  ! XOR             [ shift and go to state 32 ]
  ! AND             [ shift and go to state 33 ]
  ! TO              [ shift and go to state 34 ]
  ! IN              [ shift and go to state 35 ]
  ! CMP             [ shift and go to state 37 ]


state 72

    (20) exp -> exp - exp .
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    ,               reduce using rule 20 (exp -> exp - exp .)
    +               reduce using rule 20 (exp -> exp - exp .)
    -               reduce using rule 20 (exp -> exp - exp .)
    OR              reduce using rule 20 (exp -> exp - exp .)
    XOR             reduce using rule 20 (exp -> exp - exp .)
    AND             reduce using rule 20 (exp -> exp - exp .)
    TO              reduce using rule 20 (exp -> exp - exp .)
    IN              reduce using rule 20 (exp -> exp - exp .)
    CMP             reduce using rule 20 (exp -> exp - exp .)
    $end            reduce using rule 20 (exp -> exp - exp .)
    )               reduce using rule 20 (exp -> exp - exp .)
    ;               reduce using rule 20 (exp -> exp - exp .)
    }               reduce using rule 20 (exp -> exp - exp .)
    :               reduce using rule 20 (exp -> exp - exp .)
    ]               reduce using rule 20 (exp -> exp - exp .)
    END             reduce using rule 20 (exp -> exp - exp .)
    ELSE            reduce using rule 20 (exp -> exp - exp .)
    *               shift and go to state 27
    DIV             shift and go to state 28
    MOD             shift and go to state 29
    POW             shift and go to state 30
    [               shift and go to state 36

  ! *               [ reduce using rule 20 (exp -> exp - exp .) ]
  ! DIV             [ reduce using rule 20 (exp -> exp - exp .) ]
  ! MOD             [ reduce using rule 20 (exp -> exp - exp .) ]
  ! POW             [ reduce using rule 20 (exp -> exp - exp .) ]
  ! [               [ reduce using rule 20 (exp -> exp - exp .) ]
  ! ,               [ shift and go to state 24 ]
  ! +               [ shift and go to state 25 ]
  ! -               [ shift and go to state 26 ]
  ! OR              [ shift and go to state 31 ]
  ! XOR             [ shift and go to state 32 ]
  ! AND             [ shift and go to state 33 ]
  ! TO              [ shift and go to state 34 ]
  ! IN              [ shift and go to state 35 ]
  ! CMP             [ shift and go to state 37 ]


state 73

    (21) exp -> exp * exp .
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    ,               reduce using rule 21 (exp -> exp * exp .)
    +               reduce using rule 21 (exp -> exp * exp .)
    -               reduce using rule 21 (exp -> exp * exp .)
    *               reduce using rule 21 (exp -> exp * exp .)
    DIV             reduce using rule 21 (exp -> exp * exp .)
    MOD             reduce using rule 21 (exp -> exp * exp .)
    OR              reduce using rule 21 (exp -> exp * exp .)
    XOR             reduce using rule 21 (exp -> exp * exp .)
    AND             reduce using rule 21 (exp -> exp * exp .)
    TO              reduce using rule 21 (exp -> exp * exp .)
    IN              reduce using rule 21 (exp -> exp * exp .)
    CMP             reduce using rule 21 (exp -> exp * exp .)
    $end            reduce using rule 21 (exp -> exp * exp .)
    )               reduce using rule 21 (exp -> exp * exp .)
    ;               reduce using rule 21 (exp -> exp * exp .)
    }               reduce using rule 21 (exp -> exp * exp .)
    :               reduce using rule 21 (exp -> exp * exp .)
    ]               reduce using rule 21 (exp -> exp * exp .)
    END             reduce using rule 21 (exp -> exp * exp .)
    ELSE            reduce using rule 21 (exp -> exp * exp .)
    POW             shift and go to state 30
    [               shift and go to state 36

  ! POW             [ reduce using rule 21 (exp -> exp * exp .) ]
  ! [               [ reduce using rule 21 (exp -> exp * exp .) ]
  ! ,               [ shift and go to state 24 ]
  ! +               [ shift and go to state 25 ]
  ! -               [ shift and go to state 26 ]
  ! *               [ shift and go to state 27 ]
  ! DIV             [ shift and go to state 28 ]
  ! MOD             [ shift and go to state 29 ]
  ! OR              [ shift and go to state 31 ]
  ! XOR             [ shift and go to state 32 ]
  ! AND             [ shift and go to state 33 ]
  ! TO              [ shift and go to state 34 ]
  ! IN              [ shift and go to state 35 ]
  ! CMP             [ shift and go to state 37 ]


state 74

    (22) exp -> exp DIV exp .
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    ,               reduce using rule 22 (exp -> exp DIV exp .)
    +               reduce using rule 22 (exp -> exp DIV exp .)
    -               reduce using rule 22 (exp -> exp DIV exp .)
    *               reduce using rule 22 (exp -> exp DIV exp .)
    DIV             reduce using rule 22 (exp -> exp DIV exp .)
    MOD             reduce using rule 22 (exp -> exp DIV exp .)
    OR              reduce using rule 22 (exp -> exp DIV exp .)
    XOR             reduce using rule 22 (exp -> exp DIV exp .)
    AND             reduce using rule 22 (exp -> exp DIV exp .)
    TO              reduce using rule 22 (exp -> exp DIV exp .)
    IN              reduce using rule 22 (exp -> exp DIV exp .)
    CMP             reduce using rule 22 (exp -> exp DIV exp .)
    $end            reduce using rule 22 (exp -> exp DIV exp .)
    )               reduce using rule 22 (exp -> exp DIV exp .)
    ;               reduce using rule 22 (exp -> exp DIV exp .)
    }               reduce using rule 22 (exp -> exp DIV exp .)
    :               reduce using rule 22 (exp -> exp DIV exp .)
    ]               reduce using rule 22 (exp -> exp DIV exp .)
    END             reduce using rule 22 (exp -> exp DIV exp .)
    ELSE            reduce using rule 22 (exp -> exp DIV exp .)
    POW             shift and go to state 30
    [               shift and go to state 36

  ! POW             [ reduce using rule 22 (exp -> exp DIV exp .) ]
  ! [               [ reduce using rule 22 (exp -> exp DIV exp .) ]
  ! ,               [ shift and go to state 24 ]
  ! +               [ shift and go to state 25 ]
  ! -               [ shift and go to state 26 ]
  ! *               [ shift and go to state 27 ]
  ! DIV             [ shift and go to state 28 ]
  ! MOD             [ shift and go to state 29 ]
  ! OR              [ shift and go to state 31 ]
  ! XOR             [ shift and go to state 32 ]
  ! AND             [ shift and go to state 33 ]
  ! TO              [ shift and go to state 34 ]
  ! IN              [ shift and go to state 35 ]
  ! CMP             [ shift and go to state 37 ]


state 75

    (23) exp -> exp MOD exp .
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    ,               reduce using rule 23 (exp -> exp MOD exp .)
    +               reduce using rule 23 (exp -> exp MOD exp .)
    -               reduce using rule 23 (exp -> exp MOD exp .)
    *               reduce using rule 23 (exp -> exp MOD exp .)
    DIV             reduce using rule 23 (exp -> exp MOD exp .)
    MOD             reduce using rule 23 (exp -> exp MOD exp .)
    OR              reduce using rule 23 (exp -> exp MOD exp .)
    XOR             reduce using rule 23 (exp -> exp MOD exp .)
    AND             reduce using rule 23 (exp -> exp MOD exp .)
    TO              reduce using rule 23 (exp -> exp MOD exp .)
    IN              reduce using rule 23 (exp -> exp MOD exp .)
    CMP             reduce using rule 23 (exp -> exp MOD exp .)
    $end            reduce using rule 23 (exp -> exp MOD exp .)
    )               reduce using rule 23 (exp -> exp MOD exp .)
    ;               reduce using rule 23 (exp -> exp MOD exp .)
    }               reduce using rule 23 (exp -> exp MOD exp .)
    :               reduce using rule 23 (exp -> exp MOD exp .)
    ]               reduce using rule 23 (exp -> exp MOD exp .)
    END             reduce using rule 23 (exp -> exp MOD exp .)
    ELSE            reduce using rule 23 (exp -> exp MOD exp .)
    POW             shift and go to state 30
    [               shift and go to state 36

  ! POW             [ reduce using rule 23 (exp -> exp MOD exp .) ]
  ! [               [ reduce using rule 23 (exp -> exp MOD exp .) ]
  ! ,               [ shift and go to state 24 ]
  ! +               [ shift and go to state 25 ]
  ! -               [ shift and go to state 26 ]
  ! *               [ shift and go to state 27 ]
  ! DIV             [ shift and go to state 28 ]
  ! MOD             [ shift and go to state 29 ]
  ! OR              [ shift and go to state 31 ]
  ! XOR             [ shift and go to state 32 ]
  ! AND             [ shift and go to state 33 ]
  ! TO              [ shift and go to state 34 ]
  ! IN              [ shift and go to state 35 ]
  ! CMP             [ shift and go to state 37 ]


state 76

    (24) exp -> exp POW exp .
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    ,               reduce using rule 24 (exp -> exp POW exp .)
    +               reduce using rule 24 (exp -> exp POW exp .)
    -               reduce using rule 24 (exp -> exp POW exp .)
    *               reduce using rule 24 (exp -> exp POW exp .)
    DIV             reduce using rule 24 (exp -> exp POW exp .)
    MOD             reduce using rule 24 (exp -> exp POW exp .)
    OR              reduce using rule 24 (exp -> exp POW exp .)
    XOR             reduce using rule 24 (exp -> exp POW exp .)
    AND             reduce using rule 24 (exp -> exp POW exp .)
    TO              reduce using rule 24 (exp -> exp POW exp .)
    IN              reduce using rule 24 (exp -> exp POW exp .)
    CMP             reduce using rule 24 (exp -> exp POW exp .)
    $end            reduce using rule 24 (exp -> exp POW exp .)
    )               reduce using rule 24 (exp -> exp POW exp .)
    ;               reduce using rule 24 (exp -> exp POW exp .)
    }               reduce using rule 24 (exp -> exp POW exp .)
    :               reduce using rule 24 (exp -> exp POW exp .)
    ]               reduce using rule 24 (exp -> exp POW exp .)
    END             reduce using rule 24 (exp -> exp POW exp .)
    ELSE            reduce using rule 24 (exp -> exp POW exp .)
    POW             shift and go to state 30
    [               shift and go to state 36

  ! POW             [ reduce using rule 24 (exp -> exp POW exp .) ]
  ! [               [ reduce using rule 24 (exp -> exp POW exp .) ]
  ! ,               [ shift and go to state 24 ]
  ! +               [ shift and go to state 25 ]
  ! -               [ shift and go to state 26 ]
  ! *               [ shift and go to state 27 ]
  ! DIV             [ shift and go to state 28 ]
  ! MOD             [ shift and go to state 29 ]
  ! OR              [ shift and go to state 31 ]
  ! XOR             [ shift and go to state 32 ]
  ! AND             [ shift and go to state 33 ]
  ! TO              [ shift and go to state 34 ]
  ! IN              [ shift and go to state 35 ]
  ! CMP             [ shift and go to state 37 ]


state 77

    (25) exp -> exp OR exp .
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    ,               reduce using rule 25 (exp -> exp OR exp .)
    OR              reduce using rule 25 (exp -> exp OR exp .)
    TO              reduce using rule 25 (exp -> exp OR exp .)
    IN              reduce using rule 25 (exp -> exp OR exp .)
    $end            reduce using rule 25 (exp -> exp OR exp .)
    )               reduce using rule 25 (exp -> exp OR exp .)
    ;               reduce using rule 25 (exp -> exp OR exp .)
    }               reduce using rule 25 (exp -> exp OR exp .)
    :               reduce using rule 25 (exp -> exp OR exp .)
    ]               reduce using rule 25 (exp -> exp OR exp .)
    END             reduce using rule 25 (exp -> exp OR exp .)
    ELSE            reduce using rule 25 (exp -> exp OR exp .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    DIV             shift and go to state 28
    MOD             shift and go to state 29
    POW             shift and go to state 30
    XOR             shift and go to state 32
    AND             shift and go to state 33
    [               shift and go to state 36
    CMP             shift and go to state 37

  ! +               [ reduce using rule 25 (exp -> exp OR exp .) ]
  ! -               [ reduce using rule 25 (exp -> exp OR exp .) ]
  ! *               [ reduce using rule 25 (exp -> exp OR exp .) ]
  ! DIV             [ reduce using rule 25 (exp -> exp OR exp .) ]
  ! MOD             [ reduce using rule 25 (exp -> exp OR exp .) ]
  ! POW             [ reduce using rule 25 (exp -> exp OR exp .) ]
  ! XOR             [ reduce using rule 25 (exp -> exp OR exp .) ]
  ! AND             [ reduce using rule 25 (exp -> exp OR exp .) ]
  ! [               [ reduce using rule 25 (exp -> exp OR exp .) ]
  ! CMP             [ reduce using rule 25 (exp -> exp OR exp .) ]
  ! ,               [ shift and go to state 24 ]
  ! OR              [ shift and go to state 31 ]
  ! TO              [ shift and go to state 34 ]
  ! IN              [ shift and go to state 35 ]


state 78

    (26) exp -> exp XOR exp .
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    ,               reduce using rule 26 (exp -> exp XOR exp .)
    OR              reduce using rule 26 (exp -> exp XOR exp .)
    XOR             reduce using rule 26 (exp -> exp XOR exp .)
    TO              reduce using rule 26 (exp -> exp XOR exp .)
    IN              reduce using rule 26 (exp -> exp XOR exp .)
    $end            reduce using rule 26 (exp -> exp XOR exp .)
    )               reduce using rule 26 (exp -> exp XOR exp .)
    ;               reduce using rule 26 (exp -> exp XOR exp .)
    }               reduce using rule 26 (exp -> exp XOR exp .)
    :               reduce using rule 26 (exp -> exp XOR exp .)
    ]               reduce using rule 26 (exp -> exp XOR exp .)
    END             reduce using rule 26 (exp -> exp XOR exp .)
    ELSE            reduce using rule 26 (exp -> exp XOR exp .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    DIV             shift and go to state 28
    MOD             shift and go to state 29
    POW             shift and go to state 30
    AND             shift and go to state 33
    [               shift and go to state 36
    CMP             shift and go to state 37

  ! +               [ reduce using rule 26 (exp -> exp XOR exp .) ]
  ! -               [ reduce using rule 26 (exp -> exp XOR exp .) ]
  ! *               [ reduce using rule 26 (exp -> exp XOR exp .) ]
  ! DIV             [ reduce using rule 26 (exp -> exp XOR exp .) ]
  ! MOD             [ reduce using rule 26 (exp -> exp XOR exp .) ]
  ! POW             [ reduce using rule 26 (exp -> exp XOR exp .) ]
  ! AND             [ reduce using rule 26 (exp -> exp XOR exp .) ]
  ! [               [ reduce using rule 26 (exp -> exp XOR exp .) ]
  ! CMP             [ reduce using rule 26 (exp -> exp XOR exp .) ]
  ! ,               [ shift and go to state 24 ]
  ! OR              [ shift and go to state 31 ]
  ! XOR             [ shift and go to state 32 ]
  ! TO              [ shift and go to state 34 ]
  ! IN              [ shift and go to state 35 ]


state 79

    (27) exp -> exp AND exp .
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    ,               reduce using rule 27 (exp -> exp AND exp .)
    OR              reduce using rule 27 (exp -> exp AND exp .)
    XOR             reduce using rule 27 (exp -> exp AND exp .)
    AND             reduce using rule 27 (exp -> exp AND exp .)
    TO              reduce using rule 27 (exp -> exp AND exp .)
    IN              reduce using rule 27 (exp -> exp AND exp .)
    $end            reduce using rule 27 (exp -> exp AND exp .)
    )               reduce using rule 27 (exp -> exp AND exp .)
    ;               reduce using rule 27 (exp -> exp AND exp .)
    }               reduce using rule 27 (exp -> exp AND exp .)
    :               reduce using rule 27 (exp -> exp AND exp .)
    ]               reduce using rule 27 (exp -> exp AND exp .)
    END             reduce using rule 27 (exp -> exp AND exp .)
    ELSE            reduce using rule 27 (exp -> exp AND exp .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    DIV             shift and go to state 28
    MOD             shift and go to state 29
    POW             shift and go to state 30
    [               shift and go to state 36
    CMP             shift and go to state 37

  ! +               [ reduce using rule 27 (exp -> exp AND exp .) ]
  ! -               [ reduce using rule 27 (exp -> exp AND exp .) ]
  ! *               [ reduce using rule 27 (exp -> exp AND exp .) ]
  ! DIV             [ reduce using rule 27 (exp -> exp AND exp .) ]
  ! MOD             [ reduce using rule 27 (exp -> exp AND exp .) ]
  ! POW             [ reduce using rule 27 (exp -> exp AND exp .) ]
  ! [               [ reduce using rule 27 (exp -> exp AND exp .) ]
  ! CMP             [ reduce using rule 27 (exp -> exp AND exp .) ]
  ! ,               [ shift and go to state 24 ]
  ! OR              [ shift and go to state 31 ]
  ! XOR             [ shift and go to state 32 ]
  ! AND             [ shift and go to state 33 ]
  ! TO              [ shift and go to state 34 ]
  ! IN              [ shift and go to state 35 ]


state 80

    (37) exp -> exp TO exp .
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    IN              reduce using rule 37 (exp -> exp TO exp .)
    $end            reduce using rule 37 (exp -> exp TO exp .)
    )               reduce using rule 37 (exp -> exp TO exp .)
    ;               reduce using rule 37 (exp -> exp TO exp .)
    }               reduce using rule 37 (exp -> exp TO exp .)
    :               reduce using rule 37 (exp -> exp TO exp .)
    ]               reduce using rule 37 (exp -> exp TO exp .)
    END             reduce using rule 37 (exp -> exp TO exp .)
    ELSE            reduce using rule 37 (exp -> exp TO exp .)
    ,               shift and go to state 24
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    DIV             shift and go to state 28
    MOD             shift and go to state 29
    POW             shift and go to state 30
    OR              shift and go to state 31
    XOR             shift and go to state 32
    AND             shift and go to state 33
    TO              shift and go to state 34
    [               shift and go to state 36
    CMP             shift and go to state 37

  ! ,               [ reduce using rule 37 (exp -> exp TO exp .) ]
  ! +               [ reduce using rule 37 (exp -> exp TO exp .) ]
  ! -               [ reduce using rule 37 (exp -> exp TO exp .) ]
  ! *               [ reduce using rule 37 (exp -> exp TO exp .) ]
  ! DIV             [ reduce using rule 37 (exp -> exp TO exp .) ]
  ! MOD             [ reduce using rule 37 (exp -> exp TO exp .) ]
  ! POW             [ reduce using rule 37 (exp -> exp TO exp .) ]
  ! OR              [ reduce using rule 37 (exp -> exp TO exp .) ]
  ! XOR             [ reduce using rule 37 (exp -> exp TO exp .) ]
  ! AND             [ reduce using rule 37 (exp -> exp TO exp .) ]
  ! TO              [ reduce using rule 37 (exp -> exp TO exp .) ]
  ! [               [ reduce using rule 37 (exp -> exp TO exp .) ]
  ! CMP             [ reduce using rule 37 (exp -> exp TO exp .) ]
  ! IN              [ shift and go to state 35 ]


state 81

    (47) exp -> exp IN it .

    ,               reduce using rule 47 (exp -> exp IN it .)
    +               reduce using rule 47 (exp -> exp IN it .)
    -               reduce using rule 47 (exp -> exp IN it .)
    *               reduce using rule 47 (exp -> exp IN it .)
    DIV             reduce using rule 47 (exp -> exp IN it .)
    MOD             reduce using rule 47 (exp -> exp IN it .)
    POW             reduce using rule 47 (exp -> exp IN it .)
    OR              reduce using rule 47 (exp -> exp IN it .)
    XOR             reduce using rule 47 (exp -> exp IN it .)
    AND             reduce using rule 47 (exp -> exp IN it .)
    TO              reduce using rule 47 (exp -> exp IN it .)
    IN              reduce using rule 47 (exp -> exp IN it .)
    [               reduce using rule 47 (exp -> exp IN it .)
    CMP             reduce using rule 47 (exp -> exp IN it .)
    $end            reduce using rule 47 (exp -> exp IN it .)
    )               reduce using rule 47 (exp -> exp IN it .)
    ;               reduce using rule 47 (exp -> exp IN it .)
    }               reduce using rule 47 (exp -> exp IN it .)
    :               reduce using rule 47 (exp -> exp IN it .)
    ]               reduce using rule 47 (exp -> exp IN it .)
    END             reduce using rule 47 (exp -> exp IN it .)
    ELSE            reduce using rule 47 (exp -> exp IN it .)


state 82

    (6) agt -> exp [ exp . ]
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    ]               shift and go to state 116
    ,               shift and go to state 24
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    DIV             shift and go to state 28
    MOD             shift and go to state 29
    POW             shift and go to state 30
    OR              shift and go to state 31
    XOR             shift and go to state 32
    AND             shift and go to state 33
    TO              shift and go to state 34
    IN              shift and go to state 35
    [               shift and go to state 36
    CMP             shift and go to state 37


state 83

    (28) cmp -> exp CMP exp .
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    CMP             reduce using rule 28 (cmp -> exp CMP exp .)
    ,               reduce using rule 28 (cmp -> exp CMP exp .)
    OR              reduce using rule 28 (cmp -> exp CMP exp .)
    XOR             reduce using rule 28 (cmp -> exp CMP exp .)
    AND             reduce using rule 28 (cmp -> exp CMP exp .)
    TO              reduce using rule 28 (cmp -> exp CMP exp .)
    IN              reduce using rule 28 (cmp -> exp CMP exp .)
    $end            reduce using rule 28 (cmp -> exp CMP exp .)
    )               reduce using rule 28 (cmp -> exp CMP exp .)
    ;               reduce using rule 28 (cmp -> exp CMP exp .)
    }               reduce using rule 28 (cmp -> exp CMP exp .)
    :               reduce using rule 28 (cmp -> exp CMP exp .)
    ]               reduce using rule 28 (cmp -> exp CMP exp .)
    END             reduce using rule 28 (cmp -> exp CMP exp .)
    ELSE            reduce using rule 28 (cmp -> exp CMP exp .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    DIV             shift and go to state 28
    MOD             shift and go to state 29
    POW             shift and go to state 30
    [               shift and go to state 36

  ! +               [ reduce using rule 28 (cmp -> exp CMP exp .) ]
  ! -               [ reduce using rule 28 (cmp -> exp CMP exp .) ]
  ! *               [ reduce using rule 28 (cmp -> exp CMP exp .) ]
  ! DIV             [ reduce using rule 28 (cmp -> exp CMP exp .) ]
  ! MOD             [ reduce using rule 28 (cmp -> exp CMP exp .) ]
  ! POW             [ reduce using rule 28 (cmp -> exp CMP exp .) ]
  ! [               [ reduce using rule 28 (cmp -> exp CMP exp .) ]
  ! ,               [ shift and go to state 24 ]
  ! OR              [ shift and go to state 31 ]
  ! XOR             [ shift and go to state 32 ]
  ! AND             [ shift and go to state 33 ]
  ! TO              [ shift and go to state 34 ]
  ! IN              [ shift and go to state 35 ]
  ! CMP             [ shift and go to state 37 ]


state 84

    (2) arr -> arr , exp .
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    ,               reduce using rule 2 (arr -> arr , exp .)
    TO              reduce using rule 2 (arr -> arr , exp .)
    IN              reduce using rule 2 (arr -> arr , exp .)
    $end            reduce using rule 2 (arr -> arr , exp .)
    )               reduce using rule 2 (arr -> arr , exp .)
    ;               reduce using rule 2 (arr -> arr , exp .)
    }               reduce using rule 2 (arr -> arr , exp .)
    :               reduce using rule 2 (arr -> arr , exp .)
    ]               reduce using rule 2 (arr -> arr , exp .)
    END             reduce using rule 2 (arr -> arr , exp .)
    ELSE            reduce using rule 2 (arr -> arr , exp .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    DIV             shift and go to state 28
    MOD             shift and go to state 29
    POW             shift and go to state 30
    OR              shift and go to state 31
    XOR             shift and go to state 32
    AND             shift and go to state 33
    [               shift and go to state 36
    CMP             shift and go to state 37

  ! +               [ reduce using rule 2 (arr -> arr , exp .) ]
  ! -               [ reduce using rule 2 (arr -> arr , exp .) ]
  ! *               [ reduce using rule 2 (arr -> arr , exp .) ]
  ! DIV             [ reduce using rule 2 (arr -> arr , exp .) ]
  ! MOD             [ reduce using rule 2 (arr -> arr , exp .) ]
  ! POW             [ reduce using rule 2 (arr -> arr , exp .) ]
  ! OR              [ reduce using rule 2 (arr -> arr , exp .) ]
  ! XOR             [ reduce using rule 2 (arr -> arr , exp .) ]
  ! AND             [ reduce using rule 2 (arr -> arr , exp .) ]
  ! [               [ reduce using rule 2 (arr -> arr , exp .) ]
  ! CMP             [ reduce using rule 2 (arr -> arr , exp .) ]
  ! ,               [ shift and go to state 24 ]
  ! TO              [ shift and go to state 34 ]
  ! IN              [ shift and go to state 35 ]


state 85

    (40) exp -> ( exp ) .

    ,               reduce using rule 40 (exp -> ( exp ) .)
    +               reduce using rule 40 (exp -> ( exp ) .)
    -               reduce using rule 40 (exp -> ( exp ) .)
    *               reduce using rule 40 (exp -> ( exp ) .)
    DIV             reduce using rule 40 (exp -> ( exp ) .)
    MOD             reduce using rule 40 (exp -> ( exp ) .)
    POW             reduce using rule 40 (exp -> ( exp ) .)
    OR              reduce using rule 40 (exp -> ( exp ) .)
    XOR             reduce using rule 40 (exp -> ( exp ) .)
    AND             reduce using rule 40 (exp -> ( exp ) .)
    TO              reduce using rule 40 (exp -> ( exp ) .)
    IN              reduce using rule 40 (exp -> ( exp ) .)
    [               reduce using rule 40 (exp -> ( exp ) .)
    CMP             reduce using rule 40 (exp -> ( exp ) .)
    $end            reduce using rule 40 (exp -> ( exp ) .)
    )               reduce using rule 40 (exp -> ( exp ) .)
    ;               reduce using rule 40 (exp -> ( exp ) .)
    }               reduce using rule 40 (exp -> ( exp ) .)
    :               reduce using rule 40 (exp -> ( exp ) .)
    ]               reduce using rule 40 (exp -> ( exp ) .)
    END             reduce using rule 40 (exp -> ( exp ) .)
    ELSE            reduce using rule 40 (exp -> ( exp ) .)


state 86

    (8) exp -> ID + ASG . exp
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

    exp                            shift and go to state 117
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    ifc                            shift and go to state 9
    it                             shift and go to state 12

state 87

    (48) exp -> ID + exp .
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    ,               reduce using rule 48 (exp -> ID + exp .)
    +               reduce using rule 48 (exp -> ID + exp .)
    -               reduce using rule 48 (exp -> ID + exp .)
    OR              reduce using rule 48 (exp -> ID + exp .)
    XOR             reduce using rule 48 (exp -> ID + exp .)
    AND             reduce using rule 48 (exp -> ID + exp .)
    TO              reduce using rule 48 (exp -> ID + exp .)
    IN              reduce using rule 48 (exp -> ID + exp .)
    CMP             reduce using rule 48 (exp -> ID + exp .)
    $end            reduce using rule 48 (exp -> ID + exp .)
    )               reduce using rule 48 (exp -> ID + exp .)
    ;               reduce using rule 48 (exp -> ID + exp .)
    }               reduce using rule 48 (exp -> ID + exp .)
    :               reduce using rule 48 (exp -> ID + exp .)
    ]               reduce using rule 48 (exp -> ID + exp .)
    END             reduce using rule 48 (exp -> ID + exp .)
    ELSE            reduce using rule 48 (exp -> ID + exp .)
    *               shift and go to state 27
    DIV             shift and go to state 28
    MOD             shift and go to state 29
    POW             shift and go to state 30
    [               shift and go to state 36

  ! *               [ reduce using rule 48 (exp -> ID + exp .) ]
  ! DIV             [ reduce using rule 48 (exp -> ID + exp .) ]
  ! MOD             [ reduce using rule 48 (exp -> ID + exp .) ]
  ! POW             [ reduce using rule 48 (exp -> ID + exp .) ]
  ! [               [ reduce using rule 48 (exp -> ID + exp .) ]
  ! ,               [ shift and go to state 24 ]
  ! +               [ shift and go to state 25 ]
  ! -               [ shift and go to state 26 ]
  ! OR              [ shift and go to state 31 ]
  ! XOR             [ shift and go to state 32 ]
  ! AND             [ shift and go to state 33 ]
  ! TO              [ shift and go to state 34 ]
  ! IN              [ shift and go to state 35 ]
  ! CMP             [ shift and go to state 37 ]


state 88

    (18) exp -> ID ASG exp .
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    IN              reduce using rule 18 (exp -> ID ASG exp .)
    $end            reduce using rule 18 (exp -> ID ASG exp .)
    )               reduce using rule 18 (exp -> ID ASG exp .)
    ;               reduce using rule 18 (exp -> ID ASG exp .)
    }               reduce using rule 18 (exp -> ID ASG exp .)
    :               reduce using rule 18 (exp -> ID ASG exp .)
    ]               reduce using rule 18 (exp -> ID ASG exp .)
    END             reduce using rule 18 (exp -> ID ASG exp .)
    ELSE            reduce using rule 18 (exp -> ID ASG exp .)
    ,               shift and go to state 24
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    DIV             shift and go to state 28
    MOD             shift and go to state 29
    POW             shift and go to state 30
    OR              shift and go to state 31
    XOR             shift and go to state 32
    AND             shift and go to state 33
    TO              shift and go to state 34
    [               shift and go to state 36
    CMP             shift and go to state 37

  ! ,               [ reduce using rule 18 (exp -> ID ASG exp .) ]
  ! +               [ reduce using rule 18 (exp -> ID ASG exp .) ]
  ! -               [ reduce using rule 18 (exp -> ID ASG exp .) ]
  ! *               [ reduce using rule 18 (exp -> ID ASG exp .) ]
  ! DIV             [ reduce using rule 18 (exp -> ID ASG exp .) ]
  ! MOD             [ reduce using rule 18 (exp -> ID ASG exp .) ]
  ! POW             [ reduce using rule 18 (exp -> ID ASG exp .) ]
  ! OR              [ reduce using rule 18 (exp -> ID ASG exp .) ]
  ! XOR             [ reduce using rule 18 (exp -> ID ASG exp .) ]
  ! AND             [ reduce using rule 18 (exp -> ID ASG exp .) ]
  ! TO              [ reduce using rule 18 (exp -> ID ASG exp .) ]
  ! [               [ reduce using rule 18 (exp -> ID ASG exp .) ]
  ! CMP             [ reduce using rule 18 (exp -> ID ASG exp .) ]
  ! IN              [ shift and go to state 35 ]


state 89

    (9) exp -> ID - ASG . exp
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

    exp                            shift and go to state 118
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    ifc                            shift and go to state 9
    it                             shift and go to state 12

state 90

    (49) exp -> ID - exp .
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    ,               reduce using rule 49 (exp -> ID - exp .)
    +               reduce using rule 49 (exp -> ID - exp .)
    -               reduce using rule 49 (exp -> ID - exp .)
    OR              reduce using rule 49 (exp -> ID - exp .)
    XOR             reduce using rule 49 (exp -> ID - exp .)
    AND             reduce using rule 49 (exp -> ID - exp .)
    TO              reduce using rule 49 (exp -> ID - exp .)
    IN              reduce using rule 49 (exp -> ID - exp .)
    CMP             reduce using rule 49 (exp -> ID - exp .)
    $end            reduce using rule 49 (exp -> ID - exp .)
    )               reduce using rule 49 (exp -> ID - exp .)
    ;               reduce using rule 49 (exp -> ID - exp .)
    }               reduce using rule 49 (exp -> ID - exp .)
    :               reduce using rule 49 (exp -> ID - exp .)
    ]               reduce using rule 49 (exp -> ID - exp .)
    END             reduce using rule 49 (exp -> ID - exp .)
    ELSE            reduce using rule 49 (exp -> ID - exp .)
    *               shift and go to state 27
    DIV             shift and go to state 28
    MOD             shift and go to state 29
    POW             shift and go to state 30
    [               shift and go to state 36

  ! *               [ reduce using rule 49 (exp -> ID - exp .) ]
  ! DIV             [ reduce using rule 49 (exp -> ID - exp .) ]
  ! MOD             [ reduce using rule 49 (exp -> ID - exp .) ]
  ! POW             [ reduce using rule 49 (exp -> ID - exp .) ]
  ! [               [ reduce using rule 49 (exp -> ID - exp .) ]
  ! ,               [ shift and go to state 24 ]
  ! +               [ shift and go to state 25 ]
  ! -               [ shift and go to state 26 ]
  ! OR              [ shift and go to state 31 ]
  ! XOR             [ shift and go to state 32 ]
  ! AND             [ shift and go to state 33 ]
  ! TO              [ shift and go to state 34 ]
  ! IN              [ shift and go to state 35 ]
  ! CMP             [ shift and go to state 37 ]


state 91

    (11) exp -> ID * ASG . exp
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

    exp                            shift and go to state 119
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    ifc                            shift and go to state 9
    it                             shift and go to state 12

state 92

    (51) exp -> ID * exp .
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    ,               reduce using rule 51 (exp -> ID * exp .)
    +               reduce using rule 51 (exp -> ID * exp .)
    -               reduce using rule 51 (exp -> ID * exp .)
    *               reduce using rule 51 (exp -> ID * exp .)
    DIV             reduce using rule 51 (exp -> ID * exp .)
    MOD             reduce using rule 51 (exp -> ID * exp .)
    OR              reduce using rule 51 (exp -> ID * exp .)
    XOR             reduce using rule 51 (exp -> ID * exp .)
    AND             reduce using rule 51 (exp -> ID * exp .)
    TO              reduce using rule 51 (exp -> ID * exp .)
    IN              reduce using rule 51 (exp -> ID * exp .)
    CMP             reduce using rule 51 (exp -> ID * exp .)
    $end            reduce using rule 51 (exp -> ID * exp .)
    )               reduce using rule 51 (exp -> ID * exp .)
    ;               reduce using rule 51 (exp -> ID * exp .)
    }               reduce using rule 51 (exp -> ID * exp .)
    :               reduce using rule 51 (exp -> ID * exp .)
    ]               reduce using rule 51 (exp -> ID * exp .)
    END             reduce using rule 51 (exp -> ID * exp .)
    ELSE            reduce using rule 51 (exp -> ID * exp .)
    POW             shift and go to state 30
    [               shift and go to state 36

  ! POW             [ reduce using rule 51 (exp -> ID * exp .) ]
  ! [               [ reduce using rule 51 (exp -> ID * exp .) ]
  ! ,               [ shift and go to state 24 ]
  ! +               [ shift and go to state 25 ]
  ! -               [ shift and go to state 26 ]
  ! *               [ shift and go to state 27 ]
  ! DIV             [ shift and go to state 28 ]
  ! MOD             [ shift and go to state 29 ]
  ! OR              [ shift and go to state 31 ]
  ! XOR             [ shift and go to state 32 ]
  ! AND             [ shift and go to state 33 ]
  ! TO              [ shift and go to state 34 ]
  ! IN              [ shift and go to state 35 ]
  ! CMP             [ shift and go to state 37 ]


state 93

    (12) exp -> ID DIV ASG . exp
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

    exp                            shift and go to state 120
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    ifc                            shift and go to state 9
    it                             shift and go to state 12

state 94

    (52) exp -> ID DIV exp .
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    ,               reduce using rule 52 (exp -> ID DIV exp .)
    +               reduce using rule 52 (exp -> ID DIV exp .)
    -               reduce using rule 52 (exp -> ID DIV exp .)
    *               reduce using rule 52 (exp -> ID DIV exp .)
    DIV             reduce using rule 52 (exp -> ID DIV exp .)
    MOD             reduce using rule 52 (exp -> ID DIV exp .)
    OR              reduce using rule 52 (exp -> ID DIV exp .)
    XOR             reduce using rule 52 (exp -> ID DIV exp .)
    AND             reduce using rule 52 (exp -> ID DIV exp .)
    TO              reduce using rule 52 (exp -> ID DIV exp .)
    IN              reduce using rule 52 (exp -> ID DIV exp .)
    CMP             reduce using rule 52 (exp -> ID DIV exp .)
    $end            reduce using rule 52 (exp -> ID DIV exp .)
    )               reduce using rule 52 (exp -> ID DIV exp .)
    ;               reduce using rule 52 (exp -> ID DIV exp .)
    }               reduce using rule 52 (exp -> ID DIV exp .)
    :               reduce using rule 52 (exp -> ID DIV exp .)
    ]               reduce using rule 52 (exp -> ID DIV exp .)
    END             reduce using rule 52 (exp -> ID DIV exp .)
    ELSE            reduce using rule 52 (exp -> ID DIV exp .)
    POW             shift and go to state 30
    [               shift and go to state 36

  ! POW             [ reduce using rule 52 (exp -> ID DIV exp .) ]
  ! [               [ reduce using rule 52 (exp -> ID DIV exp .) ]
  ! ,               [ shift and go to state 24 ]
  ! +               [ shift and go to state 25 ]
  ! -               [ shift and go to state 26 ]
  ! *               [ shift and go to state 27 ]
  ! DIV             [ shift and go to state 28 ]
  ! MOD             [ shift and go to state 29 ]
  ! OR              [ shift and go to state 31 ]
  ! XOR             [ shift and go to state 32 ]
  ! AND             [ shift and go to state 33 ]
  ! TO              [ shift and go to state 34 ]
  ! IN              [ shift and go to state 35 ]
  ! CMP             [ shift and go to state 37 ]


state 95

    (13) exp -> ID MOD ASG . exp
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

    exp                            shift and go to state 121
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    ifc                            shift and go to state 9
    it                             shift and go to state 12

state 96

    (53) exp -> ID MOD exp .
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    ,               reduce using rule 53 (exp -> ID MOD exp .)
    +               reduce using rule 53 (exp -> ID MOD exp .)
    -               reduce using rule 53 (exp -> ID MOD exp .)
    *               reduce using rule 53 (exp -> ID MOD exp .)
    DIV             reduce using rule 53 (exp -> ID MOD exp .)
    MOD             reduce using rule 53 (exp -> ID MOD exp .)
    OR              reduce using rule 53 (exp -> ID MOD exp .)
    XOR             reduce using rule 53 (exp -> ID MOD exp .)
    AND             reduce using rule 53 (exp -> ID MOD exp .)
    TO              reduce using rule 53 (exp -> ID MOD exp .)
    IN              reduce using rule 53 (exp -> ID MOD exp .)
    CMP             reduce using rule 53 (exp -> ID MOD exp .)
    $end            reduce using rule 53 (exp -> ID MOD exp .)
    )               reduce using rule 53 (exp -> ID MOD exp .)
    ;               reduce using rule 53 (exp -> ID MOD exp .)
    }               reduce using rule 53 (exp -> ID MOD exp .)
    :               reduce using rule 53 (exp -> ID MOD exp .)
    ]               reduce using rule 53 (exp -> ID MOD exp .)
    END             reduce using rule 53 (exp -> ID MOD exp .)
    ELSE            reduce using rule 53 (exp -> ID MOD exp .)
    POW             shift and go to state 30
    [               shift and go to state 36

  ! POW             [ reduce using rule 53 (exp -> ID MOD exp .) ]
  ! [               [ reduce using rule 53 (exp -> ID MOD exp .) ]
  ! ,               [ shift and go to state 24 ]
  ! +               [ shift and go to state 25 ]
  ! -               [ shift and go to state 26 ]
  ! *               [ shift and go to state 27 ]
  ! DIV             [ shift and go to state 28 ]
  ! MOD             [ shift and go to state 29 ]
  ! OR              [ shift and go to state 31 ]
  ! XOR             [ shift and go to state 32 ]
  ! AND             [ shift and go to state 33 ]
  ! TO              [ shift and go to state 34 ]
  ! IN              [ shift and go to state 35 ]
  ! CMP             [ shift and go to state 37 ]


state 97

    (14) exp -> ID POW ASG . exp
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

    exp                            shift and go to state 122
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    ifc                            shift and go to state 9
    it                             shift and go to state 12

state 98

    (54) exp -> ID POW exp .
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    ,               reduce using rule 54 (exp -> ID POW exp .)
    +               reduce using rule 54 (exp -> ID POW exp .)
    -               reduce using rule 54 (exp -> ID POW exp .)
    *               reduce using rule 54 (exp -> ID POW exp .)
    DIV             reduce using rule 54 (exp -> ID POW exp .)
    MOD             reduce using rule 54 (exp -> ID POW exp .)
    OR              reduce using rule 54 (exp -> ID POW exp .)
    XOR             reduce using rule 54 (exp -> ID POW exp .)
    AND             reduce using rule 54 (exp -> ID POW exp .)
    TO              reduce using rule 54 (exp -> ID POW exp .)
    IN              reduce using rule 54 (exp -> ID POW exp .)
    CMP             reduce using rule 54 (exp -> ID POW exp .)
    $end            reduce using rule 54 (exp -> ID POW exp .)
    )               reduce using rule 54 (exp -> ID POW exp .)
    ;               reduce using rule 54 (exp -> ID POW exp .)
    }               reduce using rule 54 (exp -> ID POW exp .)
    :               reduce using rule 54 (exp -> ID POW exp .)
    ]               reduce using rule 54 (exp -> ID POW exp .)
    END             reduce using rule 54 (exp -> ID POW exp .)
    ELSE            reduce using rule 54 (exp -> ID POW exp .)
    POW             shift and go to state 30
    [               shift and go to state 36

  ! POW             [ reduce using rule 54 (exp -> ID POW exp .) ]
  ! [               [ reduce using rule 54 (exp -> ID POW exp .) ]
  ! ,               [ shift and go to state 24 ]
  ! +               [ shift and go to state 25 ]
  ! -               [ shift and go to state 26 ]
  ! *               [ shift and go to state 27 ]
  ! DIV             [ shift and go to state 28 ]
  ! MOD             [ shift and go to state 29 ]
  ! OR              [ shift and go to state 31 ]
  ! XOR             [ shift and go to state 32 ]
  ! AND             [ shift and go to state 33 ]
  ! TO              [ shift and go to state 34 ]
  ! IN              [ shift and go to state 35 ]
  ! CMP             [ shift and go to state 37 ]


state 99

    (15) exp -> ID OR ASG . exp
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

    exp                            shift and go to state 123
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    ifc                            shift and go to state 9
    it                             shift and go to state 12

state 100

    (55) exp -> ID OR exp .
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    ,               reduce using rule 55 (exp -> ID OR exp .)
    OR              reduce using rule 55 (exp -> ID OR exp .)
    TO              reduce using rule 55 (exp -> ID OR exp .)
    IN              reduce using rule 55 (exp -> ID OR exp .)
    $end            reduce using rule 55 (exp -> ID OR exp .)
    )               reduce using rule 55 (exp -> ID OR exp .)
    ;               reduce using rule 55 (exp -> ID OR exp .)
    }               reduce using rule 55 (exp -> ID OR exp .)
    :               reduce using rule 55 (exp -> ID OR exp .)
    ]               reduce using rule 55 (exp -> ID OR exp .)
    END             reduce using rule 55 (exp -> ID OR exp .)
    ELSE            reduce using rule 55 (exp -> ID OR exp .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    DIV             shift and go to state 28
    MOD             shift and go to state 29
    POW             shift and go to state 30
    XOR             shift and go to state 32
    AND             shift and go to state 33
    [               shift and go to state 36
    CMP             shift and go to state 37

  ! +               [ reduce using rule 55 (exp -> ID OR exp .) ]
  ! -               [ reduce using rule 55 (exp -> ID OR exp .) ]
  ! *               [ reduce using rule 55 (exp -> ID OR exp .) ]
  ! DIV             [ reduce using rule 55 (exp -> ID OR exp .) ]
  ! MOD             [ reduce using rule 55 (exp -> ID OR exp .) ]
  ! POW             [ reduce using rule 55 (exp -> ID OR exp .) ]
  ! XOR             [ reduce using rule 55 (exp -> ID OR exp .) ]
  ! AND             [ reduce using rule 55 (exp -> ID OR exp .) ]
  ! [               [ reduce using rule 55 (exp -> ID OR exp .) ]
  ! CMP             [ reduce using rule 55 (exp -> ID OR exp .) ]
  ! ,               [ shift and go to state 24 ]
  ! OR              [ shift and go to state 31 ]
  ! TO              [ shift and go to state 34 ]
  ! IN              [ shift and go to state 35 ]


state 101

    (16) exp -> ID XOR ASG . exp
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

    exp                            shift and go to state 124
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    ifc                            shift and go to state 9
    it                             shift and go to state 12

state 102

    (56) exp -> ID XOR exp .
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    ,               reduce using rule 56 (exp -> ID XOR exp .)
    OR              reduce using rule 56 (exp -> ID XOR exp .)
    XOR             reduce using rule 56 (exp -> ID XOR exp .)
    TO              reduce using rule 56 (exp -> ID XOR exp .)
    IN              reduce using rule 56 (exp -> ID XOR exp .)
    $end            reduce using rule 56 (exp -> ID XOR exp .)
    )               reduce using rule 56 (exp -> ID XOR exp .)
    ;               reduce using rule 56 (exp -> ID XOR exp .)
    }               reduce using rule 56 (exp -> ID XOR exp .)
    :               reduce using rule 56 (exp -> ID XOR exp .)
    ]               reduce using rule 56 (exp -> ID XOR exp .)
    END             reduce using rule 56 (exp -> ID XOR exp .)
    ELSE            reduce using rule 56 (exp -> ID XOR exp .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    DIV             shift and go to state 28
    MOD             shift and go to state 29
    POW             shift and go to state 30
    AND             shift and go to state 33
    [               shift and go to state 36
    CMP             shift and go to state 37

  ! +               [ reduce using rule 56 (exp -> ID XOR exp .) ]
  ! -               [ reduce using rule 56 (exp -> ID XOR exp .) ]
  ! *               [ reduce using rule 56 (exp -> ID XOR exp .) ]
  ! DIV             [ reduce using rule 56 (exp -> ID XOR exp .) ]
  ! MOD             [ reduce using rule 56 (exp -> ID XOR exp .) ]
  ! POW             [ reduce using rule 56 (exp -> ID XOR exp .) ]
  ! AND             [ reduce using rule 56 (exp -> ID XOR exp .) ]
  ! [               [ reduce using rule 56 (exp -> ID XOR exp .) ]
  ! CMP             [ reduce using rule 56 (exp -> ID XOR exp .) ]
  ! ,               [ shift and go to state 24 ]
  ! OR              [ shift and go to state 31 ]
  ! XOR             [ shift and go to state 32 ]
  ! TO              [ shift and go to state 34 ]
  ! IN              [ shift and go to state 35 ]


state 103

    (17) exp -> ID AND ASG . exp
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

    exp                            shift and go to state 125
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    ifc                            shift and go to state 9
    it                             shift and go to state 12

state 104

    (57) exp -> ID AND exp .
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    ,               reduce using rule 57 (exp -> ID AND exp .)
    OR              reduce using rule 57 (exp -> ID AND exp .)
    XOR             reduce using rule 57 (exp -> ID AND exp .)
    AND             reduce using rule 57 (exp -> ID AND exp .)
    TO              reduce using rule 57 (exp -> ID AND exp .)
    IN              reduce using rule 57 (exp -> ID AND exp .)
    $end            reduce using rule 57 (exp -> ID AND exp .)
    )               reduce using rule 57 (exp -> ID AND exp .)
    ;               reduce using rule 57 (exp -> ID AND exp .)
    }               reduce using rule 57 (exp -> ID AND exp .)
    :               reduce using rule 57 (exp -> ID AND exp .)
    ]               reduce using rule 57 (exp -> ID AND exp .)
    END             reduce using rule 57 (exp -> ID AND exp .)
    ELSE            reduce using rule 57 (exp -> ID AND exp .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    DIV             shift and go to state 28
    MOD             shift and go to state 29
    POW             shift and go to state 30
    [               shift and go to state 36
    CMP             shift and go to state 37

  ! +               [ reduce using rule 57 (exp -> ID AND exp .) ]
  ! -               [ reduce using rule 57 (exp -> ID AND exp .) ]
  ! *               [ reduce using rule 57 (exp -> ID AND exp .) ]
  ! DIV             [ reduce using rule 57 (exp -> ID AND exp .) ]
  ! MOD             [ reduce using rule 57 (exp -> ID AND exp .) ]
  ! POW             [ reduce using rule 57 (exp -> ID AND exp .) ]
  ! [               [ reduce using rule 57 (exp -> ID AND exp .) ]
  ! CMP             [ reduce using rule 57 (exp -> ID AND exp .) ]
  ! ,               [ shift and go to state 24 ]
  ! OR              [ shift and go to state 31 ]
  ! XOR             [ shift and go to state 32 ]
  ! AND             [ shift and go to state 33 ]
  ! TO              [ shift and go to state 34 ]
  ! IN              [ shift and go to state 35 ]


state 105

    (38) exp -> ID ( exp . )
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    )               shift and go to state 126
    ,               shift and go to state 24
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    DIV             shift and go to state 28
    MOD             shift and go to state 29
    POW             shift and go to state 30
    OR              shift and go to state 31
    XOR             shift and go to state 32
    AND             shift and go to state 33
    TO              shift and go to state 34
    IN              shift and go to state 35
    [               shift and go to state 36
    CMP             shift and go to state 37


state 106

    (39) exp -> ID ( ) .

    ,               reduce using rule 39 (exp -> ID ( ) .)
    +               reduce using rule 39 (exp -> ID ( ) .)
    -               reduce using rule 39 (exp -> ID ( ) .)
    *               reduce using rule 39 (exp -> ID ( ) .)
    DIV             reduce using rule 39 (exp -> ID ( ) .)
    MOD             reduce using rule 39 (exp -> ID ( ) .)
    POW             reduce using rule 39 (exp -> ID ( ) .)
    OR              reduce using rule 39 (exp -> ID ( ) .)
    XOR             reduce using rule 39 (exp -> ID ( ) .)
    AND             reduce using rule 39 (exp -> ID ( ) .)
    TO              reduce using rule 39 (exp -> ID ( ) .)
    IN              reduce using rule 39 (exp -> ID ( ) .)
    [               reduce using rule 39 (exp -> ID ( ) .)
    CMP             reduce using rule 39 (exp -> ID ( ) .)
    $end            reduce using rule 39 (exp -> ID ( ) .)
    )               reduce using rule 39 (exp -> ID ( ) .)
    ;               reduce using rule 39 (exp -> ID ( ) .)
    }               reduce using rule 39 (exp -> ID ( ) .)
    :               reduce using rule 39 (exp -> ID ( ) .)
    ]               reduce using rule 39 (exp -> ID ( ) .)
    END             reduce using rule 39 (exp -> ID ( ) .)
    ELSE            reduce using rule 39 (exp -> ID ( ) .)


state 107

    (29) cmp -> cmp CMP exp .
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    CMP             reduce using rule 29 (cmp -> cmp CMP exp .)
    ,               reduce using rule 29 (cmp -> cmp CMP exp .)
    OR              reduce using rule 29 (cmp -> cmp CMP exp .)
    XOR             reduce using rule 29 (cmp -> cmp CMP exp .)
    AND             reduce using rule 29 (cmp -> cmp CMP exp .)
    TO              reduce using rule 29 (cmp -> cmp CMP exp .)
    IN              reduce using rule 29 (cmp -> cmp CMP exp .)
    $end            reduce using rule 29 (cmp -> cmp CMP exp .)
    )               reduce using rule 29 (cmp -> cmp CMP exp .)
    ;               reduce using rule 29 (cmp -> cmp CMP exp .)
    }               reduce using rule 29 (cmp -> cmp CMP exp .)
    :               reduce using rule 29 (cmp -> cmp CMP exp .)
    ]               reduce using rule 29 (cmp -> cmp CMP exp .)
    END             reduce using rule 29 (cmp -> cmp CMP exp .)
    ELSE            reduce using rule 29 (cmp -> cmp CMP exp .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    DIV             shift and go to state 28
    MOD             shift and go to state 29
    POW             shift and go to state 30
    [               shift and go to state 36

  ! +               [ reduce using rule 29 (cmp -> cmp CMP exp .) ]
  ! -               [ reduce using rule 29 (cmp -> cmp CMP exp .) ]
  ! *               [ reduce using rule 29 (cmp -> cmp CMP exp .) ]
  ! DIV             [ reduce using rule 29 (cmp -> cmp CMP exp .) ]
  ! MOD             [ reduce using rule 29 (cmp -> cmp CMP exp .) ]
  ! POW             [ reduce using rule 29 (cmp -> cmp CMP exp .) ]
  ! [               [ reduce using rule 29 (cmp -> cmp CMP exp .) ]
  ! ,               [ shift and go to state 24 ]
  ! OR              [ shift and go to state 31 ]
  ! XOR             [ shift and go to state 32 ]
  ! AND             [ shift and go to state 33 ]
  ! TO              [ shift and go to state 34 ]
  ! IN              [ shift and go to state 35 ]
  ! CMP             [ shift and go to state 37 ]


state 108

    (35) exp -> FOR ID IN . exp : exp END
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

    exp                            shift and go to state 127
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    ifc                            shift and go to state 9
    it                             shift and go to state 12

state 109

    (36) exp -> FOR NUM ID . IN it : exp END

    IN              shift and go to state 128


state 110

    (66) exp -> { seq } .

    ,               reduce using rule 66 (exp -> { seq } .)
    +               reduce using rule 66 (exp -> { seq } .)
    -               reduce using rule 66 (exp -> { seq } .)
    *               reduce using rule 66 (exp -> { seq } .)
    DIV             reduce using rule 66 (exp -> { seq } .)
    MOD             reduce using rule 66 (exp -> { seq } .)
    POW             reduce using rule 66 (exp -> { seq } .)
    OR              reduce using rule 66 (exp -> { seq } .)
    XOR             reduce using rule 66 (exp -> { seq } .)
    AND             reduce using rule 66 (exp -> { seq } .)
    TO              reduce using rule 66 (exp -> { seq } .)
    IN              reduce using rule 66 (exp -> { seq } .)
    [               reduce using rule 66 (exp -> { seq } .)
    CMP             reduce using rule 66 (exp -> { seq } .)
    $end            reduce using rule 66 (exp -> { seq } .)
    )               reduce using rule 66 (exp -> { seq } .)
    ;               reduce using rule 66 (exp -> { seq } .)
    }               reduce using rule 66 (exp -> { seq } .)
    :               reduce using rule 66 (exp -> { seq } .)
    ]               reduce using rule 66 (exp -> { seq } .)
    END             reduce using rule 66 (exp -> { seq } .)
    ELSE            reduce using rule 66 (exp -> { seq } .)


state 111

    (63) seq -> exp ; . seq
    (64) seq -> exp ; .
    (63) seq -> . exp ; seq
    (64) seq -> . exp ;
    (65) seq -> . exp
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    }               reduce using rule 64 (seq -> exp ; .)
    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

    exp                            shift and go to state 64
    seq                            shift and go to state 129
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    ifc                            shift and go to state 9
    it                             shift and go to state 12

state 112

    (70) exp -> WHILE exp : . exp END
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

    exp                            shift and go to state 130
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    ifc                            shift and go to state 9
    it                             shift and go to state 12

state 113

    (42) it -> [ exp , . exp ]
    (44) it -> [ exp , . exp [
    (5) exp -> exp , .
    (1) arr -> exp , . exp
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    ,               reduce using rule 5 (exp -> exp , .)
    *               reduce using rule 5 (exp -> exp , .)
    DIV             reduce using rule 5 (exp -> exp , .)
    MOD             reduce using rule 5 (exp -> exp , .)
    POW             reduce using rule 5 (exp -> exp , .)
    OR              reduce using rule 5 (exp -> exp , .)
    XOR             reduce using rule 5 (exp -> exp , .)
    AND             reduce using rule 5 (exp -> exp , .)
    TO              reduce using rule 5 (exp -> exp , .)
    IN              reduce using rule 5 (exp -> exp , .)
    CMP             reduce using rule 5 (exp -> exp , .)
    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

  ! +               [ reduce using rule 5 (exp -> exp , .) ]
  ! -               [ reduce using rule 5 (exp -> exp , .) ]
  ! [               [ reduce using rule 5 (exp -> exp , .) ]

    exp                            shift and go to state 131
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    ifc                            shift and go to state 9
    it                             shift and go to state 12

state 114

    (43) it -> ] exp , . exp ]
    (45) it -> ] exp , . exp [
    (5) exp -> exp , .
    (1) arr -> exp , . exp
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    ,               reduce using rule 5 (exp -> exp , .)
    *               reduce using rule 5 (exp -> exp , .)
    DIV             reduce using rule 5 (exp -> exp , .)
    MOD             reduce using rule 5 (exp -> exp , .)
    POW             reduce using rule 5 (exp -> exp , .)
    OR              reduce using rule 5 (exp -> exp , .)
    XOR             reduce using rule 5 (exp -> exp , .)
    AND             reduce using rule 5 (exp -> exp , .)
    TO              reduce using rule 5 (exp -> exp , .)
    IN              reduce using rule 5 (exp -> exp , .)
    CMP             reduce using rule 5 (exp -> exp , .)
    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

  ! +               [ reduce using rule 5 (exp -> exp , .) ]
  ! -               [ reduce using rule 5 (exp -> exp , .) ]
  ! [               [ reduce using rule 5 (exp -> exp , .) ]

    exp                            shift and go to state 132
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    ifc                            shift and go to state 9
    it                             shift and go to state 12

state 115

    (31) ifc -> IF exp : . exp
    (32) ifc -> IF exp : . exp ELSE exp
    (33) ifc -> IF exp : . exp ELSE ifc
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

    exp                            shift and go to state 133
    ifc                            shift and go to state 9
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    it                             shift and go to state 12

state 116

    (6) agt -> exp [ exp ] .

    ,               reduce using rule 6 (agt -> exp [ exp ] .)
    +               reduce using rule 6 (agt -> exp [ exp ] .)
    -               reduce using rule 6 (agt -> exp [ exp ] .)
    *               reduce using rule 6 (agt -> exp [ exp ] .)
    DIV             reduce using rule 6 (agt -> exp [ exp ] .)
    MOD             reduce using rule 6 (agt -> exp [ exp ] .)
    POW             reduce using rule 6 (agt -> exp [ exp ] .)
    OR              reduce using rule 6 (agt -> exp [ exp ] .)
    XOR             reduce using rule 6 (agt -> exp [ exp ] .)
    AND             reduce using rule 6 (agt -> exp [ exp ] .)
    TO              reduce using rule 6 (agt -> exp [ exp ] .)
    IN              reduce using rule 6 (agt -> exp [ exp ] .)
    [               reduce using rule 6 (agt -> exp [ exp ] .)
    CMP             reduce using rule 6 (agt -> exp [ exp ] .)
    $end            reduce using rule 6 (agt -> exp [ exp ] .)
    )               reduce using rule 6 (agt -> exp [ exp ] .)
    ;               reduce using rule 6 (agt -> exp [ exp ] .)
    }               reduce using rule 6 (agt -> exp [ exp ] .)
    :               reduce using rule 6 (agt -> exp [ exp ] .)
    ]               reduce using rule 6 (agt -> exp [ exp ] .)
    END             reduce using rule 6 (agt -> exp [ exp ] .)
    ELSE            reduce using rule 6 (agt -> exp [ exp ] .)


state 117

    (8) exp -> ID + ASG exp .
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    IN              reduce using rule 8 (exp -> ID + ASG exp .)
    $end            reduce using rule 8 (exp -> ID + ASG exp .)
    )               reduce using rule 8 (exp -> ID + ASG exp .)
    ;               reduce using rule 8 (exp -> ID + ASG exp .)
    }               reduce using rule 8 (exp -> ID + ASG exp .)
    :               reduce using rule 8 (exp -> ID + ASG exp .)
    ]               reduce using rule 8 (exp -> ID + ASG exp .)
    END             reduce using rule 8 (exp -> ID + ASG exp .)
    ELSE            reduce using rule 8 (exp -> ID + ASG exp .)
    ,               shift and go to state 24
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    DIV             shift and go to state 28
    MOD             shift and go to state 29
    POW             shift and go to state 30
    OR              shift and go to state 31
    XOR             shift and go to state 32
    AND             shift and go to state 33
    TO              shift and go to state 34
    [               shift and go to state 36
    CMP             shift and go to state 37

  ! ,               [ reduce using rule 8 (exp -> ID + ASG exp .) ]
  ! +               [ reduce using rule 8 (exp -> ID + ASG exp .) ]
  ! -               [ reduce using rule 8 (exp -> ID + ASG exp .) ]
  ! *               [ reduce using rule 8 (exp -> ID + ASG exp .) ]
  ! DIV             [ reduce using rule 8 (exp -> ID + ASG exp .) ]
  ! MOD             [ reduce using rule 8 (exp -> ID + ASG exp .) ]
  ! POW             [ reduce using rule 8 (exp -> ID + ASG exp .) ]
  ! OR              [ reduce using rule 8 (exp -> ID + ASG exp .) ]
  ! XOR             [ reduce using rule 8 (exp -> ID + ASG exp .) ]
  ! AND             [ reduce using rule 8 (exp -> ID + ASG exp .) ]
  ! TO              [ reduce using rule 8 (exp -> ID + ASG exp .) ]
  ! [               [ reduce using rule 8 (exp -> ID + ASG exp .) ]
  ! CMP             [ reduce using rule 8 (exp -> ID + ASG exp .) ]
  ! IN              [ shift and go to state 35 ]


state 118

    (9) exp -> ID - ASG exp .
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    IN              reduce using rule 9 (exp -> ID - ASG exp .)
    $end            reduce using rule 9 (exp -> ID - ASG exp .)
    )               reduce using rule 9 (exp -> ID - ASG exp .)
    ;               reduce using rule 9 (exp -> ID - ASG exp .)
    }               reduce using rule 9 (exp -> ID - ASG exp .)
    :               reduce using rule 9 (exp -> ID - ASG exp .)
    ]               reduce using rule 9 (exp -> ID - ASG exp .)
    END             reduce using rule 9 (exp -> ID - ASG exp .)
    ELSE            reduce using rule 9 (exp -> ID - ASG exp .)
    ,               shift and go to state 24
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    DIV             shift and go to state 28
    MOD             shift and go to state 29
    POW             shift and go to state 30
    OR              shift and go to state 31
    XOR             shift and go to state 32
    AND             shift and go to state 33
    TO              shift and go to state 34
    [               shift and go to state 36
    CMP             shift and go to state 37

  ! ,               [ reduce using rule 9 (exp -> ID - ASG exp .) ]
  ! +               [ reduce using rule 9 (exp -> ID - ASG exp .) ]
  ! -               [ reduce using rule 9 (exp -> ID - ASG exp .) ]
  ! *               [ reduce using rule 9 (exp -> ID - ASG exp .) ]
  ! DIV             [ reduce using rule 9 (exp -> ID - ASG exp .) ]
  ! MOD             [ reduce using rule 9 (exp -> ID - ASG exp .) ]
  ! POW             [ reduce using rule 9 (exp -> ID - ASG exp .) ]
  ! OR              [ reduce using rule 9 (exp -> ID - ASG exp .) ]
  ! XOR             [ reduce using rule 9 (exp -> ID - ASG exp .) ]
  ! AND             [ reduce using rule 9 (exp -> ID - ASG exp .) ]
  ! TO              [ reduce using rule 9 (exp -> ID - ASG exp .) ]
  ! [               [ reduce using rule 9 (exp -> ID - ASG exp .) ]
  ! CMP             [ reduce using rule 9 (exp -> ID - ASG exp .) ]
  ! IN              [ shift and go to state 35 ]


state 119

    (11) exp -> ID * ASG exp .
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    IN              reduce using rule 11 (exp -> ID * ASG exp .)
    $end            reduce using rule 11 (exp -> ID * ASG exp .)
    )               reduce using rule 11 (exp -> ID * ASG exp .)
    ;               reduce using rule 11 (exp -> ID * ASG exp .)
    }               reduce using rule 11 (exp -> ID * ASG exp .)
    :               reduce using rule 11 (exp -> ID * ASG exp .)
    ]               reduce using rule 11 (exp -> ID * ASG exp .)
    END             reduce using rule 11 (exp -> ID * ASG exp .)
    ELSE            reduce using rule 11 (exp -> ID * ASG exp .)
    ,               shift and go to state 24
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    DIV             shift and go to state 28
    MOD             shift and go to state 29
    POW             shift and go to state 30
    OR              shift and go to state 31
    XOR             shift and go to state 32
    AND             shift and go to state 33
    TO              shift and go to state 34
    [               shift and go to state 36
    CMP             shift and go to state 37

  ! ,               [ reduce using rule 11 (exp -> ID * ASG exp .) ]
  ! +               [ reduce using rule 11 (exp -> ID * ASG exp .) ]
  ! -               [ reduce using rule 11 (exp -> ID * ASG exp .) ]
  ! *               [ reduce using rule 11 (exp -> ID * ASG exp .) ]
  ! DIV             [ reduce using rule 11 (exp -> ID * ASG exp .) ]
  ! MOD             [ reduce using rule 11 (exp -> ID * ASG exp .) ]
  ! POW             [ reduce using rule 11 (exp -> ID * ASG exp .) ]
  ! OR              [ reduce using rule 11 (exp -> ID * ASG exp .) ]
  ! XOR             [ reduce using rule 11 (exp -> ID * ASG exp .) ]
  ! AND             [ reduce using rule 11 (exp -> ID * ASG exp .) ]
  ! TO              [ reduce using rule 11 (exp -> ID * ASG exp .) ]
  ! [               [ reduce using rule 11 (exp -> ID * ASG exp .) ]
  ! CMP             [ reduce using rule 11 (exp -> ID * ASG exp .) ]
  ! IN              [ shift and go to state 35 ]


state 120

    (12) exp -> ID DIV ASG exp .
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    IN              reduce using rule 12 (exp -> ID DIV ASG exp .)
    $end            reduce using rule 12 (exp -> ID DIV ASG exp .)
    )               reduce using rule 12 (exp -> ID DIV ASG exp .)
    ;               reduce using rule 12 (exp -> ID DIV ASG exp .)
    }               reduce using rule 12 (exp -> ID DIV ASG exp .)
    :               reduce using rule 12 (exp -> ID DIV ASG exp .)
    ]               reduce using rule 12 (exp -> ID DIV ASG exp .)
    END             reduce using rule 12 (exp -> ID DIV ASG exp .)
    ELSE            reduce using rule 12 (exp -> ID DIV ASG exp .)
    ,               shift and go to state 24
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    DIV             shift and go to state 28
    MOD             shift and go to state 29
    POW             shift and go to state 30
    OR              shift and go to state 31
    XOR             shift and go to state 32
    AND             shift and go to state 33
    TO              shift and go to state 34
    [               shift and go to state 36
    CMP             shift and go to state 37

  ! ,               [ reduce using rule 12 (exp -> ID DIV ASG exp .) ]
  ! +               [ reduce using rule 12 (exp -> ID DIV ASG exp .) ]
  ! -               [ reduce using rule 12 (exp -> ID DIV ASG exp .) ]
  ! *               [ reduce using rule 12 (exp -> ID DIV ASG exp .) ]
  ! DIV             [ reduce using rule 12 (exp -> ID DIV ASG exp .) ]
  ! MOD             [ reduce using rule 12 (exp -> ID DIV ASG exp .) ]
  ! POW             [ reduce using rule 12 (exp -> ID DIV ASG exp .) ]
  ! OR              [ reduce using rule 12 (exp -> ID DIV ASG exp .) ]
  ! XOR             [ reduce using rule 12 (exp -> ID DIV ASG exp .) ]
  ! AND             [ reduce using rule 12 (exp -> ID DIV ASG exp .) ]
  ! TO              [ reduce using rule 12 (exp -> ID DIV ASG exp .) ]
  ! [               [ reduce using rule 12 (exp -> ID DIV ASG exp .) ]
  ! CMP             [ reduce using rule 12 (exp -> ID DIV ASG exp .) ]
  ! IN              [ shift and go to state 35 ]


state 121

    (13) exp -> ID MOD ASG exp .
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    IN              reduce using rule 13 (exp -> ID MOD ASG exp .)
    $end            reduce using rule 13 (exp -> ID MOD ASG exp .)
    )               reduce using rule 13 (exp -> ID MOD ASG exp .)
    ;               reduce using rule 13 (exp -> ID MOD ASG exp .)
    }               reduce using rule 13 (exp -> ID MOD ASG exp .)
    :               reduce using rule 13 (exp -> ID MOD ASG exp .)
    ]               reduce using rule 13 (exp -> ID MOD ASG exp .)
    END             reduce using rule 13 (exp -> ID MOD ASG exp .)
    ELSE            reduce using rule 13 (exp -> ID MOD ASG exp .)
    ,               shift and go to state 24
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    DIV             shift and go to state 28
    MOD             shift and go to state 29
    POW             shift and go to state 30
    OR              shift and go to state 31
    XOR             shift and go to state 32
    AND             shift and go to state 33
    TO              shift and go to state 34
    [               shift and go to state 36
    CMP             shift and go to state 37

  ! ,               [ reduce using rule 13 (exp -> ID MOD ASG exp .) ]
  ! +               [ reduce using rule 13 (exp -> ID MOD ASG exp .) ]
  ! -               [ reduce using rule 13 (exp -> ID MOD ASG exp .) ]
  ! *               [ reduce using rule 13 (exp -> ID MOD ASG exp .) ]
  ! DIV             [ reduce using rule 13 (exp -> ID MOD ASG exp .) ]
  ! MOD             [ reduce using rule 13 (exp -> ID MOD ASG exp .) ]
  ! POW             [ reduce using rule 13 (exp -> ID MOD ASG exp .) ]
  ! OR              [ reduce using rule 13 (exp -> ID MOD ASG exp .) ]
  ! XOR             [ reduce using rule 13 (exp -> ID MOD ASG exp .) ]
  ! AND             [ reduce using rule 13 (exp -> ID MOD ASG exp .) ]
  ! TO              [ reduce using rule 13 (exp -> ID MOD ASG exp .) ]
  ! [               [ reduce using rule 13 (exp -> ID MOD ASG exp .) ]
  ! CMP             [ reduce using rule 13 (exp -> ID MOD ASG exp .) ]
  ! IN              [ shift and go to state 35 ]


state 122

    (14) exp -> ID POW ASG exp .
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    IN              reduce using rule 14 (exp -> ID POW ASG exp .)
    $end            reduce using rule 14 (exp -> ID POW ASG exp .)
    )               reduce using rule 14 (exp -> ID POW ASG exp .)
    ;               reduce using rule 14 (exp -> ID POW ASG exp .)
    }               reduce using rule 14 (exp -> ID POW ASG exp .)
    :               reduce using rule 14 (exp -> ID POW ASG exp .)
    ]               reduce using rule 14 (exp -> ID POW ASG exp .)
    END             reduce using rule 14 (exp -> ID POW ASG exp .)
    ELSE            reduce using rule 14 (exp -> ID POW ASG exp .)
    ,               shift and go to state 24
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    DIV             shift and go to state 28
    MOD             shift and go to state 29
    POW             shift and go to state 30
    OR              shift and go to state 31
    XOR             shift and go to state 32
    AND             shift and go to state 33
    TO              shift and go to state 34
    [               shift and go to state 36
    CMP             shift and go to state 37

  ! ,               [ reduce using rule 14 (exp -> ID POW ASG exp .) ]
  ! +               [ reduce using rule 14 (exp -> ID POW ASG exp .) ]
  ! -               [ reduce using rule 14 (exp -> ID POW ASG exp .) ]
  ! *               [ reduce using rule 14 (exp -> ID POW ASG exp .) ]
  ! DIV             [ reduce using rule 14 (exp -> ID POW ASG exp .) ]
  ! MOD             [ reduce using rule 14 (exp -> ID POW ASG exp .) ]
  ! POW             [ reduce using rule 14 (exp -> ID POW ASG exp .) ]
  ! OR              [ reduce using rule 14 (exp -> ID POW ASG exp .) ]
  ! XOR             [ reduce using rule 14 (exp -> ID POW ASG exp .) ]
  ! AND             [ reduce using rule 14 (exp -> ID POW ASG exp .) ]
  ! TO              [ reduce using rule 14 (exp -> ID POW ASG exp .) ]
  ! [               [ reduce using rule 14 (exp -> ID POW ASG exp .) ]
  ! CMP             [ reduce using rule 14 (exp -> ID POW ASG exp .) ]
  ! IN              [ shift and go to state 35 ]


state 123

    (15) exp -> ID OR ASG exp .
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    IN              reduce using rule 15 (exp -> ID OR ASG exp .)
    $end            reduce using rule 15 (exp -> ID OR ASG exp .)
    )               reduce using rule 15 (exp -> ID OR ASG exp .)
    ;               reduce using rule 15 (exp -> ID OR ASG exp .)
    }               reduce using rule 15 (exp -> ID OR ASG exp .)
    :               reduce using rule 15 (exp -> ID OR ASG exp .)
    ]               reduce using rule 15 (exp -> ID OR ASG exp .)
    END             reduce using rule 15 (exp -> ID OR ASG exp .)
    ELSE            reduce using rule 15 (exp -> ID OR ASG exp .)
    ,               shift and go to state 24
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    DIV             shift and go to state 28
    MOD             shift and go to state 29
    POW             shift and go to state 30
    OR              shift and go to state 31
    XOR             shift and go to state 32
    AND             shift and go to state 33
    TO              shift and go to state 34
    [               shift and go to state 36
    CMP             shift and go to state 37

  ! ,               [ reduce using rule 15 (exp -> ID OR ASG exp .) ]
  ! +               [ reduce using rule 15 (exp -> ID OR ASG exp .) ]
  ! -               [ reduce using rule 15 (exp -> ID OR ASG exp .) ]
  ! *               [ reduce using rule 15 (exp -> ID OR ASG exp .) ]
  ! DIV             [ reduce using rule 15 (exp -> ID OR ASG exp .) ]
  ! MOD             [ reduce using rule 15 (exp -> ID OR ASG exp .) ]
  ! POW             [ reduce using rule 15 (exp -> ID OR ASG exp .) ]
  ! OR              [ reduce using rule 15 (exp -> ID OR ASG exp .) ]
  ! XOR             [ reduce using rule 15 (exp -> ID OR ASG exp .) ]
  ! AND             [ reduce using rule 15 (exp -> ID OR ASG exp .) ]
  ! TO              [ reduce using rule 15 (exp -> ID OR ASG exp .) ]
  ! [               [ reduce using rule 15 (exp -> ID OR ASG exp .) ]
  ! CMP             [ reduce using rule 15 (exp -> ID OR ASG exp .) ]
  ! IN              [ shift and go to state 35 ]


state 124

    (16) exp -> ID XOR ASG exp .
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    IN              reduce using rule 16 (exp -> ID XOR ASG exp .)
    $end            reduce using rule 16 (exp -> ID XOR ASG exp .)
    )               reduce using rule 16 (exp -> ID XOR ASG exp .)
    ;               reduce using rule 16 (exp -> ID XOR ASG exp .)
    }               reduce using rule 16 (exp -> ID XOR ASG exp .)
    :               reduce using rule 16 (exp -> ID XOR ASG exp .)
    ]               reduce using rule 16 (exp -> ID XOR ASG exp .)
    END             reduce using rule 16 (exp -> ID XOR ASG exp .)
    ELSE            reduce using rule 16 (exp -> ID XOR ASG exp .)
    ,               shift and go to state 24
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    DIV             shift and go to state 28
    MOD             shift and go to state 29
    POW             shift and go to state 30
    OR              shift and go to state 31
    XOR             shift and go to state 32
    AND             shift and go to state 33
    TO              shift and go to state 34
    [               shift and go to state 36
    CMP             shift and go to state 37

  ! ,               [ reduce using rule 16 (exp -> ID XOR ASG exp .) ]
  ! +               [ reduce using rule 16 (exp -> ID XOR ASG exp .) ]
  ! -               [ reduce using rule 16 (exp -> ID XOR ASG exp .) ]
  ! *               [ reduce using rule 16 (exp -> ID XOR ASG exp .) ]
  ! DIV             [ reduce using rule 16 (exp -> ID XOR ASG exp .) ]
  ! MOD             [ reduce using rule 16 (exp -> ID XOR ASG exp .) ]
  ! POW             [ reduce using rule 16 (exp -> ID XOR ASG exp .) ]
  ! OR              [ reduce using rule 16 (exp -> ID XOR ASG exp .) ]
  ! XOR             [ reduce using rule 16 (exp -> ID XOR ASG exp .) ]
  ! AND             [ reduce using rule 16 (exp -> ID XOR ASG exp .) ]
  ! TO              [ reduce using rule 16 (exp -> ID XOR ASG exp .) ]
  ! [               [ reduce using rule 16 (exp -> ID XOR ASG exp .) ]
  ! CMP             [ reduce using rule 16 (exp -> ID XOR ASG exp .) ]
  ! IN              [ shift and go to state 35 ]


state 125

    (17) exp -> ID AND ASG exp .
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    IN              reduce using rule 17 (exp -> ID AND ASG exp .)
    $end            reduce using rule 17 (exp -> ID AND ASG exp .)
    )               reduce using rule 17 (exp -> ID AND ASG exp .)
    ;               reduce using rule 17 (exp -> ID AND ASG exp .)
    }               reduce using rule 17 (exp -> ID AND ASG exp .)
    :               reduce using rule 17 (exp -> ID AND ASG exp .)
    ]               reduce using rule 17 (exp -> ID AND ASG exp .)
    END             reduce using rule 17 (exp -> ID AND ASG exp .)
    ELSE            reduce using rule 17 (exp -> ID AND ASG exp .)
    ,               shift and go to state 24
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    DIV             shift and go to state 28
    MOD             shift and go to state 29
    POW             shift and go to state 30
    OR              shift and go to state 31
    XOR             shift and go to state 32
    AND             shift and go to state 33
    TO              shift and go to state 34
    [               shift and go to state 36
    CMP             shift and go to state 37

  ! ,               [ reduce using rule 17 (exp -> ID AND ASG exp .) ]
  ! +               [ reduce using rule 17 (exp -> ID AND ASG exp .) ]
  ! -               [ reduce using rule 17 (exp -> ID AND ASG exp .) ]
  ! *               [ reduce using rule 17 (exp -> ID AND ASG exp .) ]
  ! DIV             [ reduce using rule 17 (exp -> ID AND ASG exp .) ]
  ! MOD             [ reduce using rule 17 (exp -> ID AND ASG exp .) ]
  ! POW             [ reduce using rule 17 (exp -> ID AND ASG exp .) ]
  ! OR              [ reduce using rule 17 (exp -> ID AND ASG exp .) ]
  ! XOR             [ reduce using rule 17 (exp -> ID AND ASG exp .) ]
  ! AND             [ reduce using rule 17 (exp -> ID AND ASG exp .) ]
  ! TO              [ reduce using rule 17 (exp -> ID AND ASG exp .) ]
  ! [               [ reduce using rule 17 (exp -> ID AND ASG exp .) ]
  ! CMP             [ reduce using rule 17 (exp -> ID AND ASG exp .) ]
  ! IN              [ shift and go to state 35 ]


state 126

    (38) exp -> ID ( exp ) .

    ,               reduce using rule 38 (exp -> ID ( exp ) .)
    +               reduce using rule 38 (exp -> ID ( exp ) .)
    -               reduce using rule 38 (exp -> ID ( exp ) .)
    *               reduce using rule 38 (exp -> ID ( exp ) .)
    DIV             reduce using rule 38 (exp -> ID ( exp ) .)
    MOD             reduce using rule 38 (exp -> ID ( exp ) .)
    POW             reduce using rule 38 (exp -> ID ( exp ) .)
    OR              reduce using rule 38 (exp -> ID ( exp ) .)
    XOR             reduce using rule 38 (exp -> ID ( exp ) .)
    AND             reduce using rule 38 (exp -> ID ( exp ) .)
    TO              reduce using rule 38 (exp -> ID ( exp ) .)
    IN              reduce using rule 38 (exp -> ID ( exp ) .)
    [               reduce using rule 38 (exp -> ID ( exp ) .)
    CMP             reduce using rule 38 (exp -> ID ( exp ) .)
    $end            reduce using rule 38 (exp -> ID ( exp ) .)
    )               reduce using rule 38 (exp -> ID ( exp ) .)
    ;               reduce using rule 38 (exp -> ID ( exp ) .)
    }               reduce using rule 38 (exp -> ID ( exp ) .)
    :               reduce using rule 38 (exp -> ID ( exp ) .)
    ]               reduce using rule 38 (exp -> ID ( exp ) .)
    END             reduce using rule 38 (exp -> ID ( exp ) .)
    ELSE            reduce using rule 38 (exp -> ID ( exp ) .)


state 127

    (35) exp -> FOR ID IN exp . : exp END
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    :               shift and go to state 134
    ,               shift and go to state 24
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    DIV             shift and go to state 28
    MOD             shift and go to state 29
    POW             shift and go to state 30
    OR              shift and go to state 31
    XOR             shift and go to state 32
    AND             shift and go to state 33
    TO              shift and go to state 34
    IN              shift and go to state 35
    [               shift and go to state 36
    CMP             shift and go to state 37


state 128

    (36) exp -> FOR NUM ID IN . it : exp END
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    [               shift and go to state 21
    ]               shift and go to state 22

    it                             shift and go to state 135

state 129

    (63) seq -> exp ; seq .

    }               reduce using rule 63 (seq -> exp ; seq .)


state 130

    (70) exp -> WHILE exp : exp . END
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    END             shift and go to state 136
    ,               shift and go to state 24
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    DIV             shift and go to state 28
    MOD             shift and go to state 29
    POW             shift and go to state 30
    OR              shift and go to state 31
    XOR             shift and go to state 32
    AND             shift and go to state 33
    TO              shift and go to state 34
    IN              shift and go to state 35
    [               shift and go to state 36
    CMP             shift and go to state 37


state 131

    (42) it -> [ exp , exp . ]
    (44) it -> [ exp , exp . [
    (1) arr -> exp , exp .
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    ]               shift and go to state 138
    [               shift and go to state 137
    ,               reduce using rule 1 (arr -> exp , exp .)
    TO              reduce using rule 1 (arr -> exp , exp .)
    IN              reduce using rule 1 (arr -> exp , exp .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    DIV             shift and go to state 28
    MOD             shift and go to state 29
    POW             shift and go to state 30
    OR              shift and go to state 31
    XOR             shift and go to state 32
    AND             shift and go to state 33
    CMP             shift and go to state 37

  ! +               [ reduce using rule 1 (arr -> exp , exp .) ]
  ! -               [ reduce using rule 1 (arr -> exp , exp .) ]
  ! *               [ reduce using rule 1 (arr -> exp , exp .) ]
  ! DIV             [ reduce using rule 1 (arr -> exp , exp .) ]
  ! MOD             [ reduce using rule 1 (arr -> exp , exp .) ]
  ! POW             [ reduce using rule 1 (arr -> exp , exp .) ]
  ! OR              [ reduce using rule 1 (arr -> exp , exp .) ]
  ! XOR             [ reduce using rule 1 (arr -> exp , exp .) ]
  ! AND             [ reduce using rule 1 (arr -> exp , exp .) ]
  ! [               [ reduce using rule 1 (arr -> exp , exp .) ]
  ! CMP             [ reduce using rule 1 (arr -> exp , exp .) ]
  ! ,               [ shift and go to state 24 ]
  ! TO              [ shift and go to state 34 ]
  ! IN              [ shift and go to state 35 ]


state 132

    (43) it -> ] exp , exp . ]
    (45) it -> ] exp , exp . [
    (1) arr -> exp , exp .
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    ]               shift and go to state 139
    [               shift and go to state 140
    ,               reduce using rule 1 (arr -> exp , exp .)
    TO              reduce using rule 1 (arr -> exp , exp .)
    IN              reduce using rule 1 (arr -> exp , exp .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    DIV             shift and go to state 28
    MOD             shift and go to state 29
    POW             shift and go to state 30
    OR              shift and go to state 31
    XOR             shift and go to state 32
    AND             shift and go to state 33
    CMP             shift and go to state 37

  ! +               [ reduce using rule 1 (arr -> exp , exp .) ]
  ! -               [ reduce using rule 1 (arr -> exp , exp .) ]
  ! *               [ reduce using rule 1 (arr -> exp , exp .) ]
  ! DIV             [ reduce using rule 1 (arr -> exp , exp .) ]
  ! MOD             [ reduce using rule 1 (arr -> exp , exp .) ]
  ! POW             [ reduce using rule 1 (arr -> exp , exp .) ]
  ! OR              [ reduce using rule 1 (arr -> exp , exp .) ]
  ! XOR             [ reduce using rule 1 (arr -> exp , exp .) ]
  ! AND             [ reduce using rule 1 (arr -> exp , exp .) ]
  ! [               [ reduce using rule 1 (arr -> exp , exp .) ]
  ! CMP             [ reduce using rule 1 (arr -> exp , exp .) ]
  ! ,               [ shift and go to state 24 ]
  ! TO              [ shift and go to state 34 ]
  ! IN              [ shift and go to state 35 ]


state 133

    (31) ifc -> IF exp : exp .
    (32) ifc -> IF exp : exp . ELSE exp
    (33) ifc -> IF exp : exp . ELSE ifc
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    END             reduce using rule 31 (ifc -> IF exp : exp .)
    ELSE            shift and go to state 141
    ,               shift and go to state 24
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    DIV             shift and go to state 28
    MOD             shift and go to state 29
    POW             shift and go to state 30
    OR              shift and go to state 31
    XOR             shift and go to state 32
    AND             shift and go to state 33
    TO              shift and go to state 34
    IN              shift and go to state 35
    [               shift and go to state 36
    CMP             shift and go to state 37


state 134

    (35) exp -> FOR ID IN exp : . exp END
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

    exp                            shift and go to state 142
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    ifc                            shift and go to state 9
    it                             shift and go to state 12

state 135

    (36) exp -> FOR NUM ID IN it . : exp END

    :               shift and go to state 143


state 136

    (70) exp -> WHILE exp : exp END .

    ,               reduce using rule 70 (exp -> WHILE exp : exp END .)
    +               reduce using rule 70 (exp -> WHILE exp : exp END .)
    -               reduce using rule 70 (exp -> WHILE exp : exp END .)
    *               reduce using rule 70 (exp -> WHILE exp : exp END .)
    DIV             reduce using rule 70 (exp -> WHILE exp : exp END .)
    MOD             reduce using rule 70 (exp -> WHILE exp : exp END .)
    POW             reduce using rule 70 (exp -> WHILE exp : exp END .)
    OR              reduce using rule 70 (exp -> WHILE exp : exp END .)
    XOR             reduce using rule 70 (exp -> WHILE exp : exp END .)
    AND             reduce using rule 70 (exp -> WHILE exp : exp END .)
    TO              reduce using rule 70 (exp -> WHILE exp : exp END .)
    IN              reduce using rule 70 (exp -> WHILE exp : exp END .)
    [               reduce using rule 70 (exp -> WHILE exp : exp END .)
    CMP             reduce using rule 70 (exp -> WHILE exp : exp END .)
    $end            reduce using rule 70 (exp -> WHILE exp : exp END .)
    )               reduce using rule 70 (exp -> WHILE exp : exp END .)
    ;               reduce using rule 70 (exp -> WHILE exp : exp END .)
    }               reduce using rule 70 (exp -> WHILE exp : exp END .)
    :               reduce using rule 70 (exp -> WHILE exp : exp END .)
    ]               reduce using rule 70 (exp -> WHILE exp : exp END .)
    END             reduce using rule 70 (exp -> WHILE exp : exp END .)
    ELSE            reduce using rule 70 (exp -> WHILE exp : exp END .)


state 137

    (44) it -> [ exp , exp [ .
    (6) agt -> exp [ . exp ]
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    ,               reduce using rule 44 (it -> [ exp , exp [ .)
    +               reduce using rule 44 (it -> [ exp , exp [ .)
    -               reduce using rule 44 (it -> [ exp , exp [ .)
    *               reduce using rule 44 (it -> [ exp , exp [ .)
    DIV             reduce using rule 44 (it -> [ exp , exp [ .)
    MOD             reduce using rule 44 (it -> [ exp , exp [ .)
    POW             reduce using rule 44 (it -> [ exp , exp [ .)
    OR              reduce using rule 44 (it -> [ exp , exp [ .)
    XOR             reduce using rule 44 (it -> [ exp , exp [ .)
    AND             reduce using rule 44 (it -> [ exp , exp [ .)
    TO              reduce using rule 44 (it -> [ exp , exp [ .)
    IN              reduce using rule 44 (it -> [ exp , exp [ .)
    [               reduce using rule 44 (it -> [ exp , exp [ .)
    CMP             reduce using rule 44 (it -> [ exp , exp [ .)
    $end            reduce using rule 44 (it -> [ exp , exp [ .)
    )               reduce using rule 44 (it -> [ exp , exp [ .)
    ;               reduce using rule 44 (it -> [ exp , exp [ .)
    }               reduce using rule 44 (it -> [ exp , exp [ .)
    :               reduce using rule 44 (it -> [ exp , exp [ .)
    ]               reduce using rule 44 (it -> [ exp , exp [ .)
    END             reduce using rule 44 (it -> [ exp , exp [ .)
    ELSE            reduce using rule 44 (it -> [ exp , exp [ .)
    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23

  ! -               [ shift and go to state 7 ]
  ! +               [ shift and go to state 6 ]
  ! [               [ shift and go to state 21 ]
  ! ]               [ shift and go to state 22 ]

    exp                            shift and go to state 82
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    ifc                            shift and go to state 9
    it                             shift and go to state 12

state 138

    (42) it -> [ exp , exp ] .

    ,               reduce using rule 42 (it -> [ exp , exp ] .)
    +               reduce using rule 42 (it -> [ exp , exp ] .)
    -               reduce using rule 42 (it -> [ exp , exp ] .)
    *               reduce using rule 42 (it -> [ exp , exp ] .)
    DIV             reduce using rule 42 (it -> [ exp , exp ] .)
    MOD             reduce using rule 42 (it -> [ exp , exp ] .)
    POW             reduce using rule 42 (it -> [ exp , exp ] .)
    OR              reduce using rule 42 (it -> [ exp , exp ] .)
    XOR             reduce using rule 42 (it -> [ exp , exp ] .)
    AND             reduce using rule 42 (it -> [ exp , exp ] .)
    TO              reduce using rule 42 (it -> [ exp , exp ] .)
    IN              reduce using rule 42 (it -> [ exp , exp ] .)
    [               reduce using rule 42 (it -> [ exp , exp ] .)
    CMP             reduce using rule 42 (it -> [ exp , exp ] .)
    $end            reduce using rule 42 (it -> [ exp , exp ] .)
    )               reduce using rule 42 (it -> [ exp , exp ] .)
    ;               reduce using rule 42 (it -> [ exp , exp ] .)
    }               reduce using rule 42 (it -> [ exp , exp ] .)
    :               reduce using rule 42 (it -> [ exp , exp ] .)
    ]               reduce using rule 42 (it -> [ exp , exp ] .)
    END             reduce using rule 42 (it -> [ exp , exp ] .)
    ELSE            reduce using rule 42 (it -> [ exp , exp ] .)


state 139

    (43) it -> ] exp , exp ] .

    ,               reduce using rule 43 (it -> ] exp , exp ] .)
    +               reduce using rule 43 (it -> ] exp , exp ] .)
    -               reduce using rule 43 (it -> ] exp , exp ] .)
    *               reduce using rule 43 (it -> ] exp , exp ] .)
    DIV             reduce using rule 43 (it -> ] exp , exp ] .)
    MOD             reduce using rule 43 (it -> ] exp , exp ] .)
    POW             reduce using rule 43 (it -> ] exp , exp ] .)
    OR              reduce using rule 43 (it -> ] exp , exp ] .)
    XOR             reduce using rule 43 (it -> ] exp , exp ] .)
    AND             reduce using rule 43 (it -> ] exp , exp ] .)
    TO              reduce using rule 43 (it -> ] exp , exp ] .)
    IN              reduce using rule 43 (it -> ] exp , exp ] .)
    [               reduce using rule 43 (it -> ] exp , exp ] .)
    CMP             reduce using rule 43 (it -> ] exp , exp ] .)
    $end            reduce using rule 43 (it -> ] exp , exp ] .)
    )               reduce using rule 43 (it -> ] exp , exp ] .)
    ;               reduce using rule 43 (it -> ] exp , exp ] .)
    }               reduce using rule 43 (it -> ] exp , exp ] .)
    :               reduce using rule 43 (it -> ] exp , exp ] .)
    ]               reduce using rule 43 (it -> ] exp , exp ] .)
    END             reduce using rule 43 (it -> ] exp , exp ] .)
    ELSE            reduce using rule 43 (it -> ] exp , exp ] .)


state 140

    (45) it -> ] exp , exp [ .
    (6) agt -> exp [ . exp ]
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    ,               reduce using rule 45 (it -> ] exp , exp [ .)
    +               reduce using rule 45 (it -> ] exp , exp [ .)
    -               reduce using rule 45 (it -> ] exp , exp [ .)
    *               reduce using rule 45 (it -> ] exp , exp [ .)
    DIV             reduce using rule 45 (it -> ] exp , exp [ .)
    MOD             reduce using rule 45 (it -> ] exp , exp [ .)
    POW             reduce using rule 45 (it -> ] exp , exp [ .)
    OR              reduce using rule 45 (it -> ] exp , exp [ .)
    XOR             reduce using rule 45 (it -> ] exp , exp [ .)
    AND             reduce using rule 45 (it -> ] exp , exp [ .)
    TO              reduce using rule 45 (it -> ] exp , exp [ .)
    IN              reduce using rule 45 (it -> ] exp , exp [ .)
    [               reduce using rule 45 (it -> ] exp , exp [ .)
    CMP             reduce using rule 45 (it -> ] exp , exp [ .)
    $end            reduce using rule 45 (it -> ] exp , exp [ .)
    )               reduce using rule 45 (it -> ] exp , exp [ .)
    ;               reduce using rule 45 (it -> ] exp , exp [ .)
    }               reduce using rule 45 (it -> ] exp , exp [ .)
    :               reduce using rule 45 (it -> ] exp , exp [ .)
    ]               reduce using rule 45 (it -> ] exp , exp [ .)
    END             reduce using rule 45 (it -> ] exp , exp [ .)
    ELSE            reduce using rule 45 (it -> ] exp , exp [ .)
    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23

  ! -               [ shift and go to state 7 ]
  ! +               [ shift and go to state 6 ]
  ! [               [ shift and go to state 21 ]
  ! ]               [ shift and go to state 22 ]

    exp                            shift and go to state 82
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    ifc                            shift and go to state 9
    it                             shift and go to state 12

state 141

    (32) ifc -> IF exp : exp ELSE . exp
    (33) ifc -> IF exp : exp ELSE . ifc
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

    exp                            shift and go to state 144
    ifc                            shift and go to state 145
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    it                             shift and go to state 12

state 142

    (35) exp -> FOR ID IN exp : exp . END
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    END             shift and go to state 146
    ,               shift and go to state 24
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    DIV             shift and go to state 28
    MOD             shift and go to state 29
    POW             shift and go to state 30
    OR              shift and go to state 31
    XOR             shift and go to state 32
    AND             shift and go to state 33
    TO              shift and go to state 34
    IN              shift and go to state 35
    [               shift and go to state 36
    CMP             shift and go to state 37


state 143

    (36) exp -> FOR NUM ID IN it : . exp END
    (3) exp -> . arr
    (4) exp -> . ( )
    (5) exp -> . exp ,
    (7) exp -> . agt
    (8) exp -> . ID + ASG exp
    (9) exp -> . ID - ASG exp
    (10) exp -> . ID USG
    (11) exp -> . ID * ASG exp
    (12) exp -> . ID DIV ASG exp
    (13) exp -> . ID MOD ASG exp
    (14) exp -> . ID POW ASG exp
    (15) exp -> . ID OR ASG exp
    (16) exp -> . ID XOR ASG exp
    (17) exp -> . ID AND ASG exp
    (18) exp -> . ID ASG exp
    (19) exp -> . exp + exp
    (20) exp -> . exp - exp
    (21) exp -> . exp * exp
    (22) exp -> . exp DIV exp
    (23) exp -> . exp MOD exp
    (24) exp -> . exp POW exp
    (25) exp -> . exp OR exp
    (26) exp -> . exp XOR exp
    (27) exp -> . exp AND exp
    (30) exp -> . cmp
    (34) exp -> . ifc END
    (35) exp -> . FOR ID IN exp : exp END
    (36) exp -> . FOR NUM ID IN it : exp END
    (37) exp -> . exp TO exp
    (38) exp -> . ID ( exp )
    (39) exp -> . ID ( )
    (40) exp -> . ( exp )
    (41) exp -> . ID
    (46) exp -> . it
    (47) exp -> . exp IN it
    (48) exp -> . ID + exp
    (49) exp -> . ID - exp
    (50) exp -> . - exp
    (51) exp -> . ID * exp
    (52) exp -> . ID DIV exp
    (53) exp -> . ID MOD exp
    (54) exp -> . ID POW exp
    (55) exp -> . ID OR exp
    (56) exp -> . ID XOR exp
    (57) exp -> . ID AND exp
    (58) exp -> . + exp
    (59) exp -> . NOT exp
    (60) exp -> . ECHO exp
    (61) exp -> . LOAD exp
    (62) exp -> . EVAL exp
    (66) exp -> . { seq }
    (67) exp -> . STK exp
    (68) exp -> . NUM
    (69) exp -> . STR
    (70) exp -> . WHILE exp : exp END
    (1) arr -> . exp , exp
    (2) arr -> . arr , exp
    (6) agt -> . exp [ exp ]
    (28) cmp -> . exp CMP exp
    (29) cmp -> . cmp CMP exp
    (31) ifc -> . IF exp : exp
    (32) ifc -> . IF exp : exp ELSE exp
    (33) ifc -> . IF exp : exp ELSE ifc
    (42) it -> . [ exp , exp ]
    (43) it -> . ] exp , exp ]
    (44) it -> . [ exp , exp [
    (45) it -> . ] exp , exp [

    (               shift and go to state 3
    ID              shift and go to state 5
    FOR             shift and go to state 10
    -               shift and go to state 7
    +               shift and go to state 6
    NOT             shift and go to state 13
    ECHO            shift and go to state 14
    LOAD            shift and go to state 15
    EVAL            shift and go to state 16
    {               shift and go to state 17
    STK             shift and go to state 18
    NUM             shift and go to state 11
    STR             shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 23
    [               shift and go to state 21
    ]               shift and go to state 22

    it                             shift and go to state 12
    exp                            shift and go to state 147
    arr                            shift and go to state 2
    agt                            shift and go to state 4
    cmp                            shift and go to state 8
    ifc                            shift and go to state 9

state 144

    (32) ifc -> IF exp : exp ELSE exp .
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    END             reduce using rule 32 (ifc -> IF exp : exp ELSE exp .)
    ,               shift and go to state 24
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    DIV             shift and go to state 28
    MOD             shift and go to state 29
    POW             shift and go to state 30
    OR              shift and go to state 31
    XOR             shift and go to state 32
    AND             shift and go to state 33
    TO              shift and go to state 34
    IN              shift and go to state 35
    [               shift and go to state 36
    CMP             shift and go to state 37


state 145

    (33) ifc -> IF exp : exp ELSE ifc .
    (34) exp -> ifc . END

    END             reduce using rule 33 (ifc -> IF exp : exp ELSE ifc .)

  ! END             [ shift and go to state 56 ]


state 146

    (35) exp -> FOR ID IN exp : exp END .

    ,               reduce using rule 35 (exp -> FOR ID IN exp : exp END .)
    +               reduce using rule 35 (exp -> FOR ID IN exp : exp END .)
    -               reduce using rule 35 (exp -> FOR ID IN exp : exp END .)
    *               reduce using rule 35 (exp -> FOR ID IN exp : exp END .)
    DIV             reduce using rule 35 (exp -> FOR ID IN exp : exp END .)
    MOD             reduce using rule 35 (exp -> FOR ID IN exp : exp END .)
    POW             reduce using rule 35 (exp -> FOR ID IN exp : exp END .)
    OR              reduce using rule 35 (exp -> FOR ID IN exp : exp END .)
    XOR             reduce using rule 35 (exp -> FOR ID IN exp : exp END .)
    AND             reduce using rule 35 (exp -> FOR ID IN exp : exp END .)
    TO              reduce using rule 35 (exp -> FOR ID IN exp : exp END .)
    IN              reduce using rule 35 (exp -> FOR ID IN exp : exp END .)
    [               reduce using rule 35 (exp -> FOR ID IN exp : exp END .)
    CMP             reduce using rule 35 (exp -> FOR ID IN exp : exp END .)
    $end            reduce using rule 35 (exp -> FOR ID IN exp : exp END .)
    )               reduce using rule 35 (exp -> FOR ID IN exp : exp END .)
    ;               reduce using rule 35 (exp -> FOR ID IN exp : exp END .)
    }               reduce using rule 35 (exp -> FOR ID IN exp : exp END .)
    :               reduce using rule 35 (exp -> FOR ID IN exp : exp END .)
    ]               reduce using rule 35 (exp -> FOR ID IN exp : exp END .)
    END             reduce using rule 35 (exp -> FOR ID IN exp : exp END .)
    ELSE            reduce using rule 35 (exp -> FOR ID IN exp : exp END .)


state 147

    (36) exp -> FOR NUM ID IN it : exp . END
    (5) exp -> exp . ,
    (19) exp -> exp . + exp
    (20) exp -> exp . - exp
    (21) exp -> exp . * exp
    (22) exp -> exp . DIV exp
    (23) exp -> exp . MOD exp
    (24) exp -> exp . POW exp
    (25) exp -> exp . OR exp
    (26) exp -> exp . XOR exp
    (27) exp -> exp . AND exp
    (37) exp -> exp . TO exp
    (47) exp -> exp . IN it
    (1) arr -> exp . , exp
    (6) agt -> exp . [ exp ]
    (28) cmp -> exp . CMP exp

    END             shift and go to state 148
    ,               shift and go to state 24
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    DIV             shift and go to state 28
    MOD             shift and go to state 29
    POW             shift and go to state 30
    OR              shift and go to state 31
    XOR             shift and go to state 32
    AND             shift and go to state 33
    TO              shift and go to state 34
    IN              shift and go to state 35
    [               shift and go to state 36
    CMP             shift and go to state 37


state 148

    (36) exp -> FOR NUM ID IN it : exp END .

    ,               reduce using rule 36 (exp -> FOR NUM ID IN it : exp END .)
    +               reduce using rule 36 (exp -> FOR NUM ID IN it : exp END .)
    -               reduce using rule 36 (exp -> FOR NUM ID IN it : exp END .)
    *               reduce using rule 36 (exp -> FOR NUM ID IN it : exp END .)
    DIV             reduce using rule 36 (exp -> FOR NUM ID IN it : exp END .)
    MOD             reduce using rule 36 (exp -> FOR NUM ID IN it : exp END .)
    POW             reduce using rule 36 (exp -> FOR NUM ID IN it : exp END .)
    OR              reduce using rule 36 (exp -> FOR NUM ID IN it : exp END .)
    XOR             reduce using rule 36 (exp -> FOR NUM ID IN it : exp END .)
    AND             reduce using rule 36 (exp -> FOR NUM ID IN it : exp END .)
    TO              reduce using rule 36 (exp -> FOR NUM ID IN it : exp END .)
    IN              reduce using rule 36 (exp -> FOR NUM ID IN it : exp END .)
    [               reduce using rule 36 (exp -> FOR NUM ID IN it : exp END .)
    CMP             reduce using rule 36 (exp -> FOR NUM ID IN it : exp END .)
    $end            reduce using rule 36 (exp -> FOR NUM ID IN it : exp END .)
    )               reduce using rule 36 (exp -> FOR NUM ID IN it : exp END .)
    ;               reduce using rule 36 (exp -> FOR NUM ID IN it : exp END .)
    }               reduce using rule 36 (exp -> FOR NUM ID IN it : exp END .)
    :               reduce using rule 36 (exp -> FOR NUM ID IN it : exp END .)
    ]               reduce using rule 36 (exp -> FOR NUM ID IN it : exp END .)
    END             reduce using rule 36 (exp -> FOR NUM ID IN it : exp END .)
    ELSE            reduce using rule 36 (exp -> FOR NUM ID IN it : exp END .)

