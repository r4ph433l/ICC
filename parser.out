Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> exp
Rule 1     exp -> ID ASG exp
Rule 2     exp -> ID USG
Rule 3     exp -> exp + exp
Rule 4     exp -> exp - exp
Rule 5     exp -> exp * exp
Rule 6     exp -> exp DIV exp
Rule 7     exp -> exp POW exp
Rule 8     exp -> exp or exp
Rule 9     exp -> exp xor exp
Rule 10    exp -> exp and exp
Rule 11    cmp -> exp CMP exp
Rule 12    cmp -> cmp CMP exp
Rule 13    exp -> cmp
Rule 14    exp -> ( exp )
Rule 15    exp -> ID
Rule 16    exp -> + exp
Rule 17    exp -> - exp
Rule 18    exp -> not exp
Rule 19    exp -> SYS exp
Rule 20    seq -> exp ; seq
Rule 21    seq -> exp ;
Rule 22    seq -> exp
Rule 23    exp -> { seq }
Rule 24    exp -> exp imag
Rule 25    exp -> NUM

Terminals, with rules where they appear

(                    : 14
)                    : 14
*                    : 5
+                    : 3 16
-                    : 4 17
;                    : 20 21
ASG                  : 1
CMP                  : 11 12
DIV                  : 6
ID                   : 1 2 15
NUM                  : 25
POW                  : 7
SYS                  : 19
USG                  : 2
and                  : 10
error                : 
imag                 : 24
not                  : 18
or                   : 8
xor                  : 9
{                    : 23
}                    : 23

Nonterminals, with rules where they appear

cmp                  : 12 13
exp                  : 1 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 11 11 12 14 16 17 18 19 20 21 22 24 0
seq                  : 20 23

Parsing method: LALR

state 0

    (0) S' -> . exp
    (1) exp -> . ID ASG exp
    (2) exp -> . ID USG
    (3) exp -> . exp + exp
    (4) exp -> . exp - exp
    (5) exp -> . exp * exp
    (6) exp -> . exp DIV exp
    (7) exp -> . exp POW exp
    (8) exp -> . exp or exp
    (9) exp -> . exp xor exp
    (10) exp -> . exp and exp
    (13) exp -> . cmp
    (14) exp -> . ( exp )
    (15) exp -> . ID
    (16) exp -> . + exp
    (17) exp -> . - exp
    (18) exp -> . not exp
    (19) exp -> . SYS exp
    (23) exp -> . { seq }
    (24) exp -> . exp imag
    (25) exp -> . NUM
    (11) cmp -> . exp CMP exp
    (12) cmp -> . cmp CMP exp

    ID              shift and go to state 2
    (               shift and go to state 6
    +               shift and go to state 3
    -               shift and go to state 4
    not             shift and go to state 7
    SYS             shift and go to state 8
    {               shift and go to state 9
    NUM             shift and go to state 10

    exp                            shift and go to state 1
    cmp                            shift and go to state 5

state 1

    (0) S' -> exp .
    (3) exp -> exp . + exp
    (4) exp -> exp . - exp
    (5) exp -> exp . * exp
    (6) exp -> exp . DIV exp
    (7) exp -> exp . POW exp
    (8) exp -> exp . or exp
    (9) exp -> exp . xor exp
    (10) exp -> exp . and exp
    (24) exp -> exp . imag
    (11) cmp -> exp . CMP exp

    +               shift and go to state 11
    -               shift and go to state 12
    *               shift and go to state 13
    DIV             shift and go to state 14
    POW             shift and go to state 15
    or              shift and go to state 16
    xor             shift and go to state 17
    and             shift and go to state 18
    imag            shift and go to state 19
    CMP             shift and go to state 20


state 2

    (1) exp -> ID . ASG exp
    (2) exp -> ID . USG
    (15) exp -> ID .

    ASG             shift and go to state 21
    USG             shift and go to state 22
    +               reduce using rule 15 (exp -> ID .)
    -               reduce using rule 15 (exp -> ID .)
    *               reduce using rule 15 (exp -> ID .)
    DIV             reduce using rule 15 (exp -> ID .)
    POW             reduce using rule 15 (exp -> ID .)
    or              reduce using rule 15 (exp -> ID .)
    xor             reduce using rule 15 (exp -> ID .)
    and             reduce using rule 15 (exp -> ID .)
    imag            reduce using rule 15 (exp -> ID .)
    CMP             reduce using rule 15 (exp -> ID .)
    $end            reduce using rule 15 (exp -> ID .)
    )               reduce using rule 15 (exp -> ID .)
    ;               reduce using rule 15 (exp -> ID .)
    }               reduce using rule 15 (exp -> ID .)


state 3

    (16) exp -> + . exp
    (1) exp -> . ID ASG exp
    (2) exp -> . ID USG
    (3) exp -> . exp + exp
    (4) exp -> . exp - exp
    (5) exp -> . exp * exp
    (6) exp -> . exp DIV exp
    (7) exp -> . exp POW exp
    (8) exp -> . exp or exp
    (9) exp -> . exp xor exp
    (10) exp -> . exp and exp
    (13) exp -> . cmp
    (14) exp -> . ( exp )
    (15) exp -> . ID
    (16) exp -> . + exp
    (17) exp -> . - exp
    (18) exp -> . not exp
    (19) exp -> . SYS exp
    (23) exp -> . { seq }
    (24) exp -> . exp imag
    (25) exp -> . NUM
    (11) cmp -> . exp CMP exp
    (12) cmp -> . cmp CMP exp

    ID              shift and go to state 2
    (               shift and go to state 6
    +               shift and go to state 3
    -               shift and go to state 4
    not             shift and go to state 7
    SYS             shift and go to state 8
    {               shift and go to state 9
    NUM             shift and go to state 10

    exp                            shift and go to state 23
    cmp                            shift and go to state 5

state 4

    (17) exp -> - . exp
    (1) exp -> . ID ASG exp
    (2) exp -> . ID USG
    (3) exp -> . exp + exp
    (4) exp -> . exp - exp
    (5) exp -> . exp * exp
    (6) exp -> . exp DIV exp
    (7) exp -> . exp POW exp
    (8) exp -> . exp or exp
    (9) exp -> . exp xor exp
    (10) exp -> . exp and exp
    (13) exp -> . cmp
    (14) exp -> . ( exp )
    (15) exp -> . ID
    (16) exp -> . + exp
    (17) exp -> . - exp
    (18) exp -> . not exp
    (19) exp -> . SYS exp
    (23) exp -> . { seq }
    (24) exp -> . exp imag
    (25) exp -> . NUM
    (11) cmp -> . exp CMP exp
    (12) cmp -> . cmp CMP exp

    ID              shift and go to state 2
    (               shift and go to state 6
    +               shift and go to state 3
    -               shift and go to state 4
    not             shift and go to state 7
    SYS             shift and go to state 8
    {               shift and go to state 9
    NUM             shift and go to state 10

    exp                            shift and go to state 24
    cmp                            shift and go to state 5

state 5

    (13) exp -> cmp .
    (12) cmp -> cmp . CMP exp

    +               reduce using rule 13 (exp -> cmp .)
    -               reduce using rule 13 (exp -> cmp .)
    *               reduce using rule 13 (exp -> cmp .)
    DIV             reduce using rule 13 (exp -> cmp .)
    POW             reduce using rule 13 (exp -> cmp .)
    or              reduce using rule 13 (exp -> cmp .)
    xor             reduce using rule 13 (exp -> cmp .)
    and             reduce using rule 13 (exp -> cmp .)
    imag            reduce using rule 13 (exp -> cmp .)
    $end            reduce using rule 13 (exp -> cmp .)
    )               reduce using rule 13 (exp -> cmp .)
    ;               reduce using rule 13 (exp -> cmp .)
    }               reduce using rule 13 (exp -> cmp .)
    CMP             shift and go to state 25

  ! CMP             [ reduce using rule 13 (exp -> cmp .) ]


state 6

    (14) exp -> ( . exp )
    (1) exp -> . ID ASG exp
    (2) exp -> . ID USG
    (3) exp -> . exp + exp
    (4) exp -> . exp - exp
    (5) exp -> . exp * exp
    (6) exp -> . exp DIV exp
    (7) exp -> . exp POW exp
    (8) exp -> . exp or exp
    (9) exp -> . exp xor exp
    (10) exp -> . exp and exp
    (13) exp -> . cmp
    (14) exp -> . ( exp )
    (15) exp -> . ID
    (16) exp -> . + exp
    (17) exp -> . - exp
    (18) exp -> . not exp
    (19) exp -> . SYS exp
    (23) exp -> . { seq }
    (24) exp -> . exp imag
    (25) exp -> . NUM
    (11) cmp -> . exp CMP exp
    (12) cmp -> . cmp CMP exp

    ID              shift and go to state 2
    (               shift and go to state 6
    +               shift and go to state 3
    -               shift and go to state 4
    not             shift and go to state 7
    SYS             shift and go to state 8
    {               shift and go to state 9
    NUM             shift and go to state 10

    exp                            shift and go to state 26
    cmp                            shift and go to state 5

state 7

    (18) exp -> not . exp
    (1) exp -> . ID ASG exp
    (2) exp -> . ID USG
    (3) exp -> . exp + exp
    (4) exp -> . exp - exp
    (5) exp -> . exp * exp
    (6) exp -> . exp DIV exp
    (7) exp -> . exp POW exp
    (8) exp -> . exp or exp
    (9) exp -> . exp xor exp
    (10) exp -> . exp and exp
    (13) exp -> . cmp
    (14) exp -> . ( exp )
    (15) exp -> . ID
    (16) exp -> . + exp
    (17) exp -> . - exp
    (18) exp -> . not exp
    (19) exp -> . SYS exp
    (23) exp -> . { seq }
    (24) exp -> . exp imag
    (25) exp -> . NUM
    (11) cmp -> . exp CMP exp
    (12) cmp -> . cmp CMP exp

    ID              shift and go to state 2
    (               shift and go to state 6
    +               shift and go to state 3
    -               shift and go to state 4
    not             shift and go to state 7
    SYS             shift and go to state 8
    {               shift and go to state 9
    NUM             shift and go to state 10

    exp                            shift and go to state 27
    cmp                            shift and go to state 5

state 8

    (19) exp -> SYS . exp
    (1) exp -> . ID ASG exp
    (2) exp -> . ID USG
    (3) exp -> . exp + exp
    (4) exp -> . exp - exp
    (5) exp -> . exp * exp
    (6) exp -> . exp DIV exp
    (7) exp -> . exp POW exp
    (8) exp -> . exp or exp
    (9) exp -> . exp xor exp
    (10) exp -> . exp and exp
    (13) exp -> . cmp
    (14) exp -> . ( exp )
    (15) exp -> . ID
    (16) exp -> . + exp
    (17) exp -> . - exp
    (18) exp -> . not exp
    (19) exp -> . SYS exp
    (23) exp -> . { seq }
    (24) exp -> . exp imag
    (25) exp -> . NUM
    (11) cmp -> . exp CMP exp
    (12) cmp -> . cmp CMP exp

    ID              shift and go to state 2
    (               shift and go to state 6
    +               shift and go to state 3
    -               shift and go to state 4
    not             shift and go to state 7
    SYS             shift and go to state 8
    {               shift and go to state 9
    NUM             shift and go to state 10

    exp                            shift and go to state 28
    cmp                            shift and go to state 5

state 9

    (23) exp -> { . seq }
    (20) seq -> . exp ; seq
    (21) seq -> . exp ;
    (22) seq -> . exp
    (1) exp -> . ID ASG exp
    (2) exp -> . ID USG
    (3) exp -> . exp + exp
    (4) exp -> . exp - exp
    (5) exp -> . exp * exp
    (6) exp -> . exp DIV exp
    (7) exp -> . exp POW exp
    (8) exp -> . exp or exp
    (9) exp -> . exp xor exp
    (10) exp -> . exp and exp
    (13) exp -> . cmp
    (14) exp -> . ( exp )
    (15) exp -> . ID
    (16) exp -> . + exp
    (17) exp -> . - exp
    (18) exp -> . not exp
    (19) exp -> . SYS exp
    (23) exp -> . { seq }
    (24) exp -> . exp imag
    (25) exp -> . NUM
    (11) cmp -> . exp CMP exp
    (12) cmp -> . cmp CMP exp

    ID              shift and go to state 2
    (               shift and go to state 6
    +               shift and go to state 3
    -               shift and go to state 4
    not             shift and go to state 7
    SYS             shift and go to state 8
    {               shift and go to state 9
    NUM             shift and go to state 10

    seq                            shift and go to state 29
    exp                            shift and go to state 30
    cmp                            shift and go to state 5

state 10

    (25) exp -> NUM .

    +               reduce using rule 25 (exp -> NUM .)
    -               reduce using rule 25 (exp -> NUM .)
    *               reduce using rule 25 (exp -> NUM .)
    DIV             reduce using rule 25 (exp -> NUM .)
    POW             reduce using rule 25 (exp -> NUM .)
    or              reduce using rule 25 (exp -> NUM .)
    xor             reduce using rule 25 (exp -> NUM .)
    and             reduce using rule 25 (exp -> NUM .)
    imag            reduce using rule 25 (exp -> NUM .)
    CMP             reduce using rule 25 (exp -> NUM .)
    $end            reduce using rule 25 (exp -> NUM .)
    )               reduce using rule 25 (exp -> NUM .)
    ;               reduce using rule 25 (exp -> NUM .)
    }               reduce using rule 25 (exp -> NUM .)


state 11

    (3) exp -> exp + . exp
    (1) exp -> . ID ASG exp
    (2) exp -> . ID USG
    (3) exp -> . exp + exp
    (4) exp -> . exp - exp
    (5) exp -> . exp * exp
    (6) exp -> . exp DIV exp
    (7) exp -> . exp POW exp
    (8) exp -> . exp or exp
    (9) exp -> . exp xor exp
    (10) exp -> . exp and exp
    (13) exp -> . cmp
    (14) exp -> . ( exp )
    (15) exp -> . ID
    (16) exp -> . + exp
    (17) exp -> . - exp
    (18) exp -> . not exp
    (19) exp -> . SYS exp
    (23) exp -> . { seq }
    (24) exp -> . exp imag
    (25) exp -> . NUM
    (11) cmp -> . exp CMP exp
    (12) cmp -> . cmp CMP exp

    ID              shift and go to state 2
    (               shift and go to state 6
    +               shift and go to state 3
    -               shift and go to state 4
    not             shift and go to state 7
    SYS             shift and go to state 8
    {               shift and go to state 9
    NUM             shift and go to state 10

    exp                            shift and go to state 31
    cmp                            shift and go to state 5

state 12

    (4) exp -> exp - . exp
    (1) exp -> . ID ASG exp
    (2) exp -> . ID USG
    (3) exp -> . exp + exp
    (4) exp -> . exp - exp
    (5) exp -> . exp * exp
    (6) exp -> . exp DIV exp
    (7) exp -> . exp POW exp
    (8) exp -> . exp or exp
    (9) exp -> . exp xor exp
    (10) exp -> . exp and exp
    (13) exp -> . cmp
    (14) exp -> . ( exp )
    (15) exp -> . ID
    (16) exp -> . + exp
    (17) exp -> . - exp
    (18) exp -> . not exp
    (19) exp -> . SYS exp
    (23) exp -> . { seq }
    (24) exp -> . exp imag
    (25) exp -> . NUM
    (11) cmp -> . exp CMP exp
    (12) cmp -> . cmp CMP exp

    ID              shift and go to state 2
    (               shift and go to state 6
    +               shift and go to state 3
    -               shift and go to state 4
    not             shift and go to state 7
    SYS             shift and go to state 8
    {               shift and go to state 9
    NUM             shift and go to state 10

    exp                            shift and go to state 32
    cmp                            shift and go to state 5

state 13

    (5) exp -> exp * . exp
    (1) exp -> . ID ASG exp
    (2) exp -> . ID USG
    (3) exp -> . exp + exp
    (4) exp -> . exp - exp
    (5) exp -> . exp * exp
    (6) exp -> . exp DIV exp
    (7) exp -> . exp POW exp
    (8) exp -> . exp or exp
    (9) exp -> . exp xor exp
    (10) exp -> . exp and exp
    (13) exp -> . cmp
    (14) exp -> . ( exp )
    (15) exp -> . ID
    (16) exp -> . + exp
    (17) exp -> . - exp
    (18) exp -> . not exp
    (19) exp -> . SYS exp
    (23) exp -> . { seq }
    (24) exp -> . exp imag
    (25) exp -> . NUM
    (11) cmp -> . exp CMP exp
    (12) cmp -> . cmp CMP exp

    ID              shift and go to state 2
    (               shift and go to state 6
    +               shift and go to state 3
    -               shift and go to state 4
    not             shift and go to state 7
    SYS             shift and go to state 8
    {               shift and go to state 9
    NUM             shift and go to state 10

    exp                            shift and go to state 33
    cmp                            shift and go to state 5

state 14

    (6) exp -> exp DIV . exp
    (1) exp -> . ID ASG exp
    (2) exp -> . ID USG
    (3) exp -> . exp + exp
    (4) exp -> . exp - exp
    (5) exp -> . exp * exp
    (6) exp -> . exp DIV exp
    (7) exp -> . exp POW exp
    (8) exp -> . exp or exp
    (9) exp -> . exp xor exp
    (10) exp -> . exp and exp
    (13) exp -> . cmp
    (14) exp -> . ( exp )
    (15) exp -> . ID
    (16) exp -> . + exp
    (17) exp -> . - exp
    (18) exp -> . not exp
    (19) exp -> . SYS exp
    (23) exp -> . { seq }
    (24) exp -> . exp imag
    (25) exp -> . NUM
    (11) cmp -> . exp CMP exp
    (12) cmp -> . cmp CMP exp

    ID              shift and go to state 2
    (               shift and go to state 6
    +               shift and go to state 3
    -               shift and go to state 4
    not             shift and go to state 7
    SYS             shift and go to state 8
    {               shift and go to state 9
    NUM             shift and go to state 10

    exp                            shift and go to state 34
    cmp                            shift and go to state 5

state 15

    (7) exp -> exp POW . exp
    (1) exp -> . ID ASG exp
    (2) exp -> . ID USG
    (3) exp -> . exp + exp
    (4) exp -> . exp - exp
    (5) exp -> . exp * exp
    (6) exp -> . exp DIV exp
    (7) exp -> . exp POW exp
    (8) exp -> . exp or exp
    (9) exp -> . exp xor exp
    (10) exp -> . exp and exp
    (13) exp -> . cmp
    (14) exp -> . ( exp )
    (15) exp -> . ID
    (16) exp -> . + exp
    (17) exp -> . - exp
    (18) exp -> . not exp
    (19) exp -> . SYS exp
    (23) exp -> . { seq }
    (24) exp -> . exp imag
    (25) exp -> . NUM
    (11) cmp -> . exp CMP exp
    (12) cmp -> . cmp CMP exp

    ID              shift and go to state 2
    (               shift and go to state 6
    +               shift and go to state 3
    -               shift and go to state 4
    not             shift and go to state 7
    SYS             shift and go to state 8
    {               shift and go to state 9
    NUM             shift and go to state 10

    exp                            shift and go to state 35
    cmp                            shift and go to state 5

state 16

    (8) exp -> exp or . exp
    (1) exp -> . ID ASG exp
    (2) exp -> . ID USG
    (3) exp -> . exp + exp
    (4) exp -> . exp - exp
    (5) exp -> . exp * exp
    (6) exp -> . exp DIV exp
    (7) exp -> . exp POW exp
    (8) exp -> . exp or exp
    (9) exp -> . exp xor exp
    (10) exp -> . exp and exp
    (13) exp -> . cmp
    (14) exp -> . ( exp )
    (15) exp -> . ID
    (16) exp -> . + exp
    (17) exp -> . - exp
    (18) exp -> . not exp
    (19) exp -> . SYS exp
    (23) exp -> . { seq }
    (24) exp -> . exp imag
    (25) exp -> . NUM
    (11) cmp -> . exp CMP exp
    (12) cmp -> . cmp CMP exp

    ID              shift and go to state 2
    (               shift and go to state 6
    +               shift and go to state 3
    -               shift and go to state 4
    not             shift and go to state 7
    SYS             shift and go to state 8
    {               shift and go to state 9
    NUM             shift and go to state 10

    exp                            shift and go to state 36
    cmp                            shift and go to state 5

state 17

    (9) exp -> exp xor . exp
    (1) exp -> . ID ASG exp
    (2) exp -> . ID USG
    (3) exp -> . exp + exp
    (4) exp -> . exp - exp
    (5) exp -> . exp * exp
    (6) exp -> . exp DIV exp
    (7) exp -> . exp POW exp
    (8) exp -> . exp or exp
    (9) exp -> . exp xor exp
    (10) exp -> . exp and exp
    (13) exp -> . cmp
    (14) exp -> . ( exp )
    (15) exp -> . ID
    (16) exp -> . + exp
    (17) exp -> . - exp
    (18) exp -> . not exp
    (19) exp -> . SYS exp
    (23) exp -> . { seq }
    (24) exp -> . exp imag
    (25) exp -> . NUM
    (11) cmp -> . exp CMP exp
    (12) cmp -> . cmp CMP exp

    ID              shift and go to state 2
    (               shift and go to state 6
    +               shift and go to state 3
    -               shift and go to state 4
    not             shift and go to state 7
    SYS             shift and go to state 8
    {               shift and go to state 9
    NUM             shift and go to state 10

    exp                            shift and go to state 37
    cmp                            shift and go to state 5

state 18

    (10) exp -> exp and . exp
    (1) exp -> . ID ASG exp
    (2) exp -> . ID USG
    (3) exp -> . exp + exp
    (4) exp -> . exp - exp
    (5) exp -> . exp * exp
    (6) exp -> . exp DIV exp
    (7) exp -> . exp POW exp
    (8) exp -> . exp or exp
    (9) exp -> . exp xor exp
    (10) exp -> . exp and exp
    (13) exp -> . cmp
    (14) exp -> . ( exp )
    (15) exp -> . ID
    (16) exp -> . + exp
    (17) exp -> . - exp
    (18) exp -> . not exp
    (19) exp -> . SYS exp
    (23) exp -> . { seq }
    (24) exp -> . exp imag
    (25) exp -> . NUM
    (11) cmp -> . exp CMP exp
    (12) cmp -> . cmp CMP exp

    ID              shift and go to state 2
    (               shift and go to state 6
    +               shift and go to state 3
    -               shift and go to state 4
    not             shift and go to state 7
    SYS             shift and go to state 8
    {               shift and go to state 9
    NUM             shift and go to state 10

    exp                            shift and go to state 38
    cmp                            shift and go to state 5

state 19

    (24) exp -> exp imag .

    +               reduce using rule 24 (exp -> exp imag .)
    -               reduce using rule 24 (exp -> exp imag .)
    *               reduce using rule 24 (exp -> exp imag .)
    DIV             reduce using rule 24 (exp -> exp imag .)
    POW             reduce using rule 24 (exp -> exp imag .)
    or              reduce using rule 24 (exp -> exp imag .)
    xor             reduce using rule 24 (exp -> exp imag .)
    and             reduce using rule 24 (exp -> exp imag .)
    imag            reduce using rule 24 (exp -> exp imag .)
    CMP             reduce using rule 24 (exp -> exp imag .)
    $end            reduce using rule 24 (exp -> exp imag .)
    )               reduce using rule 24 (exp -> exp imag .)
    ;               reduce using rule 24 (exp -> exp imag .)
    }               reduce using rule 24 (exp -> exp imag .)


state 20

    (11) cmp -> exp CMP . exp
    (1) exp -> . ID ASG exp
    (2) exp -> . ID USG
    (3) exp -> . exp + exp
    (4) exp -> . exp - exp
    (5) exp -> . exp * exp
    (6) exp -> . exp DIV exp
    (7) exp -> . exp POW exp
    (8) exp -> . exp or exp
    (9) exp -> . exp xor exp
    (10) exp -> . exp and exp
    (13) exp -> . cmp
    (14) exp -> . ( exp )
    (15) exp -> . ID
    (16) exp -> . + exp
    (17) exp -> . - exp
    (18) exp -> . not exp
    (19) exp -> . SYS exp
    (23) exp -> . { seq }
    (24) exp -> . exp imag
    (25) exp -> . NUM
    (11) cmp -> . exp CMP exp
    (12) cmp -> . cmp CMP exp

    ID              shift and go to state 2
    (               shift and go to state 6
    +               shift and go to state 3
    -               shift and go to state 4
    not             shift and go to state 7
    SYS             shift and go to state 8
    {               shift and go to state 9
    NUM             shift and go to state 10

    exp                            shift and go to state 39
    cmp                            shift and go to state 5

state 21

    (1) exp -> ID ASG . exp
    (1) exp -> . ID ASG exp
    (2) exp -> . ID USG
    (3) exp -> . exp + exp
    (4) exp -> . exp - exp
    (5) exp -> . exp * exp
    (6) exp -> . exp DIV exp
    (7) exp -> . exp POW exp
    (8) exp -> . exp or exp
    (9) exp -> . exp xor exp
    (10) exp -> . exp and exp
    (13) exp -> . cmp
    (14) exp -> . ( exp )
    (15) exp -> . ID
    (16) exp -> . + exp
    (17) exp -> . - exp
    (18) exp -> . not exp
    (19) exp -> . SYS exp
    (23) exp -> . { seq }
    (24) exp -> . exp imag
    (25) exp -> . NUM
    (11) cmp -> . exp CMP exp
    (12) cmp -> . cmp CMP exp

    ID              shift and go to state 2
    (               shift and go to state 6
    +               shift and go to state 3
    -               shift and go to state 4
    not             shift and go to state 7
    SYS             shift and go to state 8
    {               shift and go to state 9
    NUM             shift and go to state 10

    exp                            shift and go to state 40
    cmp                            shift and go to state 5

state 22

    (2) exp -> ID USG .

    +               reduce using rule 2 (exp -> ID USG .)
    -               reduce using rule 2 (exp -> ID USG .)
    *               reduce using rule 2 (exp -> ID USG .)
    DIV             reduce using rule 2 (exp -> ID USG .)
    POW             reduce using rule 2 (exp -> ID USG .)
    or              reduce using rule 2 (exp -> ID USG .)
    xor             reduce using rule 2 (exp -> ID USG .)
    and             reduce using rule 2 (exp -> ID USG .)
    imag            reduce using rule 2 (exp -> ID USG .)
    CMP             reduce using rule 2 (exp -> ID USG .)
    $end            reduce using rule 2 (exp -> ID USG .)
    )               reduce using rule 2 (exp -> ID USG .)
    ;               reduce using rule 2 (exp -> ID USG .)
    }               reduce using rule 2 (exp -> ID USG .)


state 23

    (16) exp -> + exp .
    (3) exp -> exp . + exp
    (4) exp -> exp . - exp
    (5) exp -> exp . * exp
    (6) exp -> exp . DIV exp
    (7) exp -> exp . POW exp
    (8) exp -> exp . or exp
    (9) exp -> exp . xor exp
    (10) exp -> exp . and exp
    (24) exp -> exp . imag
    (11) cmp -> exp . CMP exp

    +               reduce using rule 16 (exp -> + exp .)
    -               reduce using rule 16 (exp -> + exp .)
    or              reduce using rule 16 (exp -> + exp .)
    xor             reduce using rule 16 (exp -> + exp .)
    and             reduce using rule 16 (exp -> + exp .)
    CMP             reduce using rule 16 (exp -> + exp .)
    $end            reduce using rule 16 (exp -> + exp .)
    )               reduce using rule 16 (exp -> + exp .)
    ;               reduce using rule 16 (exp -> + exp .)
    }               reduce using rule 16 (exp -> + exp .)
    *               shift and go to state 13
    DIV             shift and go to state 14
    POW             shift and go to state 15
    imag            shift and go to state 19

  ! *               [ reduce using rule 16 (exp -> + exp .) ]
  ! DIV             [ reduce using rule 16 (exp -> + exp .) ]
  ! POW             [ reduce using rule 16 (exp -> + exp .) ]
  ! imag            [ reduce using rule 16 (exp -> + exp .) ]
  ! +               [ shift and go to state 11 ]
  ! -               [ shift and go to state 12 ]
  ! or              [ shift and go to state 16 ]
  ! xor             [ shift and go to state 17 ]
  ! and             [ shift and go to state 18 ]
  ! CMP             [ shift and go to state 20 ]


state 24

    (17) exp -> - exp .
    (3) exp -> exp . + exp
    (4) exp -> exp . - exp
    (5) exp -> exp . * exp
    (6) exp -> exp . DIV exp
    (7) exp -> exp . POW exp
    (8) exp -> exp . or exp
    (9) exp -> exp . xor exp
    (10) exp -> exp . and exp
    (24) exp -> exp . imag
    (11) cmp -> exp . CMP exp

    +               reduce using rule 17 (exp -> - exp .)
    -               reduce using rule 17 (exp -> - exp .)
    or              reduce using rule 17 (exp -> - exp .)
    xor             reduce using rule 17 (exp -> - exp .)
    and             reduce using rule 17 (exp -> - exp .)
    CMP             reduce using rule 17 (exp -> - exp .)
    $end            reduce using rule 17 (exp -> - exp .)
    )               reduce using rule 17 (exp -> - exp .)
    ;               reduce using rule 17 (exp -> - exp .)
    }               reduce using rule 17 (exp -> - exp .)
    *               shift and go to state 13
    DIV             shift and go to state 14
    POW             shift and go to state 15
    imag            shift and go to state 19

  ! *               [ reduce using rule 17 (exp -> - exp .) ]
  ! DIV             [ reduce using rule 17 (exp -> - exp .) ]
  ! POW             [ reduce using rule 17 (exp -> - exp .) ]
  ! imag            [ reduce using rule 17 (exp -> - exp .) ]
  ! +               [ shift and go to state 11 ]
  ! -               [ shift and go to state 12 ]
  ! or              [ shift and go to state 16 ]
  ! xor             [ shift and go to state 17 ]
  ! and             [ shift and go to state 18 ]
  ! CMP             [ shift and go to state 20 ]


state 25

    (12) cmp -> cmp CMP . exp
    (1) exp -> . ID ASG exp
    (2) exp -> . ID USG
    (3) exp -> . exp + exp
    (4) exp -> . exp - exp
    (5) exp -> . exp * exp
    (6) exp -> . exp DIV exp
    (7) exp -> . exp POW exp
    (8) exp -> . exp or exp
    (9) exp -> . exp xor exp
    (10) exp -> . exp and exp
    (13) exp -> . cmp
    (14) exp -> . ( exp )
    (15) exp -> . ID
    (16) exp -> . + exp
    (17) exp -> . - exp
    (18) exp -> . not exp
    (19) exp -> . SYS exp
    (23) exp -> . { seq }
    (24) exp -> . exp imag
    (25) exp -> . NUM
    (11) cmp -> . exp CMP exp
    (12) cmp -> . cmp CMP exp

    ID              shift and go to state 2
    (               shift and go to state 6
    +               shift and go to state 3
    -               shift and go to state 4
    not             shift and go to state 7
    SYS             shift and go to state 8
    {               shift and go to state 9
    NUM             shift and go to state 10

    cmp                            shift and go to state 5
    exp                            shift and go to state 41

state 26

    (14) exp -> ( exp . )
    (3) exp -> exp . + exp
    (4) exp -> exp . - exp
    (5) exp -> exp . * exp
    (6) exp -> exp . DIV exp
    (7) exp -> exp . POW exp
    (8) exp -> exp . or exp
    (9) exp -> exp . xor exp
    (10) exp -> exp . and exp
    (24) exp -> exp . imag
    (11) cmp -> exp . CMP exp

    )               shift and go to state 42
    +               shift and go to state 11
    -               shift and go to state 12
    *               shift and go to state 13
    DIV             shift and go to state 14
    POW             shift and go to state 15
    or              shift and go to state 16
    xor             shift and go to state 17
    and             shift and go to state 18
    imag            shift and go to state 19
    CMP             shift and go to state 20


state 27

    (18) exp -> not exp .
    (3) exp -> exp . + exp
    (4) exp -> exp . - exp
    (5) exp -> exp . * exp
    (6) exp -> exp . DIV exp
    (7) exp -> exp . POW exp
    (8) exp -> exp . or exp
    (9) exp -> exp . xor exp
    (10) exp -> exp . and exp
    (24) exp -> exp . imag
    (11) cmp -> exp . CMP exp

    +               reduce using rule 18 (exp -> not exp .)
    -               reduce using rule 18 (exp -> not exp .)
    *               reduce using rule 18 (exp -> not exp .)
    DIV             reduce using rule 18 (exp -> not exp .)
    POW             reduce using rule 18 (exp -> not exp .)
    or              reduce using rule 18 (exp -> not exp .)
    xor             reduce using rule 18 (exp -> not exp .)
    and             reduce using rule 18 (exp -> not exp .)
    imag            reduce using rule 18 (exp -> not exp .)
    CMP             reduce using rule 18 (exp -> not exp .)
    $end            reduce using rule 18 (exp -> not exp .)
    )               reduce using rule 18 (exp -> not exp .)
    ;               reduce using rule 18 (exp -> not exp .)
    }               reduce using rule 18 (exp -> not exp .)

  ! +               [ shift and go to state 11 ]
  ! -               [ shift and go to state 12 ]
  ! *               [ shift and go to state 13 ]
  ! DIV             [ shift and go to state 14 ]
  ! POW             [ shift and go to state 15 ]
  ! or              [ shift and go to state 16 ]
  ! xor             [ shift and go to state 17 ]
  ! and             [ shift and go to state 18 ]
  ! imag            [ shift and go to state 19 ]
  ! CMP             [ shift and go to state 20 ]


state 28

    (19) exp -> SYS exp .
    (3) exp -> exp . + exp
    (4) exp -> exp . - exp
    (5) exp -> exp . * exp
    (6) exp -> exp . DIV exp
    (7) exp -> exp . POW exp
    (8) exp -> exp . or exp
    (9) exp -> exp . xor exp
    (10) exp -> exp . and exp
    (24) exp -> exp . imag
    (11) cmp -> exp . CMP exp

    $end            reduce using rule 19 (exp -> SYS exp .)
    )               reduce using rule 19 (exp -> SYS exp .)
    ;               reduce using rule 19 (exp -> SYS exp .)
    }               reduce using rule 19 (exp -> SYS exp .)
    +               shift and go to state 11
    -               shift and go to state 12
    *               shift and go to state 13
    DIV             shift and go to state 14
    POW             shift and go to state 15
    or              shift and go to state 16
    xor             shift and go to state 17
    and             shift and go to state 18
    imag            shift and go to state 19
    CMP             shift and go to state 20

  ! +               [ reduce using rule 19 (exp -> SYS exp .) ]
  ! -               [ reduce using rule 19 (exp -> SYS exp .) ]
  ! *               [ reduce using rule 19 (exp -> SYS exp .) ]
  ! DIV             [ reduce using rule 19 (exp -> SYS exp .) ]
  ! POW             [ reduce using rule 19 (exp -> SYS exp .) ]
  ! or              [ reduce using rule 19 (exp -> SYS exp .) ]
  ! xor             [ reduce using rule 19 (exp -> SYS exp .) ]
  ! and             [ reduce using rule 19 (exp -> SYS exp .) ]
  ! imag            [ reduce using rule 19 (exp -> SYS exp .) ]
  ! CMP             [ reduce using rule 19 (exp -> SYS exp .) ]


state 29

    (23) exp -> { seq . }

    }               shift and go to state 43


state 30

    (20) seq -> exp . ; seq
    (21) seq -> exp . ;
    (22) seq -> exp .
    (3) exp -> exp . + exp
    (4) exp -> exp . - exp
    (5) exp -> exp . * exp
    (6) exp -> exp . DIV exp
    (7) exp -> exp . POW exp
    (8) exp -> exp . or exp
    (9) exp -> exp . xor exp
    (10) exp -> exp . and exp
    (24) exp -> exp . imag
    (11) cmp -> exp . CMP exp

    ;               shift and go to state 44
    }               reduce using rule 22 (seq -> exp .)
    +               shift and go to state 11
    -               shift and go to state 12
    *               shift and go to state 13
    DIV             shift and go to state 14
    POW             shift and go to state 15
    or              shift and go to state 16
    xor             shift and go to state 17
    and             shift and go to state 18
    imag            shift and go to state 19
    CMP             shift and go to state 20


state 31

    (3) exp -> exp + exp .
    (3) exp -> exp . + exp
    (4) exp -> exp . - exp
    (5) exp -> exp . * exp
    (6) exp -> exp . DIV exp
    (7) exp -> exp . POW exp
    (8) exp -> exp . or exp
    (9) exp -> exp . xor exp
    (10) exp -> exp . and exp
    (24) exp -> exp . imag
    (11) cmp -> exp . CMP exp

    +               reduce using rule 3 (exp -> exp + exp .)
    -               reduce using rule 3 (exp -> exp + exp .)
    or              reduce using rule 3 (exp -> exp + exp .)
    xor             reduce using rule 3 (exp -> exp + exp .)
    and             reduce using rule 3 (exp -> exp + exp .)
    CMP             reduce using rule 3 (exp -> exp + exp .)
    $end            reduce using rule 3 (exp -> exp + exp .)
    )               reduce using rule 3 (exp -> exp + exp .)
    ;               reduce using rule 3 (exp -> exp + exp .)
    }               reduce using rule 3 (exp -> exp + exp .)
    *               shift and go to state 13
    DIV             shift and go to state 14
    POW             shift and go to state 15
    imag            shift and go to state 19

  ! *               [ reduce using rule 3 (exp -> exp + exp .) ]
  ! DIV             [ reduce using rule 3 (exp -> exp + exp .) ]
  ! POW             [ reduce using rule 3 (exp -> exp + exp .) ]
  ! imag            [ reduce using rule 3 (exp -> exp + exp .) ]
  ! +               [ shift and go to state 11 ]
  ! -               [ shift and go to state 12 ]
  ! or              [ shift and go to state 16 ]
  ! xor             [ shift and go to state 17 ]
  ! and             [ shift and go to state 18 ]
  ! CMP             [ shift and go to state 20 ]


state 32

    (4) exp -> exp - exp .
    (3) exp -> exp . + exp
    (4) exp -> exp . - exp
    (5) exp -> exp . * exp
    (6) exp -> exp . DIV exp
    (7) exp -> exp . POW exp
    (8) exp -> exp . or exp
    (9) exp -> exp . xor exp
    (10) exp -> exp . and exp
    (24) exp -> exp . imag
    (11) cmp -> exp . CMP exp

    +               reduce using rule 4 (exp -> exp - exp .)
    -               reduce using rule 4 (exp -> exp - exp .)
    or              reduce using rule 4 (exp -> exp - exp .)
    xor             reduce using rule 4 (exp -> exp - exp .)
    and             reduce using rule 4 (exp -> exp - exp .)
    CMP             reduce using rule 4 (exp -> exp - exp .)
    $end            reduce using rule 4 (exp -> exp - exp .)
    )               reduce using rule 4 (exp -> exp - exp .)
    ;               reduce using rule 4 (exp -> exp - exp .)
    }               reduce using rule 4 (exp -> exp - exp .)
    *               shift and go to state 13
    DIV             shift and go to state 14
    POW             shift and go to state 15
    imag            shift and go to state 19

  ! *               [ reduce using rule 4 (exp -> exp - exp .) ]
  ! DIV             [ reduce using rule 4 (exp -> exp - exp .) ]
  ! POW             [ reduce using rule 4 (exp -> exp - exp .) ]
  ! imag            [ reduce using rule 4 (exp -> exp - exp .) ]
  ! +               [ shift and go to state 11 ]
  ! -               [ shift and go to state 12 ]
  ! or              [ shift and go to state 16 ]
  ! xor             [ shift and go to state 17 ]
  ! and             [ shift and go to state 18 ]
  ! CMP             [ shift and go to state 20 ]


state 33

    (5) exp -> exp * exp .
    (3) exp -> exp . + exp
    (4) exp -> exp . - exp
    (5) exp -> exp . * exp
    (6) exp -> exp . DIV exp
    (7) exp -> exp . POW exp
    (8) exp -> exp . or exp
    (9) exp -> exp . xor exp
    (10) exp -> exp . and exp
    (24) exp -> exp . imag
    (11) cmp -> exp . CMP exp

    +               reduce using rule 5 (exp -> exp * exp .)
    -               reduce using rule 5 (exp -> exp * exp .)
    *               reduce using rule 5 (exp -> exp * exp .)
    DIV             reduce using rule 5 (exp -> exp * exp .)
    or              reduce using rule 5 (exp -> exp * exp .)
    xor             reduce using rule 5 (exp -> exp * exp .)
    and             reduce using rule 5 (exp -> exp * exp .)
    CMP             reduce using rule 5 (exp -> exp * exp .)
    $end            reduce using rule 5 (exp -> exp * exp .)
    )               reduce using rule 5 (exp -> exp * exp .)
    ;               reduce using rule 5 (exp -> exp * exp .)
    }               reduce using rule 5 (exp -> exp * exp .)
    POW             shift and go to state 15
    imag            shift and go to state 19

  ! POW             [ reduce using rule 5 (exp -> exp * exp .) ]
  ! imag            [ reduce using rule 5 (exp -> exp * exp .) ]
  ! +               [ shift and go to state 11 ]
  ! -               [ shift and go to state 12 ]
  ! *               [ shift and go to state 13 ]
  ! DIV             [ shift and go to state 14 ]
  ! or              [ shift and go to state 16 ]
  ! xor             [ shift and go to state 17 ]
  ! and             [ shift and go to state 18 ]
  ! CMP             [ shift and go to state 20 ]


state 34

    (6) exp -> exp DIV exp .
    (3) exp -> exp . + exp
    (4) exp -> exp . - exp
    (5) exp -> exp . * exp
    (6) exp -> exp . DIV exp
    (7) exp -> exp . POW exp
    (8) exp -> exp . or exp
    (9) exp -> exp . xor exp
    (10) exp -> exp . and exp
    (24) exp -> exp . imag
    (11) cmp -> exp . CMP exp

    +               reduce using rule 6 (exp -> exp DIV exp .)
    -               reduce using rule 6 (exp -> exp DIV exp .)
    *               reduce using rule 6 (exp -> exp DIV exp .)
    DIV             reduce using rule 6 (exp -> exp DIV exp .)
    or              reduce using rule 6 (exp -> exp DIV exp .)
    xor             reduce using rule 6 (exp -> exp DIV exp .)
    and             reduce using rule 6 (exp -> exp DIV exp .)
    CMP             reduce using rule 6 (exp -> exp DIV exp .)
    $end            reduce using rule 6 (exp -> exp DIV exp .)
    )               reduce using rule 6 (exp -> exp DIV exp .)
    ;               reduce using rule 6 (exp -> exp DIV exp .)
    }               reduce using rule 6 (exp -> exp DIV exp .)
    POW             shift and go to state 15
    imag            shift and go to state 19

  ! POW             [ reduce using rule 6 (exp -> exp DIV exp .) ]
  ! imag            [ reduce using rule 6 (exp -> exp DIV exp .) ]
  ! +               [ shift and go to state 11 ]
  ! -               [ shift and go to state 12 ]
  ! *               [ shift and go to state 13 ]
  ! DIV             [ shift and go to state 14 ]
  ! or              [ shift and go to state 16 ]
  ! xor             [ shift and go to state 17 ]
  ! and             [ shift and go to state 18 ]
  ! CMP             [ shift and go to state 20 ]


state 35

    (7) exp -> exp POW exp .
    (3) exp -> exp . + exp
    (4) exp -> exp . - exp
    (5) exp -> exp . * exp
    (6) exp -> exp . DIV exp
    (7) exp -> exp . POW exp
    (8) exp -> exp . or exp
    (9) exp -> exp . xor exp
    (10) exp -> exp . and exp
    (24) exp -> exp . imag
    (11) cmp -> exp . CMP exp

    +               reduce using rule 7 (exp -> exp POW exp .)
    -               reduce using rule 7 (exp -> exp POW exp .)
    *               reduce using rule 7 (exp -> exp POW exp .)
    DIV             reduce using rule 7 (exp -> exp POW exp .)
    or              reduce using rule 7 (exp -> exp POW exp .)
    xor             reduce using rule 7 (exp -> exp POW exp .)
    and             reduce using rule 7 (exp -> exp POW exp .)
    CMP             reduce using rule 7 (exp -> exp POW exp .)
    $end            reduce using rule 7 (exp -> exp POW exp .)
    )               reduce using rule 7 (exp -> exp POW exp .)
    ;               reduce using rule 7 (exp -> exp POW exp .)
    }               reduce using rule 7 (exp -> exp POW exp .)
    POW             shift and go to state 15
    imag            shift and go to state 19

  ! POW             [ reduce using rule 7 (exp -> exp POW exp .) ]
  ! imag            [ reduce using rule 7 (exp -> exp POW exp .) ]
  ! +               [ shift and go to state 11 ]
  ! -               [ shift and go to state 12 ]
  ! *               [ shift and go to state 13 ]
  ! DIV             [ shift and go to state 14 ]
  ! or              [ shift and go to state 16 ]
  ! xor             [ shift and go to state 17 ]
  ! and             [ shift and go to state 18 ]
  ! CMP             [ shift and go to state 20 ]


state 36

    (8) exp -> exp or exp .
    (3) exp -> exp . + exp
    (4) exp -> exp . - exp
    (5) exp -> exp . * exp
    (6) exp -> exp . DIV exp
    (7) exp -> exp . POW exp
    (8) exp -> exp . or exp
    (9) exp -> exp . xor exp
    (10) exp -> exp . and exp
    (24) exp -> exp . imag
    (11) cmp -> exp . CMP exp

    or              reduce using rule 8 (exp -> exp or exp .)
    $end            reduce using rule 8 (exp -> exp or exp .)
    )               reduce using rule 8 (exp -> exp or exp .)
    ;               reduce using rule 8 (exp -> exp or exp .)
    }               reduce using rule 8 (exp -> exp or exp .)
    +               shift and go to state 11
    -               shift and go to state 12
    *               shift and go to state 13
    DIV             shift and go to state 14
    POW             shift and go to state 15
    xor             shift and go to state 17
    and             shift and go to state 18
    imag            shift and go to state 19
    CMP             shift and go to state 20

  ! +               [ reduce using rule 8 (exp -> exp or exp .) ]
  ! -               [ reduce using rule 8 (exp -> exp or exp .) ]
  ! *               [ reduce using rule 8 (exp -> exp or exp .) ]
  ! DIV             [ reduce using rule 8 (exp -> exp or exp .) ]
  ! POW             [ reduce using rule 8 (exp -> exp or exp .) ]
  ! xor             [ reduce using rule 8 (exp -> exp or exp .) ]
  ! and             [ reduce using rule 8 (exp -> exp or exp .) ]
  ! imag            [ reduce using rule 8 (exp -> exp or exp .) ]
  ! CMP             [ reduce using rule 8 (exp -> exp or exp .) ]
  ! or              [ shift and go to state 16 ]


state 37

    (9) exp -> exp xor exp .
    (3) exp -> exp . + exp
    (4) exp -> exp . - exp
    (5) exp -> exp . * exp
    (6) exp -> exp . DIV exp
    (7) exp -> exp . POW exp
    (8) exp -> exp . or exp
    (9) exp -> exp . xor exp
    (10) exp -> exp . and exp
    (24) exp -> exp . imag
    (11) cmp -> exp . CMP exp

    or              reduce using rule 9 (exp -> exp xor exp .)
    xor             reduce using rule 9 (exp -> exp xor exp .)
    $end            reduce using rule 9 (exp -> exp xor exp .)
    )               reduce using rule 9 (exp -> exp xor exp .)
    ;               reduce using rule 9 (exp -> exp xor exp .)
    }               reduce using rule 9 (exp -> exp xor exp .)
    +               shift and go to state 11
    -               shift and go to state 12
    *               shift and go to state 13
    DIV             shift and go to state 14
    POW             shift and go to state 15
    and             shift and go to state 18
    imag            shift and go to state 19
    CMP             shift and go to state 20

  ! +               [ reduce using rule 9 (exp -> exp xor exp .) ]
  ! -               [ reduce using rule 9 (exp -> exp xor exp .) ]
  ! *               [ reduce using rule 9 (exp -> exp xor exp .) ]
  ! DIV             [ reduce using rule 9 (exp -> exp xor exp .) ]
  ! POW             [ reduce using rule 9 (exp -> exp xor exp .) ]
  ! and             [ reduce using rule 9 (exp -> exp xor exp .) ]
  ! imag            [ reduce using rule 9 (exp -> exp xor exp .) ]
  ! CMP             [ reduce using rule 9 (exp -> exp xor exp .) ]
  ! or              [ shift and go to state 16 ]
  ! xor             [ shift and go to state 17 ]


state 38

    (10) exp -> exp and exp .
    (3) exp -> exp . + exp
    (4) exp -> exp . - exp
    (5) exp -> exp . * exp
    (6) exp -> exp . DIV exp
    (7) exp -> exp . POW exp
    (8) exp -> exp . or exp
    (9) exp -> exp . xor exp
    (10) exp -> exp . and exp
    (24) exp -> exp . imag
    (11) cmp -> exp . CMP exp

    or              reduce using rule 10 (exp -> exp and exp .)
    xor             reduce using rule 10 (exp -> exp and exp .)
    and             reduce using rule 10 (exp -> exp and exp .)
    $end            reduce using rule 10 (exp -> exp and exp .)
    )               reduce using rule 10 (exp -> exp and exp .)
    ;               reduce using rule 10 (exp -> exp and exp .)
    }               reduce using rule 10 (exp -> exp and exp .)
    +               shift and go to state 11
    -               shift and go to state 12
    *               shift and go to state 13
    DIV             shift and go to state 14
    POW             shift and go to state 15
    imag            shift and go to state 19
    CMP             shift and go to state 20

  ! +               [ reduce using rule 10 (exp -> exp and exp .) ]
  ! -               [ reduce using rule 10 (exp -> exp and exp .) ]
  ! *               [ reduce using rule 10 (exp -> exp and exp .) ]
  ! DIV             [ reduce using rule 10 (exp -> exp and exp .) ]
  ! POW             [ reduce using rule 10 (exp -> exp and exp .) ]
  ! imag            [ reduce using rule 10 (exp -> exp and exp .) ]
  ! CMP             [ reduce using rule 10 (exp -> exp and exp .) ]
  ! or              [ shift and go to state 16 ]
  ! xor             [ shift and go to state 17 ]
  ! and             [ shift and go to state 18 ]


state 39

    (11) cmp -> exp CMP exp .
    (3) exp -> exp . + exp
    (4) exp -> exp . - exp
    (5) exp -> exp . * exp
    (6) exp -> exp . DIV exp
    (7) exp -> exp . POW exp
    (8) exp -> exp . or exp
    (9) exp -> exp . xor exp
    (10) exp -> exp . and exp
    (24) exp -> exp . imag
    (11) cmp -> exp . CMP exp

    CMP             reduce using rule 11 (cmp -> exp CMP exp .)
    or              reduce using rule 11 (cmp -> exp CMP exp .)
    xor             reduce using rule 11 (cmp -> exp CMP exp .)
    and             reduce using rule 11 (cmp -> exp CMP exp .)
    $end            reduce using rule 11 (cmp -> exp CMP exp .)
    )               reduce using rule 11 (cmp -> exp CMP exp .)
    ;               reduce using rule 11 (cmp -> exp CMP exp .)
    }               reduce using rule 11 (cmp -> exp CMP exp .)
    +               shift and go to state 11
    -               shift and go to state 12
    *               shift and go to state 13
    DIV             shift and go to state 14
    POW             shift and go to state 15
    imag            shift and go to state 19

  ! +               [ reduce using rule 11 (cmp -> exp CMP exp .) ]
  ! -               [ reduce using rule 11 (cmp -> exp CMP exp .) ]
  ! *               [ reduce using rule 11 (cmp -> exp CMP exp .) ]
  ! DIV             [ reduce using rule 11 (cmp -> exp CMP exp .) ]
  ! POW             [ reduce using rule 11 (cmp -> exp CMP exp .) ]
  ! imag            [ reduce using rule 11 (cmp -> exp CMP exp .) ]
  ! or              [ shift and go to state 16 ]
  ! xor             [ shift and go to state 17 ]
  ! and             [ shift and go to state 18 ]
  ! CMP             [ shift and go to state 20 ]


state 40

    (1) exp -> ID ASG exp .
    (3) exp -> exp . + exp
    (4) exp -> exp . - exp
    (5) exp -> exp . * exp
    (6) exp -> exp . DIV exp
    (7) exp -> exp . POW exp
    (8) exp -> exp . or exp
    (9) exp -> exp . xor exp
    (10) exp -> exp . and exp
    (24) exp -> exp . imag
    (11) cmp -> exp . CMP exp

    $end            reduce using rule 1 (exp -> ID ASG exp .)
    )               reduce using rule 1 (exp -> ID ASG exp .)
    ;               reduce using rule 1 (exp -> ID ASG exp .)
    }               reduce using rule 1 (exp -> ID ASG exp .)
    +               shift and go to state 11
    -               shift and go to state 12
    *               shift and go to state 13
    DIV             shift and go to state 14
    POW             shift and go to state 15
    or              shift and go to state 16
    xor             shift and go to state 17
    and             shift and go to state 18
    imag            shift and go to state 19
    CMP             shift and go to state 20

  ! +               [ reduce using rule 1 (exp -> ID ASG exp .) ]
  ! -               [ reduce using rule 1 (exp -> ID ASG exp .) ]
  ! *               [ reduce using rule 1 (exp -> ID ASG exp .) ]
  ! DIV             [ reduce using rule 1 (exp -> ID ASG exp .) ]
  ! POW             [ reduce using rule 1 (exp -> ID ASG exp .) ]
  ! or              [ reduce using rule 1 (exp -> ID ASG exp .) ]
  ! xor             [ reduce using rule 1 (exp -> ID ASG exp .) ]
  ! and             [ reduce using rule 1 (exp -> ID ASG exp .) ]
  ! imag            [ reduce using rule 1 (exp -> ID ASG exp .) ]
  ! CMP             [ reduce using rule 1 (exp -> ID ASG exp .) ]


state 41

    (12) cmp -> cmp CMP exp .
    (3) exp -> exp . + exp
    (4) exp -> exp . - exp
    (5) exp -> exp . * exp
    (6) exp -> exp . DIV exp
    (7) exp -> exp . POW exp
    (8) exp -> exp . or exp
    (9) exp -> exp . xor exp
    (10) exp -> exp . and exp
    (24) exp -> exp . imag
    (11) cmp -> exp . CMP exp

    CMP             reduce using rule 12 (cmp -> cmp CMP exp .)
    or              reduce using rule 12 (cmp -> cmp CMP exp .)
    xor             reduce using rule 12 (cmp -> cmp CMP exp .)
    and             reduce using rule 12 (cmp -> cmp CMP exp .)
    $end            reduce using rule 12 (cmp -> cmp CMP exp .)
    )               reduce using rule 12 (cmp -> cmp CMP exp .)
    ;               reduce using rule 12 (cmp -> cmp CMP exp .)
    }               reduce using rule 12 (cmp -> cmp CMP exp .)
    +               shift and go to state 11
    -               shift and go to state 12
    *               shift and go to state 13
    DIV             shift and go to state 14
    POW             shift and go to state 15
    imag            shift and go to state 19

  ! +               [ reduce using rule 12 (cmp -> cmp CMP exp .) ]
  ! -               [ reduce using rule 12 (cmp -> cmp CMP exp .) ]
  ! *               [ reduce using rule 12 (cmp -> cmp CMP exp .) ]
  ! DIV             [ reduce using rule 12 (cmp -> cmp CMP exp .) ]
  ! POW             [ reduce using rule 12 (cmp -> cmp CMP exp .) ]
  ! imag            [ reduce using rule 12 (cmp -> cmp CMP exp .) ]
  ! or              [ shift and go to state 16 ]
  ! xor             [ shift and go to state 17 ]
  ! and             [ shift and go to state 18 ]
  ! CMP             [ shift and go to state 20 ]


state 42

    (14) exp -> ( exp ) .

    +               reduce using rule 14 (exp -> ( exp ) .)
    -               reduce using rule 14 (exp -> ( exp ) .)
    *               reduce using rule 14 (exp -> ( exp ) .)
    DIV             reduce using rule 14 (exp -> ( exp ) .)
    POW             reduce using rule 14 (exp -> ( exp ) .)
    or              reduce using rule 14 (exp -> ( exp ) .)
    xor             reduce using rule 14 (exp -> ( exp ) .)
    and             reduce using rule 14 (exp -> ( exp ) .)
    imag            reduce using rule 14 (exp -> ( exp ) .)
    CMP             reduce using rule 14 (exp -> ( exp ) .)
    $end            reduce using rule 14 (exp -> ( exp ) .)
    )               reduce using rule 14 (exp -> ( exp ) .)
    ;               reduce using rule 14 (exp -> ( exp ) .)
    }               reduce using rule 14 (exp -> ( exp ) .)


state 43

    (23) exp -> { seq } .

    +               reduce using rule 23 (exp -> { seq } .)
    -               reduce using rule 23 (exp -> { seq } .)
    *               reduce using rule 23 (exp -> { seq } .)
    DIV             reduce using rule 23 (exp -> { seq } .)
    POW             reduce using rule 23 (exp -> { seq } .)
    or              reduce using rule 23 (exp -> { seq } .)
    xor             reduce using rule 23 (exp -> { seq } .)
    and             reduce using rule 23 (exp -> { seq } .)
    imag            reduce using rule 23 (exp -> { seq } .)
    CMP             reduce using rule 23 (exp -> { seq } .)
    $end            reduce using rule 23 (exp -> { seq } .)
    )               reduce using rule 23 (exp -> { seq } .)
    ;               reduce using rule 23 (exp -> { seq } .)
    }               reduce using rule 23 (exp -> { seq } .)


state 44

    (20) seq -> exp ; . seq
    (21) seq -> exp ; .
    (20) seq -> . exp ; seq
    (21) seq -> . exp ;
    (22) seq -> . exp
    (1) exp -> . ID ASG exp
    (2) exp -> . ID USG
    (3) exp -> . exp + exp
    (4) exp -> . exp - exp
    (5) exp -> . exp * exp
    (6) exp -> . exp DIV exp
    (7) exp -> . exp POW exp
    (8) exp -> . exp or exp
    (9) exp -> . exp xor exp
    (10) exp -> . exp and exp
    (13) exp -> . cmp
    (14) exp -> . ( exp )
    (15) exp -> . ID
    (16) exp -> . + exp
    (17) exp -> . - exp
    (18) exp -> . not exp
    (19) exp -> . SYS exp
    (23) exp -> . { seq }
    (24) exp -> . exp imag
    (25) exp -> . NUM
    (11) cmp -> . exp CMP exp
    (12) cmp -> . cmp CMP exp

    }               reduce using rule 21 (seq -> exp ; .)
    ID              shift and go to state 2
    (               shift and go to state 6
    +               shift and go to state 3
    -               shift and go to state 4
    not             shift and go to state 7
    SYS             shift and go to state 8
    {               shift and go to state 9
    NUM             shift and go to state 10

    exp                            shift and go to state 30
    seq                            shift and go to state 45
    cmp                            shift and go to state 5

state 45

    (20) seq -> exp ; seq .

    }               reduce using rule 20 (seq -> exp ; seq .)

