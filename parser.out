Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> exp
Rule 1     exp -> ID + ASG exp
Rule 2     exp -> ID - ASG exp
Rule 3     exp -> ID USG
Rule 4     exp -> ID * ASG exp
Rule 5     exp -> ID DIV ASG exp
Rule 6     exp -> ID MOD ASG exp
Rule 7     exp -> ID POW ASG exp
Rule 8     exp -> ID OR ASG exp
Rule 9     exp -> ID XOR ASG exp
Rule 10    exp -> ID AND ASG exp
Rule 11    exp -> ID ASG exp
Rule 12    exp -> exp + exp
Rule 13    exp -> exp - exp
Rule 14    exp -> exp * exp
Rule 15    exp -> exp DIV exp
Rule 16    exp -> exp MOD exp
Rule 17    exp -> exp POW exp
Rule 18    exp -> exp OR exp
Rule 19    exp -> exp XOR exp
Rule 20    exp -> exp AND exp
Rule 21    cmp -> exp CMP exp
Rule 22    cmp -> cmp CMP exp
Rule 23    exp -> cmp
Rule 24    ifc -> IF exp : exp
Rule 25    ifc -> IF exp : exp ELSE exp
Rule 26    ifc -> IF exp : exp ELSE ifc
Rule 27    exp -> ifc END
Rule 28    exp -> FOR ID IN it : exp END
Rule 29    exp -> FOR NUM ID IN it : exp END
Rule 30    exp -> ( exp )
Rule 31    exp -> ID
Rule 32    it -> [ exp , exp ]
Rule 33    it -> ] exp , exp ]
Rule 34    it -> [ exp , exp [
Rule 35    it -> ] exp , exp [
Rule 36    exp -> exp IN it
Rule 37    exp -> ID + exp
Rule 38    exp -> ID - exp
Rule 39    exp -> - exp
Rule 40    exp -> ID * exp
Rule 41    exp -> ID DIV exp
Rule 42    exp -> ID MOD exp
Rule 43    exp -> ID POW exp
Rule 44    exp -> ID OR exp
Rule 45    exp -> ID XOR exp
Rule 46    exp -> ID AND exp
Rule 47    exp -> + exp
Rule 48    exp -> NOT exp
Rule 49    exp -> ECHO exp
Rule 50    exp -> LOAD exp
Rule 51    exp -> EVAL exp
Rule 52    seq -> exp ; seq
Rule 53    seq -> exp ;
Rule 54    seq -> exp
Rule 55    exp -> { seq }
Rule 56    exp -> NUM
Rule 57    exp -> STR
Rule 58    exp -> WHILE exp : exp END

Terminals, with rules where they appear

(                    : 30
)                    : 30
*                    : 4 14 40
+                    : 1 12 37 47
,                    : 32 33 34 35
-                    : 2 13 38 39
:                    : 24 25 26 28 29 58
;                    : 52 53
AND                  : 10 20 46
ASG                  : 1 2 4 5 6 7 8 9 10 11
CMP                  : 21 22
DIV                  : 5 15 41
ECHO                 : 49
ELSE                 : 25 26
END                  : 27 28 29 58
EVAL                 : 51
FOR                  : 28 29
ID                   : 1 2 3 4 5 6 7 8 9 10 11 28 29 31 37 38 40 41 42 43 44 45 46
IF                   : 24 25 26
IN                   : 28 29 36
LOAD                 : 50
MOD                  : 6 16 42
NOT                  : 48
NUM                  : 29 56
OR                   : 8 18 44
POW                  : 7 17 43
STR                  : 57
USG                  : 3
WHILE                : 58
XOR                  : 9 19 45
[                    : 32 34 34 35
]                    : 32 33 33 35
error                : 
{                    : 55
}                    : 55

Nonterminals, with rules where they appear

cmp                  : 22 23
exp                  : 1 2 4 5 6 7 8 9 10 11 12 12 13 13 14 14 15 15 16 16 17 17 18 18 19 19 20 20 21 21 22 24 24 25 25 25 26 26 28 29 30 32 32 33 33 34 34 35 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 58 58 0
ifc                  : 26 27
it                   : 28 29 36
seq                  : 52 55

Parsing method: LALR

state 0

    (0) S' -> . exp
    (1) exp -> . ID + ASG exp
    (2) exp -> . ID - ASG exp
    (3) exp -> . ID USG
    (4) exp -> . ID * ASG exp
    (5) exp -> . ID DIV ASG exp
    (6) exp -> . ID MOD ASG exp
    (7) exp -> . ID POW ASG exp
    (8) exp -> . ID OR ASG exp
    (9) exp -> . ID XOR ASG exp
    (10) exp -> . ID AND ASG exp
    (11) exp -> . ID ASG exp
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp DIV exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp POW exp
    (18) exp -> . exp OR exp
    (19) exp -> . exp XOR exp
    (20) exp -> . exp AND exp
    (23) exp -> . cmp
    (27) exp -> . ifc END
    (28) exp -> . FOR ID IN it : exp END
    (29) exp -> . FOR NUM ID IN it : exp END
    (30) exp -> . ( exp )
    (31) exp -> . ID
    (36) exp -> . exp IN it
    (37) exp -> . ID + exp
    (38) exp -> . ID - exp
    (39) exp -> . - exp
    (40) exp -> . ID * exp
    (41) exp -> . ID DIV exp
    (42) exp -> . ID MOD exp
    (43) exp -> . ID POW exp
    (44) exp -> . ID OR exp
    (45) exp -> . ID XOR exp
    (46) exp -> . ID AND exp
    (47) exp -> . + exp
    (48) exp -> . NOT exp
    (49) exp -> . ECHO exp
    (50) exp -> . LOAD exp
    (51) exp -> . EVAL exp
    (55) exp -> . { seq }
    (56) exp -> . NUM
    (57) exp -> . STR
    (58) exp -> . WHILE exp : exp END
    (21) cmp -> . exp CMP exp
    (22) cmp -> . cmp CMP exp
    (24) ifc -> . IF exp : exp
    (25) ifc -> . IF exp : exp ELSE exp
    (26) ifc -> . IF exp : exp ELSE ifc

    ID              shift and go to state 2
    FOR             shift and go to state 7
    (               shift and go to state 9
    -               shift and go to state 4
    +               shift and go to state 3
    NOT             shift and go to state 10
    ECHO            shift and go to state 11
    LOAD            shift and go to state 12
    EVAL            shift and go to state 13
    {               shift and go to state 14
    NUM             shift and go to state 8
    STR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17

    exp                            shift and go to state 1
    cmp                            shift and go to state 5
    ifc                            shift and go to state 6

state 1

    (0) S' -> exp .
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . DIV exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . POW exp
    (18) exp -> exp . OR exp
    (19) exp -> exp . XOR exp
    (20) exp -> exp . AND exp
    (36) exp -> exp . IN it
    (21) cmp -> exp . CMP exp

    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    POW             shift and go to state 23
    OR              shift and go to state 24
    XOR             shift and go to state 25
    AND             shift and go to state 26
    IN              shift and go to state 27
    CMP             shift and go to state 28


state 2

    (1) exp -> ID . + ASG exp
    (2) exp -> ID . - ASG exp
    (3) exp -> ID . USG
    (4) exp -> ID . * ASG exp
    (5) exp -> ID . DIV ASG exp
    (6) exp -> ID . MOD ASG exp
    (7) exp -> ID . POW ASG exp
    (8) exp -> ID . OR ASG exp
    (9) exp -> ID . XOR ASG exp
    (10) exp -> ID . AND ASG exp
    (11) exp -> ID . ASG exp
    (31) exp -> ID .
    (37) exp -> ID . + exp
    (38) exp -> ID . - exp
    (40) exp -> ID . * exp
    (41) exp -> ID . DIV exp
    (42) exp -> ID . MOD exp
    (43) exp -> ID . POW exp
    (44) exp -> ID . OR exp
    (45) exp -> ID . XOR exp
    (46) exp -> ID . AND exp

    +               shift and go to state 29
    -               shift and go to state 31
    USG             shift and go to state 32
    *               shift and go to state 33
    DIV             shift and go to state 34
    MOD             shift and go to state 35
    POW             shift and go to state 36
    OR              shift and go to state 37
    XOR             shift and go to state 38
    AND             shift and go to state 39
    ASG             shift and go to state 30
    IN              reduce using rule 31 (exp -> ID .)
    CMP             reduce using rule 31 (exp -> ID .)
    $end            reduce using rule 31 (exp -> ID .)
    )               reduce using rule 31 (exp -> ID .)
    ;               reduce using rule 31 (exp -> ID .)
    }               reduce using rule 31 (exp -> ID .)
    :               reduce using rule 31 (exp -> ID .)
    ,               reduce using rule 31 (exp -> ID .)
    END             reduce using rule 31 (exp -> ID .)
    ELSE            reduce using rule 31 (exp -> ID .)
    ]               reduce using rule 31 (exp -> ID .)
    [               reduce using rule 31 (exp -> ID .)

  ! +               [ reduce using rule 31 (exp -> ID .) ]
  ! -               [ reduce using rule 31 (exp -> ID .) ]
  ! *               [ reduce using rule 31 (exp -> ID .) ]
  ! DIV             [ reduce using rule 31 (exp -> ID .) ]
  ! MOD             [ reduce using rule 31 (exp -> ID .) ]
  ! POW             [ reduce using rule 31 (exp -> ID .) ]
  ! OR              [ reduce using rule 31 (exp -> ID .) ]
  ! XOR             [ reduce using rule 31 (exp -> ID .) ]
  ! AND             [ reduce using rule 31 (exp -> ID .) ]


state 3

    (47) exp -> + . exp
    (1) exp -> . ID + ASG exp
    (2) exp -> . ID - ASG exp
    (3) exp -> . ID USG
    (4) exp -> . ID * ASG exp
    (5) exp -> . ID DIV ASG exp
    (6) exp -> . ID MOD ASG exp
    (7) exp -> . ID POW ASG exp
    (8) exp -> . ID OR ASG exp
    (9) exp -> . ID XOR ASG exp
    (10) exp -> . ID AND ASG exp
    (11) exp -> . ID ASG exp
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp DIV exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp POW exp
    (18) exp -> . exp OR exp
    (19) exp -> . exp XOR exp
    (20) exp -> . exp AND exp
    (23) exp -> . cmp
    (27) exp -> . ifc END
    (28) exp -> . FOR ID IN it : exp END
    (29) exp -> . FOR NUM ID IN it : exp END
    (30) exp -> . ( exp )
    (31) exp -> . ID
    (36) exp -> . exp IN it
    (37) exp -> . ID + exp
    (38) exp -> . ID - exp
    (39) exp -> . - exp
    (40) exp -> . ID * exp
    (41) exp -> . ID DIV exp
    (42) exp -> . ID MOD exp
    (43) exp -> . ID POW exp
    (44) exp -> . ID OR exp
    (45) exp -> . ID XOR exp
    (46) exp -> . ID AND exp
    (47) exp -> . + exp
    (48) exp -> . NOT exp
    (49) exp -> . ECHO exp
    (50) exp -> . LOAD exp
    (51) exp -> . EVAL exp
    (55) exp -> . { seq }
    (56) exp -> . NUM
    (57) exp -> . STR
    (58) exp -> . WHILE exp : exp END
    (21) cmp -> . exp CMP exp
    (22) cmp -> . cmp CMP exp
    (24) ifc -> . IF exp : exp
    (25) ifc -> . IF exp : exp ELSE exp
    (26) ifc -> . IF exp : exp ELSE ifc

    ID              shift and go to state 2
    FOR             shift and go to state 7
    (               shift and go to state 9
    -               shift and go to state 4
    +               shift and go to state 3
    NOT             shift and go to state 10
    ECHO            shift and go to state 11
    LOAD            shift and go to state 12
    EVAL            shift and go to state 13
    {               shift and go to state 14
    NUM             shift and go to state 8
    STR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17

    exp                            shift and go to state 40
    cmp                            shift and go to state 5
    ifc                            shift and go to state 6

state 4

    (39) exp -> - . exp
    (1) exp -> . ID + ASG exp
    (2) exp -> . ID - ASG exp
    (3) exp -> . ID USG
    (4) exp -> . ID * ASG exp
    (5) exp -> . ID DIV ASG exp
    (6) exp -> . ID MOD ASG exp
    (7) exp -> . ID POW ASG exp
    (8) exp -> . ID OR ASG exp
    (9) exp -> . ID XOR ASG exp
    (10) exp -> . ID AND ASG exp
    (11) exp -> . ID ASG exp
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp DIV exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp POW exp
    (18) exp -> . exp OR exp
    (19) exp -> . exp XOR exp
    (20) exp -> . exp AND exp
    (23) exp -> . cmp
    (27) exp -> . ifc END
    (28) exp -> . FOR ID IN it : exp END
    (29) exp -> . FOR NUM ID IN it : exp END
    (30) exp -> . ( exp )
    (31) exp -> . ID
    (36) exp -> . exp IN it
    (37) exp -> . ID + exp
    (38) exp -> . ID - exp
    (39) exp -> . - exp
    (40) exp -> . ID * exp
    (41) exp -> . ID DIV exp
    (42) exp -> . ID MOD exp
    (43) exp -> . ID POW exp
    (44) exp -> . ID OR exp
    (45) exp -> . ID XOR exp
    (46) exp -> . ID AND exp
    (47) exp -> . + exp
    (48) exp -> . NOT exp
    (49) exp -> . ECHO exp
    (50) exp -> . LOAD exp
    (51) exp -> . EVAL exp
    (55) exp -> . { seq }
    (56) exp -> . NUM
    (57) exp -> . STR
    (58) exp -> . WHILE exp : exp END
    (21) cmp -> . exp CMP exp
    (22) cmp -> . cmp CMP exp
    (24) ifc -> . IF exp : exp
    (25) ifc -> . IF exp : exp ELSE exp
    (26) ifc -> . IF exp : exp ELSE ifc

    ID              shift and go to state 2
    FOR             shift and go to state 7
    (               shift and go to state 9
    -               shift and go to state 4
    +               shift and go to state 3
    NOT             shift and go to state 10
    ECHO            shift and go to state 11
    LOAD            shift and go to state 12
    EVAL            shift and go to state 13
    {               shift and go to state 14
    NUM             shift and go to state 8
    STR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17

    exp                            shift and go to state 41
    cmp                            shift and go to state 5
    ifc                            shift and go to state 6

state 5

    (23) exp -> cmp .
    (22) cmp -> cmp . CMP exp

    +               reduce using rule 23 (exp -> cmp .)
    -               reduce using rule 23 (exp -> cmp .)
    *               reduce using rule 23 (exp -> cmp .)
    DIV             reduce using rule 23 (exp -> cmp .)
    MOD             reduce using rule 23 (exp -> cmp .)
    POW             reduce using rule 23 (exp -> cmp .)
    OR              reduce using rule 23 (exp -> cmp .)
    XOR             reduce using rule 23 (exp -> cmp .)
    AND             reduce using rule 23 (exp -> cmp .)
    IN              reduce using rule 23 (exp -> cmp .)
    $end            reduce using rule 23 (exp -> cmp .)
    )               reduce using rule 23 (exp -> cmp .)
    ;               reduce using rule 23 (exp -> cmp .)
    }               reduce using rule 23 (exp -> cmp .)
    :               reduce using rule 23 (exp -> cmp .)
    ,               reduce using rule 23 (exp -> cmp .)
    END             reduce using rule 23 (exp -> cmp .)
    ELSE            reduce using rule 23 (exp -> cmp .)
    ]               reduce using rule 23 (exp -> cmp .)
    [               reduce using rule 23 (exp -> cmp .)
    CMP             shift and go to state 42

  ! CMP             [ reduce using rule 23 (exp -> cmp .) ]


state 6

    (27) exp -> ifc . END

    END             shift and go to state 43


state 7

    (28) exp -> FOR . ID IN it : exp END
    (29) exp -> FOR . NUM ID IN it : exp END

    ID              shift and go to state 44
    NUM             shift and go to state 45


state 8

    (56) exp -> NUM .

    +               reduce using rule 56 (exp -> NUM .)
    -               reduce using rule 56 (exp -> NUM .)
    *               reduce using rule 56 (exp -> NUM .)
    DIV             reduce using rule 56 (exp -> NUM .)
    MOD             reduce using rule 56 (exp -> NUM .)
    POW             reduce using rule 56 (exp -> NUM .)
    OR              reduce using rule 56 (exp -> NUM .)
    XOR             reduce using rule 56 (exp -> NUM .)
    AND             reduce using rule 56 (exp -> NUM .)
    IN              reduce using rule 56 (exp -> NUM .)
    CMP             reduce using rule 56 (exp -> NUM .)
    $end            reduce using rule 56 (exp -> NUM .)
    )               reduce using rule 56 (exp -> NUM .)
    ;               reduce using rule 56 (exp -> NUM .)
    }               reduce using rule 56 (exp -> NUM .)
    :               reduce using rule 56 (exp -> NUM .)
    ,               reduce using rule 56 (exp -> NUM .)
    END             reduce using rule 56 (exp -> NUM .)
    ELSE            reduce using rule 56 (exp -> NUM .)
    ]               reduce using rule 56 (exp -> NUM .)
    [               reduce using rule 56 (exp -> NUM .)


state 9

    (30) exp -> ( . exp )
    (1) exp -> . ID + ASG exp
    (2) exp -> . ID - ASG exp
    (3) exp -> . ID USG
    (4) exp -> . ID * ASG exp
    (5) exp -> . ID DIV ASG exp
    (6) exp -> . ID MOD ASG exp
    (7) exp -> . ID POW ASG exp
    (8) exp -> . ID OR ASG exp
    (9) exp -> . ID XOR ASG exp
    (10) exp -> . ID AND ASG exp
    (11) exp -> . ID ASG exp
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp DIV exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp POW exp
    (18) exp -> . exp OR exp
    (19) exp -> . exp XOR exp
    (20) exp -> . exp AND exp
    (23) exp -> . cmp
    (27) exp -> . ifc END
    (28) exp -> . FOR ID IN it : exp END
    (29) exp -> . FOR NUM ID IN it : exp END
    (30) exp -> . ( exp )
    (31) exp -> . ID
    (36) exp -> . exp IN it
    (37) exp -> . ID + exp
    (38) exp -> . ID - exp
    (39) exp -> . - exp
    (40) exp -> . ID * exp
    (41) exp -> . ID DIV exp
    (42) exp -> . ID MOD exp
    (43) exp -> . ID POW exp
    (44) exp -> . ID OR exp
    (45) exp -> . ID XOR exp
    (46) exp -> . ID AND exp
    (47) exp -> . + exp
    (48) exp -> . NOT exp
    (49) exp -> . ECHO exp
    (50) exp -> . LOAD exp
    (51) exp -> . EVAL exp
    (55) exp -> . { seq }
    (56) exp -> . NUM
    (57) exp -> . STR
    (58) exp -> . WHILE exp : exp END
    (21) cmp -> . exp CMP exp
    (22) cmp -> . cmp CMP exp
    (24) ifc -> . IF exp : exp
    (25) ifc -> . IF exp : exp ELSE exp
    (26) ifc -> . IF exp : exp ELSE ifc

    ID              shift and go to state 2
    FOR             shift and go to state 7
    (               shift and go to state 9
    -               shift and go to state 4
    +               shift and go to state 3
    NOT             shift and go to state 10
    ECHO            shift and go to state 11
    LOAD            shift and go to state 12
    EVAL            shift and go to state 13
    {               shift and go to state 14
    NUM             shift and go to state 8
    STR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17

    exp                            shift and go to state 46
    cmp                            shift and go to state 5
    ifc                            shift and go to state 6

state 10

    (48) exp -> NOT . exp
    (1) exp -> . ID + ASG exp
    (2) exp -> . ID - ASG exp
    (3) exp -> . ID USG
    (4) exp -> . ID * ASG exp
    (5) exp -> . ID DIV ASG exp
    (6) exp -> . ID MOD ASG exp
    (7) exp -> . ID POW ASG exp
    (8) exp -> . ID OR ASG exp
    (9) exp -> . ID XOR ASG exp
    (10) exp -> . ID AND ASG exp
    (11) exp -> . ID ASG exp
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp DIV exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp POW exp
    (18) exp -> . exp OR exp
    (19) exp -> . exp XOR exp
    (20) exp -> . exp AND exp
    (23) exp -> . cmp
    (27) exp -> . ifc END
    (28) exp -> . FOR ID IN it : exp END
    (29) exp -> . FOR NUM ID IN it : exp END
    (30) exp -> . ( exp )
    (31) exp -> . ID
    (36) exp -> . exp IN it
    (37) exp -> . ID + exp
    (38) exp -> . ID - exp
    (39) exp -> . - exp
    (40) exp -> . ID * exp
    (41) exp -> . ID DIV exp
    (42) exp -> . ID MOD exp
    (43) exp -> . ID POW exp
    (44) exp -> . ID OR exp
    (45) exp -> . ID XOR exp
    (46) exp -> . ID AND exp
    (47) exp -> . + exp
    (48) exp -> . NOT exp
    (49) exp -> . ECHO exp
    (50) exp -> . LOAD exp
    (51) exp -> . EVAL exp
    (55) exp -> . { seq }
    (56) exp -> . NUM
    (57) exp -> . STR
    (58) exp -> . WHILE exp : exp END
    (21) cmp -> . exp CMP exp
    (22) cmp -> . cmp CMP exp
    (24) ifc -> . IF exp : exp
    (25) ifc -> . IF exp : exp ELSE exp
    (26) ifc -> . IF exp : exp ELSE ifc

    ID              shift and go to state 2
    FOR             shift and go to state 7
    (               shift and go to state 9
    -               shift and go to state 4
    +               shift and go to state 3
    NOT             shift and go to state 10
    ECHO            shift and go to state 11
    LOAD            shift and go to state 12
    EVAL            shift and go to state 13
    {               shift and go to state 14
    NUM             shift and go to state 8
    STR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17

    exp                            shift and go to state 47
    cmp                            shift and go to state 5
    ifc                            shift and go to state 6

state 11

    (49) exp -> ECHO . exp
    (1) exp -> . ID + ASG exp
    (2) exp -> . ID - ASG exp
    (3) exp -> . ID USG
    (4) exp -> . ID * ASG exp
    (5) exp -> . ID DIV ASG exp
    (6) exp -> . ID MOD ASG exp
    (7) exp -> . ID POW ASG exp
    (8) exp -> . ID OR ASG exp
    (9) exp -> . ID XOR ASG exp
    (10) exp -> . ID AND ASG exp
    (11) exp -> . ID ASG exp
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp DIV exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp POW exp
    (18) exp -> . exp OR exp
    (19) exp -> . exp XOR exp
    (20) exp -> . exp AND exp
    (23) exp -> . cmp
    (27) exp -> . ifc END
    (28) exp -> . FOR ID IN it : exp END
    (29) exp -> . FOR NUM ID IN it : exp END
    (30) exp -> . ( exp )
    (31) exp -> . ID
    (36) exp -> . exp IN it
    (37) exp -> . ID + exp
    (38) exp -> . ID - exp
    (39) exp -> . - exp
    (40) exp -> . ID * exp
    (41) exp -> . ID DIV exp
    (42) exp -> . ID MOD exp
    (43) exp -> . ID POW exp
    (44) exp -> . ID OR exp
    (45) exp -> . ID XOR exp
    (46) exp -> . ID AND exp
    (47) exp -> . + exp
    (48) exp -> . NOT exp
    (49) exp -> . ECHO exp
    (50) exp -> . LOAD exp
    (51) exp -> . EVAL exp
    (55) exp -> . { seq }
    (56) exp -> . NUM
    (57) exp -> . STR
    (58) exp -> . WHILE exp : exp END
    (21) cmp -> . exp CMP exp
    (22) cmp -> . cmp CMP exp
    (24) ifc -> . IF exp : exp
    (25) ifc -> . IF exp : exp ELSE exp
    (26) ifc -> . IF exp : exp ELSE ifc

    ID              shift and go to state 2
    FOR             shift and go to state 7
    (               shift and go to state 9
    -               shift and go to state 4
    +               shift and go to state 3
    NOT             shift and go to state 10
    ECHO            shift and go to state 11
    LOAD            shift and go to state 12
    EVAL            shift and go to state 13
    {               shift and go to state 14
    NUM             shift and go to state 8
    STR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17

    exp                            shift and go to state 48
    cmp                            shift and go to state 5
    ifc                            shift and go to state 6

state 12

    (50) exp -> LOAD . exp
    (1) exp -> . ID + ASG exp
    (2) exp -> . ID - ASG exp
    (3) exp -> . ID USG
    (4) exp -> . ID * ASG exp
    (5) exp -> . ID DIV ASG exp
    (6) exp -> . ID MOD ASG exp
    (7) exp -> . ID POW ASG exp
    (8) exp -> . ID OR ASG exp
    (9) exp -> . ID XOR ASG exp
    (10) exp -> . ID AND ASG exp
    (11) exp -> . ID ASG exp
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp DIV exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp POW exp
    (18) exp -> . exp OR exp
    (19) exp -> . exp XOR exp
    (20) exp -> . exp AND exp
    (23) exp -> . cmp
    (27) exp -> . ifc END
    (28) exp -> . FOR ID IN it : exp END
    (29) exp -> . FOR NUM ID IN it : exp END
    (30) exp -> . ( exp )
    (31) exp -> . ID
    (36) exp -> . exp IN it
    (37) exp -> . ID + exp
    (38) exp -> . ID - exp
    (39) exp -> . - exp
    (40) exp -> . ID * exp
    (41) exp -> . ID DIV exp
    (42) exp -> . ID MOD exp
    (43) exp -> . ID POW exp
    (44) exp -> . ID OR exp
    (45) exp -> . ID XOR exp
    (46) exp -> . ID AND exp
    (47) exp -> . + exp
    (48) exp -> . NOT exp
    (49) exp -> . ECHO exp
    (50) exp -> . LOAD exp
    (51) exp -> . EVAL exp
    (55) exp -> . { seq }
    (56) exp -> . NUM
    (57) exp -> . STR
    (58) exp -> . WHILE exp : exp END
    (21) cmp -> . exp CMP exp
    (22) cmp -> . cmp CMP exp
    (24) ifc -> . IF exp : exp
    (25) ifc -> . IF exp : exp ELSE exp
    (26) ifc -> . IF exp : exp ELSE ifc

    ID              shift and go to state 2
    FOR             shift and go to state 7
    (               shift and go to state 9
    -               shift and go to state 4
    +               shift and go to state 3
    NOT             shift and go to state 10
    ECHO            shift and go to state 11
    LOAD            shift and go to state 12
    EVAL            shift and go to state 13
    {               shift and go to state 14
    NUM             shift and go to state 8
    STR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17

    exp                            shift and go to state 49
    cmp                            shift and go to state 5
    ifc                            shift and go to state 6

state 13

    (51) exp -> EVAL . exp
    (1) exp -> . ID + ASG exp
    (2) exp -> . ID - ASG exp
    (3) exp -> . ID USG
    (4) exp -> . ID * ASG exp
    (5) exp -> . ID DIV ASG exp
    (6) exp -> . ID MOD ASG exp
    (7) exp -> . ID POW ASG exp
    (8) exp -> . ID OR ASG exp
    (9) exp -> . ID XOR ASG exp
    (10) exp -> . ID AND ASG exp
    (11) exp -> . ID ASG exp
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp DIV exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp POW exp
    (18) exp -> . exp OR exp
    (19) exp -> . exp XOR exp
    (20) exp -> . exp AND exp
    (23) exp -> . cmp
    (27) exp -> . ifc END
    (28) exp -> . FOR ID IN it : exp END
    (29) exp -> . FOR NUM ID IN it : exp END
    (30) exp -> . ( exp )
    (31) exp -> . ID
    (36) exp -> . exp IN it
    (37) exp -> . ID + exp
    (38) exp -> . ID - exp
    (39) exp -> . - exp
    (40) exp -> . ID * exp
    (41) exp -> . ID DIV exp
    (42) exp -> . ID MOD exp
    (43) exp -> . ID POW exp
    (44) exp -> . ID OR exp
    (45) exp -> . ID XOR exp
    (46) exp -> . ID AND exp
    (47) exp -> . + exp
    (48) exp -> . NOT exp
    (49) exp -> . ECHO exp
    (50) exp -> . LOAD exp
    (51) exp -> . EVAL exp
    (55) exp -> . { seq }
    (56) exp -> . NUM
    (57) exp -> . STR
    (58) exp -> . WHILE exp : exp END
    (21) cmp -> . exp CMP exp
    (22) cmp -> . cmp CMP exp
    (24) ifc -> . IF exp : exp
    (25) ifc -> . IF exp : exp ELSE exp
    (26) ifc -> . IF exp : exp ELSE ifc

    ID              shift and go to state 2
    FOR             shift and go to state 7
    (               shift and go to state 9
    -               shift and go to state 4
    +               shift and go to state 3
    NOT             shift and go to state 10
    ECHO            shift and go to state 11
    LOAD            shift and go to state 12
    EVAL            shift and go to state 13
    {               shift and go to state 14
    NUM             shift and go to state 8
    STR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17

    exp                            shift and go to state 50
    cmp                            shift and go to state 5
    ifc                            shift and go to state 6

state 14

    (55) exp -> { . seq }
    (52) seq -> . exp ; seq
    (53) seq -> . exp ;
    (54) seq -> . exp
    (1) exp -> . ID + ASG exp
    (2) exp -> . ID - ASG exp
    (3) exp -> . ID USG
    (4) exp -> . ID * ASG exp
    (5) exp -> . ID DIV ASG exp
    (6) exp -> . ID MOD ASG exp
    (7) exp -> . ID POW ASG exp
    (8) exp -> . ID OR ASG exp
    (9) exp -> . ID XOR ASG exp
    (10) exp -> . ID AND ASG exp
    (11) exp -> . ID ASG exp
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp DIV exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp POW exp
    (18) exp -> . exp OR exp
    (19) exp -> . exp XOR exp
    (20) exp -> . exp AND exp
    (23) exp -> . cmp
    (27) exp -> . ifc END
    (28) exp -> . FOR ID IN it : exp END
    (29) exp -> . FOR NUM ID IN it : exp END
    (30) exp -> . ( exp )
    (31) exp -> . ID
    (36) exp -> . exp IN it
    (37) exp -> . ID + exp
    (38) exp -> . ID - exp
    (39) exp -> . - exp
    (40) exp -> . ID * exp
    (41) exp -> . ID DIV exp
    (42) exp -> . ID MOD exp
    (43) exp -> . ID POW exp
    (44) exp -> . ID OR exp
    (45) exp -> . ID XOR exp
    (46) exp -> . ID AND exp
    (47) exp -> . + exp
    (48) exp -> . NOT exp
    (49) exp -> . ECHO exp
    (50) exp -> . LOAD exp
    (51) exp -> . EVAL exp
    (55) exp -> . { seq }
    (56) exp -> . NUM
    (57) exp -> . STR
    (58) exp -> . WHILE exp : exp END
    (21) cmp -> . exp CMP exp
    (22) cmp -> . cmp CMP exp
    (24) ifc -> . IF exp : exp
    (25) ifc -> . IF exp : exp ELSE exp
    (26) ifc -> . IF exp : exp ELSE ifc

    ID              shift and go to state 2
    FOR             shift and go to state 7
    (               shift and go to state 9
    -               shift and go to state 4
    +               shift and go to state 3
    NOT             shift and go to state 10
    ECHO            shift and go to state 11
    LOAD            shift and go to state 12
    EVAL            shift and go to state 13
    {               shift and go to state 14
    NUM             shift and go to state 8
    STR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17

    seq                            shift and go to state 51
    exp                            shift and go to state 52
    cmp                            shift and go to state 5
    ifc                            shift and go to state 6

state 15

    (57) exp -> STR .

    +               reduce using rule 57 (exp -> STR .)
    -               reduce using rule 57 (exp -> STR .)
    *               reduce using rule 57 (exp -> STR .)
    DIV             reduce using rule 57 (exp -> STR .)
    MOD             reduce using rule 57 (exp -> STR .)
    POW             reduce using rule 57 (exp -> STR .)
    OR              reduce using rule 57 (exp -> STR .)
    XOR             reduce using rule 57 (exp -> STR .)
    AND             reduce using rule 57 (exp -> STR .)
    IN              reduce using rule 57 (exp -> STR .)
    CMP             reduce using rule 57 (exp -> STR .)
    $end            reduce using rule 57 (exp -> STR .)
    )               reduce using rule 57 (exp -> STR .)
    ;               reduce using rule 57 (exp -> STR .)
    }               reduce using rule 57 (exp -> STR .)
    :               reduce using rule 57 (exp -> STR .)
    ,               reduce using rule 57 (exp -> STR .)
    END             reduce using rule 57 (exp -> STR .)
    ELSE            reduce using rule 57 (exp -> STR .)
    ]               reduce using rule 57 (exp -> STR .)
    [               reduce using rule 57 (exp -> STR .)


state 16

    (58) exp -> WHILE . exp : exp END
    (1) exp -> . ID + ASG exp
    (2) exp -> . ID - ASG exp
    (3) exp -> . ID USG
    (4) exp -> . ID * ASG exp
    (5) exp -> . ID DIV ASG exp
    (6) exp -> . ID MOD ASG exp
    (7) exp -> . ID POW ASG exp
    (8) exp -> . ID OR ASG exp
    (9) exp -> . ID XOR ASG exp
    (10) exp -> . ID AND ASG exp
    (11) exp -> . ID ASG exp
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp DIV exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp POW exp
    (18) exp -> . exp OR exp
    (19) exp -> . exp XOR exp
    (20) exp -> . exp AND exp
    (23) exp -> . cmp
    (27) exp -> . ifc END
    (28) exp -> . FOR ID IN it : exp END
    (29) exp -> . FOR NUM ID IN it : exp END
    (30) exp -> . ( exp )
    (31) exp -> . ID
    (36) exp -> . exp IN it
    (37) exp -> . ID + exp
    (38) exp -> . ID - exp
    (39) exp -> . - exp
    (40) exp -> . ID * exp
    (41) exp -> . ID DIV exp
    (42) exp -> . ID MOD exp
    (43) exp -> . ID POW exp
    (44) exp -> . ID OR exp
    (45) exp -> . ID XOR exp
    (46) exp -> . ID AND exp
    (47) exp -> . + exp
    (48) exp -> . NOT exp
    (49) exp -> . ECHO exp
    (50) exp -> . LOAD exp
    (51) exp -> . EVAL exp
    (55) exp -> . { seq }
    (56) exp -> . NUM
    (57) exp -> . STR
    (58) exp -> . WHILE exp : exp END
    (21) cmp -> . exp CMP exp
    (22) cmp -> . cmp CMP exp
    (24) ifc -> . IF exp : exp
    (25) ifc -> . IF exp : exp ELSE exp
    (26) ifc -> . IF exp : exp ELSE ifc

    ID              shift and go to state 2
    FOR             shift and go to state 7
    (               shift and go to state 9
    -               shift and go to state 4
    +               shift and go to state 3
    NOT             shift and go to state 10
    ECHO            shift and go to state 11
    LOAD            shift and go to state 12
    EVAL            shift and go to state 13
    {               shift and go to state 14
    NUM             shift and go to state 8
    STR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17

    exp                            shift and go to state 53
    cmp                            shift and go to state 5
    ifc                            shift and go to state 6

state 17

    (24) ifc -> IF . exp : exp
    (25) ifc -> IF . exp : exp ELSE exp
    (26) ifc -> IF . exp : exp ELSE ifc
    (1) exp -> . ID + ASG exp
    (2) exp -> . ID - ASG exp
    (3) exp -> . ID USG
    (4) exp -> . ID * ASG exp
    (5) exp -> . ID DIV ASG exp
    (6) exp -> . ID MOD ASG exp
    (7) exp -> . ID POW ASG exp
    (8) exp -> . ID OR ASG exp
    (9) exp -> . ID XOR ASG exp
    (10) exp -> . ID AND ASG exp
    (11) exp -> . ID ASG exp
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp DIV exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp POW exp
    (18) exp -> . exp OR exp
    (19) exp -> . exp XOR exp
    (20) exp -> . exp AND exp
    (23) exp -> . cmp
    (27) exp -> . ifc END
    (28) exp -> . FOR ID IN it : exp END
    (29) exp -> . FOR NUM ID IN it : exp END
    (30) exp -> . ( exp )
    (31) exp -> . ID
    (36) exp -> . exp IN it
    (37) exp -> . ID + exp
    (38) exp -> . ID - exp
    (39) exp -> . - exp
    (40) exp -> . ID * exp
    (41) exp -> . ID DIV exp
    (42) exp -> . ID MOD exp
    (43) exp -> . ID POW exp
    (44) exp -> . ID OR exp
    (45) exp -> . ID XOR exp
    (46) exp -> . ID AND exp
    (47) exp -> . + exp
    (48) exp -> . NOT exp
    (49) exp -> . ECHO exp
    (50) exp -> . LOAD exp
    (51) exp -> . EVAL exp
    (55) exp -> . { seq }
    (56) exp -> . NUM
    (57) exp -> . STR
    (58) exp -> . WHILE exp : exp END
    (21) cmp -> . exp CMP exp
    (22) cmp -> . cmp CMP exp
    (24) ifc -> . IF exp : exp
    (25) ifc -> . IF exp : exp ELSE exp
    (26) ifc -> . IF exp : exp ELSE ifc

    ID              shift and go to state 2
    FOR             shift and go to state 7
    (               shift and go to state 9
    -               shift and go to state 4
    +               shift and go to state 3
    NOT             shift and go to state 10
    ECHO            shift and go to state 11
    LOAD            shift and go to state 12
    EVAL            shift and go to state 13
    {               shift and go to state 14
    NUM             shift and go to state 8
    STR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17

    exp                            shift and go to state 54
    ifc                            shift and go to state 6
    cmp                            shift and go to state 5

state 18

    (12) exp -> exp + . exp
    (1) exp -> . ID + ASG exp
    (2) exp -> . ID - ASG exp
    (3) exp -> . ID USG
    (4) exp -> . ID * ASG exp
    (5) exp -> . ID DIV ASG exp
    (6) exp -> . ID MOD ASG exp
    (7) exp -> . ID POW ASG exp
    (8) exp -> . ID OR ASG exp
    (9) exp -> . ID XOR ASG exp
    (10) exp -> . ID AND ASG exp
    (11) exp -> . ID ASG exp
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp DIV exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp POW exp
    (18) exp -> . exp OR exp
    (19) exp -> . exp XOR exp
    (20) exp -> . exp AND exp
    (23) exp -> . cmp
    (27) exp -> . ifc END
    (28) exp -> . FOR ID IN it : exp END
    (29) exp -> . FOR NUM ID IN it : exp END
    (30) exp -> . ( exp )
    (31) exp -> . ID
    (36) exp -> . exp IN it
    (37) exp -> . ID + exp
    (38) exp -> . ID - exp
    (39) exp -> . - exp
    (40) exp -> . ID * exp
    (41) exp -> . ID DIV exp
    (42) exp -> . ID MOD exp
    (43) exp -> . ID POW exp
    (44) exp -> . ID OR exp
    (45) exp -> . ID XOR exp
    (46) exp -> . ID AND exp
    (47) exp -> . + exp
    (48) exp -> . NOT exp
    (49) exp -> . ECHO exp
    (50) exp -> . LOAD exp
    (51) exp -> . EVAL exp
    (55) exp -> . { seq }
    (56) exp -> . NUM
    (57) exp -> . STR
    (58) exp -> . WHILE exp : exp END
    (21) cmp -> . exp CMP exp
    (22) cmp -> . cmp CMP exp
    (24) ifc -> . IF exp : exp
    (25) ifc -> . IF exp : exp ELSE exp
    (26) ifc -> . IF exp : exp ELSE ifc

    ID              shift and go to state 2
    FOR             shift and go to state 7
    (               shift and go to state 9
    -               shift and go to state 4
    +               shift and go to state 3
    NOT             shift and go to state 10
    ECHO            shift and go to state 11
    LOAD            shift and go to state 12
    EVAL            shift and go to state 13
    {               shift and go to state 14
    NUM             shift and go to state 8
    STR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17

    exp                            shift and go to state 55
    cmp                            shift and go to state 5
    ifc                            shift and go to state 6

state 19

    (13) exp -> exp - . exp
    (1) exp -> . ID + ASG exp
    (2) exp -> . ID - ASG exp
    (3) exp -> . ID USG
    (4) exp -> . ID * ASG exp
    (5) exp -> . ID DIV ASG exp
    (6) exp -> . ID MOD ASG exp
    (7) exp -> . ID POW ASG exp
    (8) exp -> . ID OR ASG exp
    (9) exp -> . ID XOR ASG exp
    (10) exp -> . ID AND ASG exp
    (11) exp -> . ID ASG exp
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp DIV exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp POW exp
    (18) exp -> . exp OR exp
    (19) exp -> . exp XOR exp
    (20) exp -> . exp AND exp
    (23) exp -> . cmp
    (27) exp -> . ifc END
    (28) exp -> . FOR ID IN it : exp END
    (29) exp -> . FOR NUM ID IN it : exp END
    (30) exp -> . ( exp )
    (31) exp -> . ID
    (36) exp -> . exp IN it
    (37) exp -> . ID + exp
    (38) exp -> . ID - exp
    (39) exp -> . - exp
    (40) exp -> . ID * exp
    (41) exp -> . ID DIV exp
    (42) exp -> . ID MOD exp
    (43) exp -> . ID POW exp
    (44) exp -> . ID OR exp
    (45) exp -> . ID XOR exp
    (46) exp -> . ID AND exp
    (47) exp -> . + exp
    (48) exp -> . NOT exp
    (49) exp -> . ECHO exp
    (50) exp -> . LOAD exp
    (51) exp -> . EVAL exp
    (55) exp -> . { seq }
    (56) exp -> . NUM
    (57) exp -> . STR
    (58) exp -> . WHILE exp : exp END
    (21) cmp -> . exp CMP exp
    (22) cmp -> . cmp CMP exp
    (24) ifc -> . IF exp : exp
    (25) ifc -> . IF exp : exp ELSE exp
    (26) ifc -> . IF exp : exp ELSE ifc

    ID              shift and go to state 2
    FOR             shift and go to state 7
    (               shift and go to state 9
    -               shift and go to state 4
    +               shift and go to state 3
    NOT             shift and go to state 10
    ECHO            shift and go to state 11
    LOAD            shift and go to state 12
    EVAL            shift and go to state 13
    {               shift and go to state 14
    NUM             shift and go to state 8
    STR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17

    exp                            shift and go to state 56
    cmp                            shift and go to state 5
    ifc                            shift and go to state 6

state 20

    (14) exp -> exp * . exp
    (1) exp -> . ID + ASG exp
    (2) exp -> . ID - ASG exp
    (3) exp -> . ID USG
    (4) exp -> . ID * ASG exp
    (5) exp -> . ID DIV ASG exp
    (6) exp -> . ID MOD ASG exp
    (7) exp -> . ID POW ASG exp
    (8) exp -> . ID OR ASG exp
    (9) exp -> . ID XOR ASG exp
    (10) exp -> . ID AND ASG exp
    (11) exp -> . ID ASG exp
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp DIV exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp POW exp
    (18) exp -> . exp OR exp
    (19) exp -> . exp XOR exp
    (20) exp -> . exp AND exp
    (23) exp -> . cmp
    (27) exp -> . ifc END
    (28) exp -> . FOR ID IN it : exp END
    (29) exp -> . FOR NUM ID IN it : exp END
    (30) exp -> . ( exp )
    (31) exp -> . ID
    (36) exp -> . exp IN it
    (37) exp -> . ID + exp
    (38) exp -> . ID - exp
    (39) exp -> . - exp
    (40) exp -> . ID * exp
    (41) exp -> . ID DIV exp
    (42) exp -> . ID MOD exp
    (43) exp -> . ID POW exp
    (44) exp -> . ID OR exp
    (45) exp -> . ID XOR exp
    (46) exp -> . ID AND exp
    (47) exp -> . + exp
    (48) exp -> . NOT exp
    (49) exp -> . ECHO exp
    (50) exp -> . LOAD exp
    (51) exp -> . EVAL exp
    (55) exp -> . { seq }
    (56) exp -> . NUM
    (57) exp -> . STR
    (58) exp -> . WHILE exp : exp END
    (21) cmp -> . exp CMP exp
    (22) cmp -> . cmp CMP exp
    (24) ifc -> . IF exp : exp
    (25) ifc -> . IF exp : exp ELSE exp
    (26) ifc -> . IF exp : exp ELSE ifc

    ID              shift and go to state 2
    FOR             shift and go to state 7
    (               shift and go to state 9
    -               shift and go to state 4
    +               shift and go to state 3
    NOT             shift and go to state 10
    ECHO            shift and go to state 11
    LOAD            shift and go to state 12
    EVAL            shift and go to state 13
    {               shift and go to state 14
    NUM             shift and go to state 8
    STR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17

    exp                            shift and go to state 57
    cmp                            shift and go to state 5
    ifc                            shift and go to state 6

state 21

    (15) exp -> exp DIV . exp
    (1) exp -> . ID + ASG exp
    (2) exp -> . ID - ASG exp
    (3) exp -> . ID USG
    (4) exp -> . ID * ASG exp
    (5) exp -> . ID DIV ASG exp
    (6) exp -> . ID MOD ASG exp
    (7) exp -> . ID POW ASG exp
    (8) exp -> . ID OR ASG exp
    (9) exp -> . ID XOR ASG exp
    (10) exp -> . ID AND ASG exp
    (11) exp -> . ID ASG exp
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp DIV exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp POW exp
    (18) exp -> . exp OR exp
    (19) exp -> . exp XOR exp
    (20) exp -> . exp AND exp
    (23) exp -> . cmp
    (27) exp -> . ifc END
    (28) exp -> . FOR ID IN it : exp END
    (29) exp -> . FOR NUM ID IN it : exp END
    (30) exp -> . ( exp )
    (31) exp -> . ID
    (36) exp -> . exp IN it
    (37) exp -> . ID + exp
    (38) exp -> . ID - exp
    (39) exp -> . - exp
    (40) exp -> . ID * exp
    (41) exp -> . ID DIV exp
    (42) exp -> . ID MOD exp
    (43) exp -> . ID POW exp
    (44) exp -> . ID OR exp
    (45) exp -> . ID XOR exp
    (46) exp -> . ID AND exp
    (47) exp -> . + exp
    (48) exp -> . NOT exp
    (49) exp -> . ECHO exp
    (50) exp -> . LOAD exp
    (51) exp -> . EVAL exp
    (55) exp -> . { seq }
    (56) exp -> . NUM
    (57) exp -> . STR
    (58) exp -> . WHILE exp : exp END
    (21) cmp -> . exp CMP exp
    (22) cmp -> . cmp CMP exp
    (24) ifc -> . IF exp : exp
    (25) ifc -> . IF exp : exp ELSE exp
    (26) ifc -> . IF exp : exp ELSE ifc

    ID              shift and go to state 2
    FOR             shift and go to state 7
    (               shift and go to state 9
    -               shift and go to state 4
    +               shift and go to state 3
    NOT             shift and go to state 10
    ECHO            shift and go to state 11
    LOAD            shift and go to state 12
    EVAL            shift and go to state 13
    {               shift and go to state 14
    NUM             shift and go to state 8
    STR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17

    exp                            shift and go to state 58
    cmp                            shift and go to state 5
    ifc                            shift and go to state 6

state 22

    (16) exp -> exp MOD . exp
    (1) exp -> . ID + ASG exp
    (2) exp -> . ID - ASG exp
    (3) exp -> . ID USG
    (4) exp -> . ID * ASG exp
    (5) exp -> . ID DIV ASG exp
    (6) exp -> . ID MOD ASG exp
    (7) exp -> . ID POW ASG exp
    (8) exp -> . ID OR ASG exp
    (9) exp -> . ID XOR ASG exp
    (10) exp -> . ID AND ASG exp
    (11) exp -> . ID ASG exp
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp DIV exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp POW exp
    (18) exp -> . exp OR exp
    (19) exp -> . exp XOR exp
    (20) exp -> . exp AND exp
    (23) exp -> . cmp
    (27) exp -> . ifc END
    (28) exp -> . FOR ID IN it : exp END
    (29) exp -> . FOR NUM ID IN it : exp END
    (30) exp -> . ( exp )
    (31) exp -> . ID
    (36) exp -> . exp IN it
    (37) exp -> . ID + exp
    (38) exp -> . ID - exp
    (39) exp -> . - exp
    (40) exp -> . ID * exp
    (41) exp -> . ID DIV exp
    (42) exp -> . ID MOD exp
    (43) exp -> . ID POW exp
    (44) exp -> . ID OR exp
    (45) exp -> . ID XOR exp
    (46) exp -> . ID AND exp
    (47) exp -> . + exp
    (48) exp -> . NOT exp
    (49) exp -> . ECHO exp
    (50) exp -> . LOAD exp
    (51) exp -> . EVAL exp
    (55) exp -> . { seq }
    (56) exp -> . NUM
    (57) exp -> . STR
    (58) exp -> . WHILE exp : exp END
    (21) cmp -> . exp CMP exp
    (22) cmp -> . cmp CMP exp
    (24) ifc -> . IF exp : exp
    (25) ifc -> . IF exp : exp ELSE exp
    (26) ifc -> . IF exp : exp ELSE ifc

    ID              shift and go to state 2
    FOR             shift and go to state 7
    (               shift and go to state 9
    -               shift and go to state 4
    +               shift and go to state 3
    NOT             shift and go to state 10
    ECHO            shift and go to state 11
    LOAD            shift and go to state 12
    EVAL            shift and go to state 13
    {               shift and go to state 14
    NUM             shift and go to state 8
    STR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17

    exp                            shift and go to state 59
    cmp                            shift and go to state 5
    ifc                            shift and go to state 6

state 23

    (17) exp -> exp POW . exp
    (1) exp -> . ID + ASG exp
    (2) exp -> . ID - ASG exp
    (3) exp -> . ID USG
    (4) exp -> . ID * ASG exp
    (5) exp -> . ID DIV ASG exp
    (6) exp -> . ID MOD ASG exp
    (7) exp -> . ID POW ASG exp
    (8) exp -> . ID OR ASG exp
    (9) exp -> . ID XOR ASG exp
    (10) exp -> . ID AND ASG exp
    (11) exp -> . ID ASG exp
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp DIV exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp POW exp
    (18) exp -> . exp OR exp
    (19) exp -> . exp XOR exp
    (20) exp -> . exp AND exp
    (23) exp -> . cmp
    (27) exp -> . ifc END
    (28) exp -> . FOR ID IN it : exp END
    (29) exp -> . FOR NUM ID IN it : exp END
    (30) exp -> . ( exp )
    (31) exp -> . ID
    (36) exp -> . exp IN it
    (37) exp -> . ID + exp
    (38) exp -> . ID - exp
    (39) exp -> . - exp
    (40) exp -> . ID * exp
    (41) exp -> . ID DIV exp
    (42) exp -> . ID MOD exp
    (43) exp -> . ID POW exp
    (44) exp -> . ID OR exp
    (45) exp -> . ID XOR exp
    (46) exp -> . ID AND exp
    (47) exp -> . + exp
    (48) exp -> . NOT exp
    (49) exp -> . ECHO exp
    (50) exp -> . LOAD exp
    (51) exp -> . EVAL exp
    (55) exp -> . { seq }
    (56) exp -> . NUM
    (57) exp -> . STR
    (58) exp -> . WHILE exp : exp END
    (21) cmp -> . exp CMP exp
    (22) cmp -> . cmp CMP exp
    (24) ifc -> . IF exp : exp
    (25) ifc -> . IF exp : exp ELSE exp
    (26) ifc -> . IF exp : exp ELSE ifc

    ID              shift and go to state 2
    FOR             shift and go to state 7
    (               shift and go to state 9
    -               shift and go to state 4
    +               shift and go to state 3
    NOT             shift and go to state 10
    ECHO            shift and go to state 11
    LOAD            shift and go to state 12
    EVAL            shift and go to state 13
    {               shift and go to state 14
    NUM             shift and go to state 8
    STR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17

    exp                            shift and go to state 60
    cmp                            shift and go to state 5
    ifc                            shift and go to state 6

state 24

    (18) exp -> exp OR . exp
    (1) exp -> . ID + ASG exp
    (2) exp -> . ID - ASG exp
    (3) exp -> . ID USG
    (4) exp -> . ID * ASG exp
    (5) exp -> . ID DIV ASG exp
    (6) exp -> . ID MOD ASG exp
    (7) exp -> . ID POW ASG exp
    (8) exp -> . ID OR ASG exp
    (9) exp -> . ID XOR ASG exp
    (10) exp -> . ID AND ASG exp
    (11) exp -> . ID ASG exp
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp DIV exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp POW exp
    (18) exp -> . exp OR exp
    (19) exp -> . exp XOR exp
    (20) exp -> . exp AND exp
    (23) exp -> . cmp
    (27) exp -> . ifc END
    (28) exp -> . FOR ID IN it : exp END
    (29) exp -> . FOR NUM ID IN it : exp END
    (30) exp -> . ( exp )
    (31) exp -> . ID
    (36) exp -> . exp IN it
    (37) exp -> . ID + exp
    (38) exp -> . ID - exp
    (39) exp -> . - exp
    (40) exp -> . ID * exp
    (41) exp -> . ID DIV exp
    (42) exp -> . ID MOD exp
    (43) exp -> . ID POW exp
    (44) exp -> . ID OR exp
    (45) exp -> . ID XOR exp
    (46) exp -> . ID AND exp
    (47) exp -> . + exp
    (48) exp -> . NOT exp
    (49) exp -> . ECHO exp
    (50) exp -> . LOAD exp
    (51) exp -> . EVAL exp
    (55) exp -> . { seq }
    (56) exp -> . NUM
    (57) exp -> . STR
    (58) exp -> . WHILE exp : exp END
    (21) cmp -> . exp CMP exp
    (22) cmp -> . cmp CMP exp
    (24) ifc -> . IF exp : exp
    (25) ifc -> . IF exp : exp ELSE exp
    (26) ifc -> . IF exp : exp ELSE ifc

    ID              shift and go to state 2
    FOR             shift and go to state 7
    (               shift and go to state 9
    -               shift and go to state 4
    +               shift and go to state 3
    NOT             shift and go to state 10
    ECHO            shift and go to state 11
    LOAD            shift and go to state 12
    EVAL            shift and go to state 13
    {               shift and go to state 14
    NUM             shift and go to state 8
    STR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17

    exp                            shift and go to state 61
    cmp                            shift and go to state 5
    ifc                            shift and go to state 6

state 25

    (19) exp -> exp XOR . exp
    (1) exp -> . ID + ASG exp
    (2) exp -> . ID - ASG exp
    (3) exp -> . ID USG
    (4) exp -> . ID * ASG exp
    (5) exp -> . ID DIV ASG exp
    (6) exp -> . ID MOD ASG exp
    (7) exp -> . ID POW ASG exp
    (8) exp -> . ID OR ASG exp
    (9) exp -> . ID XOR ASG exp
    (10) exp -> . ID AND ASG exp
    (11) exp -> . ID ASG exp
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp DIV exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp POW exp
    (18) exp -> . exp OR exp
    (19) exp -> . exp XOR exp
    (20) exp -> . exp AND exp
    (23) exp -> . cmp
    (27) exp -> . ifc END
    (28) exp -> . FOR ID IN it : exp END
    (29) exp -> . FOR NUM ID IN it : exp END
    (30) exp -> . ( exp )
    (31) exp -> . ID
    (36) exp -> . exp IN it
    (37) exp -> . ID + exp
    (38) exp -> . ID - exp
    (39) exp -> . - exp
    (40) exp -> . ID * exp
    (41) exp -> . ID DIV exp
    (42) exp -> . ID MOD exp
    (43) exp -> . ID POW exp
    (44) exp -> . ID OR exp
    (45) exp -> . ID XOR exp
    (46) exp -> . ID AND exp
    (47) exp -> . + exp
    (48) exp -> . NOT exp
    (49) exp -> . ECHO exp
    (50) exp -> . LOAD exp
    (51) exp -> . EVAL exp
    (55) exp -> . { seq }
    (56) exp -> . NUM
    (57) exp -> . STR
    (58) exp -> . WHILE exp : exp END
    (21) cmp -> . exp CMP exp
    (22) cmp -> . cmp CMP exp
    (24) ifc -> . IF exp : exp
    (25) ifc -> . IF exp : exp ELSE exp
    (26) ifc -> . IF exp : exp ELSE ifc

    ID              shift and go to state 2
    FOR             shift and go to state 7
    (               shift and go to state 9
    -               shift and go to state 4
    +               shift and go to state 3
    NOT             shift and go to state 10
    ECHO            shift and go to state 11
    LOAD            shift and go to state 12
    EVAL            shift and go to state 13
    {               shift and go to state 14
    NUM             shift and go to state 8
    STR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17

    exp                            shift and go to state 62
    cmp                            shift and go to state 5
    ifc                            shift and go to state 6

state 26

    (20) exp -> exp AND . exp
    (1) exp -> . ID + ASG exp
    (2) exp -> . ID - ASG exp
    (3) exp -> . ID USG
    (4) exp -> . ID * ASG exp
    (5) exp -> . ID DIV ASG exp
    (6) exp -> . ID MOD ASG exp
    (7) exp -> . ID POW ASG exp
    (8) exp -> . ID OR ASG exp
    (9) exp -> . ID XOR ASG exp
    (10) exp -> . ID AND ASG exp
    (11) exp -> . ID ASG exp
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp DIV exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp POW exp
    (18) exp -> . exp OR exp
    (19) exp -> . exp XOR exp
    (20) exp -> . exp AND exp
    (23) exp -> . cmp
    (27) exp -> . ifc END
    (28) exp -> . FOR ID IN it : exp END
    (29) exp -> . FOR NUM ID IN it : exp END
    (30) exp -> . ( exp )
    (31) exp -> . ID
    (36) exp -> . exp IN it
    (37) exp -> . ID + exp
    (38) exp -> . ID - exp
    (39) exp -> . - exp
    (40) exp -> . ID * exp
    (41) exp -> . ID DIV exp
    (42) exp -> . ID MOD exp
    (43) exp -> . ID POW exp
    (44) exp -> . ID OR exp
    (45) exp -> . ID XOR exp
    (46) exp -> . ID AND exp
    (47) exp -> . + exp
    (48) exp -> . NOT exp
    (49) exp -> . ECHO exp
    (50) exp -> . LOAD exp
    (51) exp -> . EVAL exp
    (55) exp -> . { seq }
    (56) exp -> . NUM
    (57) exp -> . STR
    (58) exp -> . WHILE exp : exp END
    (21) cmp -> . exp CMP exp
    (22) cmp -> . cmp CMP exp
    (24) ifc -> . IF exp : exp
    (25) ifc -> . IF exp : exp ELSE exp
    (26) ifc -> . IF exp : exp ELSE ifc

    ID              shift and go to state 2
    FOR             shift and go to state 7
    (               shift and go to state 9
    -               shift and go to state 4
    +               shift and go to state 3
    NOT             shift and go to state 10
    ECHO            shift and go to state 11
    LOAD            shift and go to state 12
    EVAL            shift and go to state 13
    {               shift and go to state 14
    NUM             shift and go to state 8
    STR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17

    exp                            shift and go to state 63
    cmp                            shift and go to state 5
    ifc                            shift and go to state 6

state 27

    (36) exp -> exp IN . it
    (32) it -> . [ exp , exp ]
    (33) it -> . ] exp , exp ]
    (34) it -> . [ exp , exp [
    (35) it -> . ] exp , exp [

    [               shift and go to state 65
    ]               shift and go to state 66

    it                             shift and go to state 64

state 28

    (21) cmp -> exp CMP . exp
    (1) exp -> . ID + ASG exp
    (2) exp -> . ID - ASG exp
    (3) exp -> . ID USG
    (4) exp -> . ID * ASG exp
    (5) exp -> . ID DIV ASG exp
    (6) exp -> . ID MOD ASG exp
    (7) exp -> . ID POW ASG exp
    (8) exp -> . ID OR ASG exp
    (9) exp -> . ID XOR ASG exp
    (10) exp -> . ID AND ASG exp
    (11) exp -> . ID ASG exp
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp DIV exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp POW exp
    (18) exp -> . exp OR exp
    (19) exp -> . exp XOR exp
    (20) exp -> . exp AND exp
    (23) exp -> . cmp
    (27) exp -> . ifc END
    (28) exp -> . FOR ID IN it : exp END
    (29) exp -> . FOR NUM ID IN it : exp END
    (30) exp -> . ( exp )
    (31) exp -> . ID
    (36) exp -> . exp IN it
    (37) exp -> . ID + exp
    (38) exp -> . ID - exp
    (39) exp -> . - exp
    (40) exp -> . ID * exp
    (41) exp -> . ID DIV exp
    (42) exp -> . ID MOD exp
    (43) exp -> . ID POW exp
    (44) exp -> . ID OR exp
    (45) exp -> . ID XOR exp
    (46) exp -> . ID AND exp
    (47) exp -> . + exp
    (48) exp -> . NOT exp
    (49) exp -> . ECHO exp
    (50) exp -> . LOAD exp
    (51) exp -> . EVAL exp
    (55) exp -> . { seq }
    (56) exp -> . NUM
    (57) exp -> . STR
    (58) exp -> . WHILE exp : exp END
    (21) cmp -> . exp CMP exp
    (22) cmp -> . cmp CMP exp
    (24) ifc -> . IF exp : exp
    (25) ifc -> . IF exp : exp ELSE exp
    (26) ifc -> . IF exp : exp ELSE ifc

    ID              shift and go to state 2
    FOR             shift and go to state 7
    (               shift and go to state 9
    -               shift and go to state 4
    +               shift and go to state 3
    NOT             shift and go to state 10
    ECHO            shift and go to state 11
    LOAD            shift and go to state 12
    EVAL            shift and go to state 13
    {               shift and go to state 14
    NUM             shift and go to state 8
    STR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17

    exp                            shift and go to state 67
    cmp                            shift and go to state 5
    ifc                            shift and go to state 6

state 29

    (1) exp -> ID + . ASG exp
    (37) exp -> ID + . exp
    (1) exp -> . ID + ASG exp
    (2) exp -> . ID - ASG exp
    (3) exp -> . ID USG
    (4) exp -> . ID * ASG exp
    (5) exp -> . ID DIV ASG exp
    (6) exp -> . ID MOD ASG exp
    (7) exp -> . ID POW ASG exp
    (8) exp -> . ID OR ASG exp
    (9) exp -> . ID XOR ASG exp
    (10) exp -> . ID AND ASG exp
    (11) exp -> . ID ASG exp
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp DIV exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp POW exp
    (18) exp -> . exp OR exp
    (19) exp -> . exp XOR exp
    (20) exp -> . exp AND exp
    (23) exp -> . cmp
    (27) exp -> . ifc END
    (28) exp -> . FOR ID IN it : exp END
    (29) exp -> . FOR NUM ID IN it : exp END
    (30) exp -> . ( exp )
    (31) exp -> . ID
    (36) exp -> . exp IN it
    (37) exp -> . ID + exp
    (38) exp -> . ID - exp
    (39) exp -> . - exp
    (40) exp -> . ID * exp
    (41) exp -> . ID DIV exp
    (42) exp -> . ID MOD exp
    (43) exp -> . ID POW exp
    (44) exp -> . ID OR exp
    (45) exp -> . ID XOR exp
    (46) exp -> . ID AND exp
    (47) exp -> . + exp
    (48) exp -> . NOT exp
    (49) exp -> . ECHO exp
    (50) exp -> . LOAD exp
    (51) exp -> . EVAL exp
    (55) exp -> . { seq }
    (56) exp -> . NUM
    (57) exp -> . STR
    (58) exp -> . WHILE exp : exp END
    (21) cmp -> . exp CMP exp
    (22) cmp -> . cmp CMP exp
    (24) ifc -> . IF exp : exp
    (25) ifc -> . IF exp : exp ELSE exp
    (26) ifc -> . IF exp : exp ELSE ifc

    ASG             shift and go to state 68
    ID              shift and go to state 2
    FOR             shift and go to state 7
    (               shift and go to state 9
    -               shift and go to state 4
    +               shift and go to state 3
    NOT             shift and go to state 10
    ECHO            shift and go to state 11
    LOAD            shift and go to state 12
    EVAL            shift and go to state 13
    {               shift and go to state 14
    NUM             shift and go to state 8
    STR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17

    exp                            shift and go to state 69
    cmp                            shift and go to state 5
    ifc                            shift and go to state 6

state 30

    (11) exp -> ID ASG . exp
    (1) exp -> . ID + ASG exp
    (2) exp -> . ID - ASG exp
    (3) exp -> . ID USG
    (4) exp -> . ID * ASG exp
    (5) exp -> . ID DIV ASG exp
    (6) exp -> . ID MOD ASG exp
    (7) exp -> . ID POW ASG exp
    (8) exp -> . ID OR ASG exp
    (9) exp -> . ID XOR ASG exp
    (10) exp -> . ID AND ASG exp
    (11) exp -> . ID ASG exp
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp DIV exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp POW exp
    (18) exp -> . exp OR exp
    (19) exp -> . exp XOR exp
    (20) exp -> . exp AND exp
    (23) exp -> . cmp
    (27) exp -> . ifc END
    (28) exp -> . FOR ID IN it : exp END
    (29) exp -> . FOR NUM ID IN it : exp END
    (30) exp -> . ( exp )
    (31) exp -> . ID
    (36) exp -> . exp IN it
    (37) exp -> . ID + exp
    (38) exp -> . ID - exp
    (39) exp -> . - exp
    (40) exp -> . ID * exp
    (41) exp -> . ID DIV exp
    (42) exp -> . ID MOD exp
    (43) exp -> . ID POW exp
    (44) exp -> . ID OR exp
    (45) exp -> . ID XOR exp
    (46) exp -> . ID AND exp
    (47) exp -> . + exp
    (48) exp -> . NOT exp
    (49) exp -> . ECHO exp
    (50) exp -> . LOAD exp
    (51) exp -> . EVAL exp
    (55) exp -> . { seq }
    (56) exp -> . NUM
    (57) exp -> . STR
    (58) exp -> . WHILE exp : exp END
    (21) cmp -> . exp CMP exp
    (22) cmp -> . cmp CMP exp
    (24) ifc -> . IF exp : exp
    (25) ifc -> . IF exp : exp ELSE exp
    (26) ifc -> . IF exp : exp ELSE ifc

    ID              shift and go to state 2
    FOR             shift and go to state 7
    (               shift and go to state 9
    -               shift and go to state 4
    +               shift and go to state 3
    NOT             shift and go to state 10
    ECHO            shift and go to state 11
    LOAD            shift and go to state 12
    EVAL            shift and go to state 13
    {               shift and go to state 14
    NUM             shift and go to state 8
    STR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17

    exp                            shift and go to state 70
    cmp                            shift and go to state 5
    ifc                            shift and go to state 6

state 31

    (2) exp -> ID - . ASG exp
    (38) exp -> ID - . exp
    (1) exp -> . ID + ASG exp
    (2) exp -> . ID - ASG exp
    (3) exp -> . ID USG
    (4) exp -> . ID * ASG exp
    (5) exp -> . ID DIV ASG exp
    (6) exp -> . ID MOD ASG exp
    (7) exp -> . ID POW ASG exp
    (8) exp -> . ID OR ASG exp
    (9) exp -> . ID XOR ASG exp
    (10) exp -> . ID AND ASG exp
    (11) exp -> . ID ASG exp
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp DIV exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp POW exp
    (18) exp -> . exp OR exp
    (19) exp -> . exp XOR exp
    (20) exp -> . exp AND exp
    (23) exp -> . cmp
    (27) exp -> . ifc END
    (28) exp -> . FOR ID IN it : exp END
    (29) exp -> . FOR NUM ID IN it : exp END
    (30) exp -> . ( exp )
    (31) exp -> . ID
    (36) exp -> . exp IN it
    (37) exp -> . ID + exp
    (38) exp -> . ID - exp
    (39) exp -> . - exp
    (40) exp -> . ID * exp
    (41) exp -> . ID DIV exp
    (42) exp -> . ID MOD exp
    (43) exp -> . ID POW exp
    (44) exp -> . ID OR exp
    (45) exp -> . ID XOR exp
    (46) exp -> . ID AND exp
    (47) exp -> . + exp
    (48) exp -> . NOT exp
    (49) exp -> . ECHO exp
    (50) exp -> . LOAD exp
    (51) exp -> . EVAL exp
    (55) exp -> . { seq }
    (56) exp -> . NUM
    (57) exp -> . STR
    (58) exp -> . WHILE exp : exp END
    (21) cmp -> . exp CMP exp
    (22) cmp -> . cmp CMP exp
    (24) ifc -> . IF exp : exp
    (25) ifc -> . IF exp : exp ELSE exp
    (26) ifc -> . IF exp : exp ELSE ifc

    ASG             shift and go to state 71
    ID              shift and go to state 2
    FOR             shift and go to state 7
    (               shift and go to state 9
    -               shift and go to state 4
    +               shift and go to state 3
    NOT             shift and go to state 10
    ECHO            shift and go to state 11
    LOAD            shift and go to state 12
    EVAL            shift and go to state 13
    {               shift and go to state 14
    NUM             shift and go to state 8
    STR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17

    exp                            shift and go to state 72
    cmp                            shift and go to state 5
    ifc                            shift and go to state 6

state 32

    (3) exp -> ID USG .

    +               reduce using rule 3 (exp -> ID USG .)
    -               reduce using rule 3 (exp -> ID USG .)
    *               reduce using rule 3 (exp -> ID USG .)
    DIV             reduce using rule 3 (exp -> ID USG .)
    MOD             reduce using rule 3 (exp -> ID USG .)
    POW             reduce using rule 3 (exp -> ID USG .)
    OR              reduce using rule 3 (exp -> ID USG .)
    XOR             reduce using rule 3 (exp -> ID USG .)
    AND             reduce using rule 3 (exp -> ID USG .)
    IN              reduce using rule 3 (exp -> ID USG .)
    CMP             reduce using rule 3 (exp -> ID USG .)
    $end            reduce using rule 3 (exp -> ID USG .)
    )               reduce using rule 3 (exp -> ID USG .)
    ;               reduce using rule 3 (exp -> ID USG .)
    }               reduce using rule 3 (exp -> ID USG .)
    :               reduce using rule 3 (exp -> ID USG .)
    ,               reduce using rule 3 (exp -> ID USG .)
    END             reduce using rule 3 (exp -> ID USG .)
    ELSE            reduce using rule 3 (exp -> ID USG .)
    ]               reduce using rule 3 (exp -> ID USG .)
    [               reduce using rule 3 (exp -> ID USG .)


state 33

    (4) exp -> ID * . ASG exp
    (40) exp -> ID * . exp
    (1) exp -> . ID + ASG exp
    (2) exp -> . ID - ASG exp
    (3) exp -> . ID USG
    (4) exp -> . ID * ASG exp
    (5) exp -> . ID DIV ASG exp
    (6) exp -> . ID MOD ASG exp
    (7) exp -> . ID POW ASG exp
    (8) exp -> . ID OR ASG exp
    (9) exp -> . ID XOR ASG exp
    (10) exp -> . ID AND ASG exp
    (11) exp -> . ID ASG exp
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp DIV exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp POW exp
    (18) exp -> . exp OR exp
    (19) exp -> . exp XOR exp
    (20) exp -> . exp AND exp
    (23) exp -> . cmp
    (27) exp -> . ifc END
    (28) exp -> . FOR ID IN it : exp END
    (29) exp -> . FOR NUM ID IN it : exp END
    (30) exp -> . ( exp )
    (31) exp -> . ID
    (36) exp -> . exp IN it
    (37) exp -> . ID + exp
    (38) exp -> . ID - exp
    (39) exp -> . - exp
    (40) exp -> . ID * exp
    (41) exp -> . ID DIV exp
    (42) exp -> . ID MOD exp
    (43) exp -> . ID POW exp
    (44) exp -> . ID OR exp
    (45) exp -> . ID XOR exp
    (46) exp -> . ID AND exp
    (47) exp -> . + exp
    (48) exp -> . NOT exp
    (49) exp -> . ECHO exp
    (50) exp -> . LOAD exp
    (51) exp -> . EVAL exp
    (55) exp -> . { seq }
    (56) exp -> . NUM
    (57) exp -> . STR
    (58) exp -> . WHILE exp : exp END
    (21) cmp -> . exp CMP exp
    (22) cmp -> . cmp CMP exp
    (24) ifc -> . IF exp : exp
    (25) ifc -> . IF exp : exp ELSE exp
    (26) ifc -> . IF exp : exp ELSE ifc

    ASG             shift and go to state 73
    ID              shift and go to state 2
    FOR             shift and go to state 7
    (               shift and go to state 9
    -               shift and go to state 4
    +               shift and go to state 3
    NOT             shift and go to state 10
    ECHO            shift and go to state 11
    LOAD            shift and go to state 12
    EVAL            shift and go to state 13
    {               shift and go to state 14
    NUM             shift and go to state 8
    STR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17

    exp                            shift and go to state 74
    cmp                            shift and go to state 5
    ifc                            shift and go to state 6

state 34

    (5) exp -> ID DIV . ASG exp
    (41) exp -> ID DIV . exp
    (1) exp -> . ID + ASG exp
    (2) exp -> . ID - ASG exp
    (3) exp -> . ID USG
    (4) exp -> . ID * ASG exp
    (5) exp -> . ID DIV ASG exp
    (6) exp -> . ID MOD ASG exp
    (7) exp -> . ID POW ASG exp
    (8) exp -> . ID OR ASG exp
    (9) exp -> . ID XOR ASG exp
    (10) exp -> . ID AND ASG exp
    (11) exp -> . ID ASG exp
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp DIV exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp POW exp
    (18) exp -> . exp OR exp
    (19) exp -> . exp XOR exp
    (20) exp -> . exp AND exp
    (23) exp -> . cmp
    (27) exp -> . ifc END
    (28) exp -> . FOR ID IN it : exp END
    (29) exp -> . FOR NUM ID IN it : exp END
    (30) exp -> . ( exp )
    (31) exp -> . ID
    (36) exp -> . exp IN it
    (37) exp -> . ID + exp
    (38) exp -> . ID - exp
    (39) exp -> . - exp
    (40) exp -> . ID * exp
    (41) exp -> . ID DIV exp
    (42) exp -> . ID MOD exp
    (43) exp -> . ID POW exp
    (44) exp -> . ID OR exp
    (45) exp -> . ID XOR exp
    (46) exp -> . ID AND exp
    (47) exp -> . + exp
    (48) exp -> . NOT exp
    (49) exp -> . ECHO exp
    (50) exp -> . LOAD exp
    (51) exp -> . EVAL exp
    (55) exp -> . { seq }
    (56) exp -> . NUM
    (57) exp -> . STR
    (58) exp -> . WHILE exp : exp END
    (21) cmp -> . exp CMP exp
    (22) cmp -> . cmp CMP exp
    (24) ifc -> . IF exp : exp
    (25) ifc -> . IF exp : exp ELSE exp
    (26) ifc -> . IF exp : exp ELSE ifc

    ASG             shift and go to state 75
    ID              shift and go to state 2
    FOR             shift and go to state 7
    (               shift and go to state 9
    -               shift and go to state 4
    +               shift and go to state 3
    NOT             shift and go to state 10
    ECHO            shift and go to state 11
    LOAD            shift and go to state 12
    EVAL            shift and go to state 13
    {               shift and go to state 14
    NUM             shift and go to state 8
    STR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17

    exp                            shift and go to state 76
    cmp                            shift and go to state 5
    ifc                            shift and go to state 6

state 35

    (6) exp -> ID MOD . ASG exp
    (42) exp -> ID MOD . exp
    (1) exp -> . ID + ASG exp
    (2) exp -> . ID - ASG exp
    (3) exp -> . ID USG
    (4) exp -> . ID * ASG exp
    (5) exp -> . ID DIV ASG exp
    (6) exp -> . ID MOD ASG exp
    (7) exp -> . ID POW ASG exp
    (8) exp -> . ID OR ASG exp
    (9) exp -> . ID XOR ASG exp
    (10) exp -> . ID AND ASG exp
    (11) exp -> . ID ASG exp
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp DIV exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp POW exp
    (18) exp -> . exp OR exp
    (19) exp -> . exp XOR exp
    (20) exp -> . exp AND exp
    (23) exp -> . cmp
    (27) exp -> . ifc END
    (28) exp -> . FOR ID IN it : exp END
    (29) exp -> . FOR NUM ID IN it : exp END
    (30) exp -> . ( exp )
    (31) exp -> . ID
    (36) exp -> . exp IN it
    (37) exp -> . ID + exp
    (38) exp -> . ID - exp
    (39) exp -> . - exp
    (40) exp -> . ID * exp
    (41) exp -> . ID DIV exp
    (42) exp -> . ID MOD exp
    (43) exp -> . ID POW exp
    (44) exp -> . ID OR exp
    (45) exp -> . ID XOR exp
    (46) exp -> . ID AND exp
    (47) exp -> . + exp
    (48) exp -> . NOT exp
    (49) exp -> . ECHO exp
    (50) exp -> . LOAD exp
    (51) exp -> . EVAL exp
    (55) exp -> . { seq }
    (56) exp -> . NUM
    (57) exp -> . STR
    (58) exp -> . WHILE exp : exp END
    (21) cmp -> . exp CMP exp
    (22) cmp -> . cmp CMP exp
    (24) ifc -> . IF exp : exp
    (25) ifc -> . IF exp : exp ELSE exp
    (26) ifc -> . IF exp : exp ELSE ifc

    ASG             shift and go to state 77
    ID              shift and go to state 2
    FOR             shift and go to state 7
    (               shift and go to state 9
    -               shift and go to state 4
    +               shift and go to state 3
    NOT             shift and go to state 10
    ECHO            shift and go to state 11
    LOAD            shift and go to state 12
    EVAL            shift and go to state 13
    {               shift and go to state 14
    NUM             shift and go to state 8
    STR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17

    exp                            shift and go to state 78
    cmp                            shift and go to state 5
    ifc                            shift and go to state 6

state 36

    (7) exp -> ID POW . ASG exp
    (43) exp -> ID POW . exp
    (1) exp -> . ID + ASG exp
    (2) exp -> . ID - ASG exp
    (3) exp -> . ID USG
    (4) exp -> . ID * ASG exp
    (5) exp -> . ID DIV ASG exp
    (6) exp -> . ID MOD ASG exp
    (7) exp -> . ID POW ASG exp
    (8) exp -> . ID OR ASG exp
    (9) exp -> . ID XOR ASG exp
    (10) exp -> . ID AND ASG exp
    (11) exp -> . ID ASG exp
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp DIV exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp POW exp
    (18) exp -> . exp OR exp
    (19) exp -> . exp XOR exp
    (20) exp -> . exp AND exp
    (23) exp -> . cmp
    (27) exp -> . ifc END
    (28) exp -> . FOR ID IN it : exp END
    (29) exp -> . FOR NUM ID IN it : exp END
    (30) exp -> . ( exp )
    (31) exp -> . ID
    (36) exp -> . exp IN it
    (37) exp -> . ID + exp
    (38) exp -> . ID - exp
    (39) exp -> . - exp
    (40) exp -> . ID * exp
    (41) exp -> . ID DIV exp
    (42) exp -> . ID MOD exp
    (43) exp -> . ID POW exp
    (44) exp -> . ID OR exp
    (45) exp -> . ID XOR exp
    (46) exp -> . ID AND exp
    (47) exp -> . + exp
    (48) exp -> . NOT exp
    (49) exp -> . ECHO exp
    (50) exp -> . LOAD exp
    (51) exp -> . EVAL exp
    (55) exp -> . { seq }
    (56) exp -> . NUM
    (57) exp -> . STR
    (58) exp -> . WHILE exp : exp END
    (21) cmp -> . exp CMP exp
    (22) cmp -> . cmp CMP exp
    (24) ifc -> . IF exp : exp
    (25) ifc -> . IF exp : exp ELSE exp
    (26) ifc -> . IF exp : exp ELSE ifc

    ASG             shift and go to state 79
    ID              shift and go to state 2
    FOR             shift and go to state 7
    (               shift and go to state 9
    -               shift and go to state 4
    +               shift and go to state 3
    NOT             shift and go to state 10
    ECHO            shift and go to state 11
    LOAD            shift and go to state 12
    EVAL            shift and go to state 13
    {               shift and go to state 14
    NUM             shift and go to state 8
    STR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17

    exp                            shift and go to state 80
    cmp                            shift and go to state 5
    ifc                            shift and go to state 6

state 37

    (8) exp -> ID OR . ASG exp
    (44) exp -> ID OR . exp
    (1) exp -> . ID + ASG exp
    (2) exp -> . ID - ASG exp
    (3) exp -> . ID USG
    (4) exp -> . ID * ASG exp
    (5) exp -> . ID DIV ASG exp
    (6) exp -> . ID MOD ASG exp
    (7) exp -> . ID POW ASG exp
    (8) exp -> . ID OR ASG exp
    (9) exp -> . ID XOR ASG exp
    (10) exp -> . ID AND ASG exp
    (11) exp -> . ID ASG exp
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp DIV exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp POW exp
    (18) exp -> . exp OR exp
    (19) exp -> . exp XOR exp
    (20) exp -> . exp AND exp
    (23) exp -> . cmp
    (27) exp -> . ifc END
    (28) exp -> . FOR ID IN it : exp END
    (29) exp -> . FOR NUM ID IN it : exp END
    (30) exp -> . ( exp )
    (31) exp -> . ID
    (36) exp -> . exp IN it
    (37) exp -> . ID + exp
    (38) exp -> . ID - exp
    (39) exp -> . - exp
    (40) exp -> . ID * exp
    (41) exp -> . ID DIV exp
    (42) exp -> . ID MOD exp
    (43) exp -> . ID POW exp
    (44) exp -> . ID OR exp
    (45) exp -> . ID XOR exp
    (46) exp -> . ID AND exp
    (47) exp -> . + exp
    (48) exp -> . NOT exp
    (49) exp -> . ECHO exp
    (50) exp -> . LOAD exp
    (51) exp -> . EVAL exp
    (55) exp -> . { seq }
    (56) exp -> . NUM
    (57) exp -> . STR
    (58) exp -> . WHILE exp : exp END
    (21) cmp -> . exp CMP exp
    (22) cmp -> . cmp CMP exp
    (24) ifc -> . IF exp : exp
    (25) ifc -> . IF exp : exp ELSE exp
    (26) ifc -> . IF exp : exp ELSE ifc

    ASG             shift and go to state 81
    ID              shift and go to state 2
    FOR             shift and go to state 7
    (               shift and go to state 9
    -               shift and go to state 4
    +               shift and go to state 3
    NOT             shift and go to state 10
    ECHO            shift and go to state 11
    LOAD            shift and go to state 12
    EVAL            shift and go to state 13
    {               shift and go to state 14
    NUM             shift and go to state 8
    STR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17

    exp                            shift and go to state 82
    cmp                            shift and go to state 5
    ifc                            shift and go to state 6

state 38

    (9) exp -> ID XOR . ASG exp
    (45) exp -> ID XOR . exp
    (1) exp -> . ID + ASG exp
    (2) exp -> . ID - ASG exp
    (3) exp -> . ID USG
    (4) exp -> . ID * ASG exp
    (5) exp -> . ID DIV ASG exp
    (6) exp -> . ID MOD ASG exp
    (7) exp -> . ID POW ASG exp
    (8) exp -> . ID OR ASG exp
    (9) exp -> . ID XOR ASG exp
    (10) exp -> . ID AND ASG exp
    (11) exp -> . ID ASG exp
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp DIV exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp POW exp
    (18) exp -> . exp OR exp
    (19) exp -> . exp XOR exp
    (20) exp -> . exp AND exp
    (23) exp -> . cmp
    (27) exp -> . ifc END
    (28) exp -> . FOR ID IN it : exp END
    (29) exp -> . FOR NUM ID IN it : exp END
    (30) exp -> . ( exp )
    (31) exp -> . ID
    (36) exp -> . exp IN it
    (37) exp -> . ID + exp
    (38) exp -> . ID - exp
    (39) exp -> . - exp
    (40) exp -> . ID * exp
    (41) exp -> . ID DIV exp
    (42) exp -> . ID MOD exp
    (43) exp -> . ID POW exp
    (44) exp -> . ID OR exp
    (45) exp -> . ID XOR exp
    (46) exp -> . ID AND exp
    (47) exp -> . + exp
    (48) exp -> . NOT exp
    (49) exp -> . ECHO exp
    (50) exp -> . LOAD exp
    (51) exp -> . EVAL exp
    (55) exp -> . { seq }
    (56) exp -> . NUM
    (57) exp -> . STR
    (58) exp -> . WHILE exp : exp END
    (21) cmp -> . exp CMP exp
    (22) cmp -> . cmp CMP exp
    (24) ifc -> . IF exp : exp
    (25) ifc -> . IF exp : exp ELSE exp
    (26) ifc -> . IF exp : exp ELSE ifc

    ASG             shift and go to state 83
    ID              shift and go to state 2
    FOR             shift and go to state 7
    (               shift and go to state 9
    -               shift and go to state 4
    +               shift and go to state 3
    NOT             shift and go to state 10
    ECHO            shift and go to state 11
    LOAD            shift and go to state 12
    EVAL            shift and go to state 13
    {               shift and go to state 14
    NUM             shift and go to state 8
    STR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17

    exp                            shift and go to state 84
    cmp                            shift and go to state 5
    ifc                            shift and go to state 6

state 39

    (10) exp -> ID AND . ASG exp
    (46) exp -> ID AND . exp
    (1) exp -> . ID + ASG exp
    (2) exp -> . ID - ASG exp
    (3) exp -> . ID USG
    (4) exp -> . ID * ASG exp
    (5) exp -> . ID DIV ASG exp
    (6) exp -> . ID MOD ASG exp
    (7) exp -> . ID POW ASG exp
    (8) exp -> . ID OR ASG exp
    (9) exp -> . ID XOR ASG exp
    (10) exp -> . ID AND ASG exp
    (11) exp -> . ID ASG exp
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp DIV exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp POW exp
    (18) exp -> . exp OR exp
    (19) exp -> . exp XOR exp
    (20) exp -> . exp AND exp
    (23) exp -> . cmp
    (27) exp -> . ifc END
    (28) exp -> . FOR ID IN it : exp END
    (29) exp -> . FOR NUM ID IN it : exp END
    (30) exp -> . ( exp )
    (31) exp -> . ID
    (36) exp -> . exp IN it
    (37) exp -> . ID + exp
    (38) exp -> . ID - exp
    (39) exp -> . - exp
    (40) exp -> . ID * exp
    (41) exp -> . ID DIV exp
    (42) exp -> . ID MOD exp
    (43) exp -> . ID POW exp
    (44) exp -> . ID OR exp
    (45) exp -> . ID XOR exp
    (46) exp -> . ID AND exp
    (47) exp -> . + exp
    (48) exp -> . NOT exp
    (49) exp -> . ECHO exp
    (50) exp -> . LOAD exp
    (51) exp -> . EVAL exp
    (55) exp -> . { seq }
    (56) exp -> . NUM
    (57) exp -> . STR
    (58) exp -> . WHILE exp : exp END
    (21) cmp -> . exp CMP exp
    (22) cmp -> . cmp CMP exp
    (24) ifc -> . IF exp : exp
    (25) ifc -> . IF exp : exp ELSE exp
    (26) ifc -> . IF exp : exp ELSE ifc

    ASG             shift and go to state 85
    ID              shift and go to state 2
    FOR             shift and go to state 7
    (               shift and go to state 9
    -               shift and go to state 4
    +               shift and go to state 3
    NOT             shift and go to state 10
    ECHO            shift and go to state 11
    LOAD            shift and go to state 12
    EVAL            shift and go to state 13
    {               shift and go to state 14
    NUM             shift and go to state 8
    STR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17

    exp                            shift and go to state 86
    cmp                            shift and go to state 5
    ifc                            shift and go to state 6

state 40

    (47) exp -> + exp .
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . DIV exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . POW exp
    (18) exp -> exp . OR exp
    (19) exp -> exp . XOR exp
    (20) exp -> exp . AND exp
    (36) exp -> exp . IN it
    (21) cmp -> exp . CMP exp

    +               reduce using rule 47 (exp -> + exp .)
    -               reduce using rule 47 (exp -> + exp .)
    OR              reduce using rule 47 (exp -> + exp .)
    XOR             reduce using rule 47 (exp -> + exp .)
    AND             reduce using rule 47 (exp -> + exp .)
    IN              reduce using rule 47 (exp -> + exp .)
    CMP             reduce using rule 47 (exp -> + exp .)
    $end            reduce using rule 47 (exp -> + exp .)
    )               reduce using rule 47 (exp -> + exp .)
    ;               reduce using rule 47 (exp -> + exp .)
    }               reduce using rule 47 (exp -> + exp .)
    :               reduce using rule 47 (exp -> + exp .)
    ,               reduce using rule 47 (exp -> + exp .)
    END             reduce using rule 47 (exp -> + exp .)
    ELSE            reduce using rule 47 (exp -> + exp .)
    ]               reduce using rule 47 (exp -> + exp .)
    [               reduce using rule 47 (exp -> + exp .)
    *               shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    POW             shift and go to state 23

  ! *               [ reduce using rule 47 (exp -> + exp .) ]
  ! DIV             [ reduce using rule 47 (exp -> + exp .) ]
  ! MOD             [ reduce using rule 47 (exp -> + exp .) ]
  ! POW             [ reduce using rule 47 (exp -> + exp .) ]
  ! +               [ shift and go to state 18 ]
  ! -               [ shift and go to state 19 ]
  ! OR              [ shift and go to state 24 ]
  ! XOR             [ shift and go to state 25 ]
  ! AND             [ shift and go to state 26 ]
  ! IN              [ shift and go to state 27 ]
  ! CMP             [ shift and go to state 28 ]


state 41

    (39) exp -> - exp .
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . DIV exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . POW exp
    (18) exp -> exp . OR exp
    (19) exp -> exp . XOR exp
    (20) exp -> exp . AND exp
    (36) exp -> exp . IN it
    (21) cmp -> exp . CMP exp

    +               reduce using rule 39 (exp -> - exp .)
    -               reduce using rule 39 (exp -> - exp .)
    OR              reduce using rule 39 (exp -> - exp .)
    XOR             reduce using rule 39 (exp -> - exp .)
    AND             reduce using rule 39 (exp -> - exp .)
    IN              reduce using rule 39 (exp -> - exp .)
    CMP             reduce using rule 39 (exp -> - exp .)
    $end            reduce using rule 39 (exp -> - exp .)
    )               reduce using rule 39 (exp -> - exp .)
    ;               reduce using rule 39 (exp -> - exp .)
    }               reduce using rule 39 (exp -> - exp .)
    :               reduce using rule 39 (exp -> - exp .)
    ,               reduce using rule 39 (exp -> - exp .)
    END             reduce using rule 39 (exp -> - exp .)
    ELSE            reduce using rule 39 (exp -> - exp .)
    ]               reduce using rule 39 (exp -> - exp .)
    [               reduce using rule 39 (exp -> - exp .)
    *               shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    POW             shift and go to state 23

  ! *               [ reduce using rule 39 (exp -> - exp .) ]
  ! DIV             [ reduce using rule 39 (exp -> - exp .) ]
  ! MOD             [ reduce using rule 39 (exp -> - exp .) ]
  ! POW             [ reduce using rule 39 (exp -> - exp .) ]
  ! +               [ shift and go to state 18 ]
  ! -               [ shift and go to state 19 ]
  ! OR              [ shift and go to state 24 ]
  ! XOR             [ shift and go to state 25 ]
  ! AND             [ shift and go to state 26 ]
  ! IN              [ shift and go to state 27 ]
  ! CMP             [ shift and go to state 28 ]


state 42

    (22) cmp -> cmp CMP . exp
    (1) exp -> . ID + ASG exp
    (2) exp -> . ID - ASG exp
    (3) exp -> . ID USG
    (4) exp -> . ID * ASG exp
    (5) exp -> . ID DIV ASG exp
    (6) exp -> . ID MOD ASG exp
    (7) exp -> . ID POW ASG exp
    (8) exp -> . ID OR ASG exp
    (9) exp -> . ID XOR ASG exp
    (10) exp -> . ID AND ASG exp
    (11) exp -> . ID ASG exp
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp DIV exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp POW exp
    (18) exp -> . exp OR exp
    (19) exp -> . exp XOR exp
    (20) exp -> . exp AND exp
    (23) exp -> . cmp
    (27) exp -> . ifc END
    (28) exp -> . FOR ID IN it : exp END
    (29) exp -> . FOR NUM ID IN it : exp END
    (30) exp -> . ( exp )
    (31) exp -> . ID
    (36) exp -> . exp IN it
    (37) exp -> . ID + exp
    (38) exp -> . ID - exp
    (39) exp -> . - exp
    (40) exp -> . ID * exp
    (41) exp -> . ID DIV exp
    (42) exp -> . ID MOD exp
    (43) exp -> . ID POW exp
    (44) exp -> . ID OR exp
    (45) exp -> . ID XOR exp
    (46) exp -> . ID AND exp
    (47) exp -> . + exp
    (48) exp -> . NOT exp
    (49) exp -> . ECHO exp
    (50) exp -> . LOAD exp
    (51) exp -> . EVAL exp
    (55) exp -> . { seq }
    (56) exp -> . NUM
    (57) exp -> . STR
    (58) exp -> . WHILE exp : exp END
    (21) cmp -> . exp CMP exp
    (22) cmp -> . cmp CMP exp
    (24) ifc -> . IF exp : exp
    (25) ifc -> . IF exp : exp ELSE exp
    (26) ifc -> . IF exp : exp ELSE ifc

    ID              shift and go to state 2
    FOR             shift and go to state 7
    (               shift and go to state 9
    -               shift and go to state 4
    +               shift and go to state 3
    NOT             shift and go to state 10
    ECHO            shift and go to state 11
    LOAD            shift and go to state 12
    EVAL            shift and go to state 13
    {               shift and go to state 14
    NUM             shift and go to state 8
    STR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17

    cmp                            shift and go to state 5
    exp                            shift and go to state 87
    ifc                            shift and go to state 6

state 43

    (27) exp -> ifc END .

    +               reduce using rule 27 (exp -> ifc END .)
    -               reduce using rule 27 (exp -> ifc END .)
    *               reduce using rule 27 (exp -> ifc END .)
    DIV             reduce using rule 27 (exp -> ifc END .)
    MOD             reduce using rule 27 (exp -> ifc END .)
    POW             reduce using rule 27 (exp -> ifc END .)
    OR              reduce using rule 27 (exp -> ifc END .)
    XOR             reduce using rule 27 (exp -> ifc END .)
    AND             reduce using rule 27 (exp -> ifc END .)
    IN              reduce using rule 27 (exp -> ifc END .)
    CMP             reduce using rule 27 (exp -> ifc END .)
    $end            reduce using rule 27 (exp -> ifc END .)
    )               reduce using rule 27 (exp -> ifc END .)
    ;               reduce using rule 27 (exp -> ifc END .)
    }               reduce using rule 27 (exp -> ifc END .)
    :               reduce using rule 27 (exp -> ifc END .)
    ,               reduce using rule 27 (exp -> ifc END .)
    END             reduce using rule 27 (exp -> ifc END .)
    ELSE            reduce using rule 27 (exp -> ifc END .)
    ]               reduce using rule 27 (exp -> ifc END .)
    [               reduce using rule 27 (exp -> ifc END .)


state 44

    (28) exp -> FOR ID . IN it : exp END

    IN              shift and go to state 88


state 45

    (29) exp -> FOR NUM . ID IN it : exp END

    ID              shift and go to state 89


state 46

    (30) exp -> ( exp . )
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . DIV exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . POW exp
    (18) exp -> exp . OR exp
    (19) exp -> exp . XOR exp
    (20) exp -> exp . AND exp
    (36) exp -> exp . IN it
    (21) cmp -> exp . CMP exp

    )               shift and go to state 90
    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    POW             shift and go to state 23
    OR              shift and go to state 24
    XOR             shift and go to state 25
    AND             shift and go to state 26
    IN              shift and go to state 27
    CMP             shift and go to state 28


state 47

    (48) exp -> NOT exp .
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . DIV exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . POW exp
    (18) exp -> exp . OR exp
    (19) exp -> exp . XOR exp
    (20) exp -> exp . AND exp
    (36) exp -> exp . IN it
    (21) cmp -> exp . CMP exp

    +               reduce using rule 48 (exp -> NOT exp .)
    -               reduce using rule 48 (exp -> NOT exp .)
    *               reduce using rule 48 (exp -> NOT exp .)
    DIV             reduce using rule 48 (exp -> NOT exp .)
    MOD             reduce using rule 48 (exp -> NOT exp .)
    POW             reduce using rule 48 (exp -> NOT exp .)
    OR              reduce using rule 48 (exp -> NOT exp .)
    XOR             reduce using rule 48 (exp -> NOT exp .)
    AND             reduce using rule 48 (exp -> NOT exp .)
    IN              reduce using rule 48 (exp -> NOT exp .)
    CMP             reduce using rule 48 (exp -> NOT exp .)
    $end            reduce using rule 48 (exp -> NOT exp .)
    )               reduce using rule 48 (exp -> NOT exp .)
    ;               reduce using rule 48 (exp -> NOT exp .)
    }               reduce using rule 48 (exp -> NOT exp .)
    :               reduce using rule 48 (exp -> NOT exp .)
    ,               reduce using rule 48 (exp -> NOT exp .)
    END             reduce using rule 48 (exp -> NOT exp .)
    ELSE            reduce using rule 48 (exp -> NOT exp .)
    ]               reduce using rule 48 (exp -> NOT exp .)
    [               reduce using rule 48 (exp -> NOT exp .)

  ! +               [ shift and go to state 18 ]
  ! -               [ shift and go to state 19 ]
  ! *               [ shift and go to state 20 ]
  ! DIV             [ shift and go to state 21 ]
  ! MOD             [ shift and go to state 22 ]
  ! POW             [ shift and go to state 23 ]
  ! OR              [ shift and go to state 24 ]
  ! XOR             [ shift and go to state 25 ]
  ! AND             [ shift and go to state 26 ]
  ! IN              [ shift and go to state 27 ]
  ! CMP             [ shift and go to state 28 ]


state 48

    (49) exp -> ECHO exp .
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . DIV exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . POW exp
    (18) exp -> exp . OR exp
    (19) exp -> exp . XOR exp
    (20) exp -> exp . AND exp
    (36) exp -> exp . IN it
    (21) cmp -> exp . CMP exp

    IN              reduce using rule 49 (exp -> ECHO exp .)
    $end            reduce using rule 49 (exp -> ECHO exp .)
    )               reduce using rule 49 (exp -> ECHO exp .)
    ;               reduce using rule 49 (exp -> ECHO exp .)
    }               reduce using rule 49 (exp -> ECHO exp .)
    :               reduce using rule 49 (exp -> ECHO exp .)
    ,               reduce using rule 49 (exp -> ECHO exp .)
    END             reduce using rule 49 (exp -> ECHO exp .)
    ELSE            reduce using rule 49 (exp -> ECHO exp .)
    ]               reduce using rule 49 (exp -> ECHO exp .)
    [               reduce using rule 49 (exp -> ECHO exp .)
    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    POW             shift and go to state 23
    OR              shift and go to state 24
    XOR             shift and go to state 25
    AND             shift and go to state 26
    CMP             shift and go to state 28

  ! +               [ reduce using rule 49 (exp -> ECHO exp .) ]
  ! -               [ reduce using rule 49 (exp -> ECHO exp .) ]
  ! *               [ reduce using rule 49 (exp -> ECHO exp .) ]
  ! DIV             [ reduce using rule 49 (exp -> ECHO exp .) ]
  ! MOD             [ reduce using rule 49 (exp -> ECHO exp .) ]
  ! POW             [ reduce using rule 49 (exp -> ECHO exp .) ]
  ! OR              [ reduce using rule 49 (exp -> ECHO exp .) ]
  ! XOR             [ reduce using rule 49 (exp -> ECHO exp .) ]
  ! AND             [ reduce using rule 49 (exp -> ECHO exp .) ]
  ! CMP             [ reduce using rule 49 (exp -> ECHO exp .) ]
  ! IN              [ shift and go to state 27 ]


state 49

    (50) exp -> LOAD exp .
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . DIV exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . POW exp
    (18) exp -> exp . OR exp
    (19) exp -> exp . XOR exp
    (20) exp -> exp . AND exp
    (36) exp -> exp . IN it
    (21) cmp -> exp . CMP exp

    IN              reduce using rule 50 (exp -> LOAD exp .)
    $end            reduce using rule 50 (exp -> LOAD exp .)
    )               reduce using rule 50 (exp -> LOAD exp .)
    ;               reduce using rule 50 (exp -> LOAD exp .)
    }               reduce using rule 50 (exp -> LOAD exp .)
    :               reduce using rule 50 (exp -> LOAD exp .)
    ,               reduce using rule 50 (exp -> LOAD exp .)
    END             reduce using rule 50 (exp -> LOAD exp .)
    ELSE            reduce using rule 50 (exp -> LOAD exp .)
    ]               reduce using rule 50 (exp -> LOAD exp .)
    [               reduce using rule 50 (exp -> LOAD exp .)
    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    POW             shift and go to state 23
    OR              shift and go to state 24
    XOR             shift and go to state 25
    AND             shift and go to state 26
    CMP             shift and go to state 28

  ! +               [ reduce using rule 50 (exp -> LOAD exp .) ]
  ! -               [ reduce using rule 50 (exp -> LOAD exp .) ]
  ! *               [ reduce using rule 50 (exp -> LOAD exp .) ]
  ! DIV             [ reduce using rule 50 (exp -> LOAD exp .) ]
  ! MOD             [ reduce using rule 50 (exp -> LOAD exp .) ]
  ! POW             [ reduce using rule 50 (exp -> LOAD exp .) ]
  ! OR              [ reduce using rule 50 (exp -> LOAD exp .) ]
  ! XOR             [ reduce using rule 50 (exp -> LOAD exp .) ]
  ! AND             [ reduce using rule 50 (exp -> LOAD exp .) ]
  ! CMP             [ reduce using rule 50 (exp -> LOAD exp .) ]
  ! IN              [ shift and go to state 27 ]


state 50

    (51) exp -> EVAL exp .
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . DIV exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . POW exp
    (18) exp -> exp . OR exp
    (19) exp -> exp . XOR exp
    (20) exp -> exp . AND exp
    (36) exp -> exp . IN it
    (21) cmp -> exp . CMP exp

    IN              reduce using rule 51 (exp -> EVAL exp .)
    $end            reduce using rule 51 (exp -> EVAL exp .)
    )               reduce using rule 51 (exp -> EVAL exp .)
    ;               reduce using rule 51 (exp -> EVAL exp .)
    }               reduce using rule 51 (exp -> EVAL exp .)
    :               reduce using rule 51 (exp -> EVAL exp .)
    ,               reduce using rule 51 (exp -> EVAL exp .)
    END             reduce using rule 51 (exp -> EVAL exp .)
    ELSE            reduce using rule 51 (exp -> EVAL exp .)
    ]               reduce using rule 51 (exp -> EVAL exp .)
    [               reduce using rule 51 (exp -> EVAL exp .)
    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    POW             shift and go to state 23
    OR              shift and go to state 24
    XOR             shift and go to state 25
    AND             shift and go to state 26
    CMP             shift and go to state 28

  ! +               [ reduce using rule 51 (exp -> EVAL exp .) ]
  ! -               [ reduce using rule 51 (exp -> EVAL exp .) ]
  ! *               [ reduce using rule 51 (exp -> EVAL exp .) ]
  ! DIV             [ reduce using rule 51 (exp -> EVAL exp .) ]
  ! MOD             [ reduce using rule 51 (exp -> EVAL exp .) ]
  ! POW             [ reduce using rule 51 (exp -> EVAL exp .) ]
  ! OR              [ reduce using rule 51 (exp -> EVAL exp .) ]
  ! XOR             [ reduce using rule 51 (exp -> EVAL exp .) ]
  ! AND             [ reduce using rule 51 (exp -> EVAL exp .) ]
  ! CMP             [ reduce using rule 51 (exp -> EVAL exp .) ]
  ! IN              [ shift and go to state 27 ]


state 51

    (55) exp -> { seq . }

    }               shift and go to state 91


state 52

    (52) seq -> exp . ; seq
    (53) seq -> exp . ;
    (54) seq -> exp .
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . DIV exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . POW exp
    (18) exp -> exp . OR exp
    (19) exp -> exp . XOR exp
    (20) exp -> exp . AND exp
    (36) exp -> exp . IN it
    (21) cmp -> exp . CMP exp

    ;               shift and go to state 92
    }               reduce using rule 54 (seq -> exp .)
    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    POW             shift and go to state 23
    OR              shift and go to state 24
    XOR             shift and go to state 25
    AND             shift and go to state 26
    IN              shift and go to state 27
    CMP             shift and go to state 28


state 53

    (58) exp -> WHILE exp . : exp END
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . DIV exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . POW exp
    (18) exp -> exp . OR exp
    (19) exp -> exp . XOR exp
    (20) exp -> exp . AND exp
    (36) exp -> exp . IN it
    (21) cmp -> exp . CMP exp

    :               shift and go to state 93
    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    POW             shift and go to state 23
    OR              shift and go to state 24
    XOR             shift and go to state 25
    AND             shift and go to state 26
    IN              shift and go to state 27
    CMP             shift and go to state 28


state 54

    (24) ifc -> IF exp . : exp
    (25) ifc -> IF exp . : exp ELSE exp
    (26) ifc -> IF exp . : exp ELSE ifc
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . DIV exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . POW exp
    (18) exp -> exp . OR exp
    (19) exp -> exp . XOR exp
    (20) exp -> exp . AND exp
    (36) exp -> exp . IN it
    (21) cmp -> exp . CMP exp

    :               shift and go to state 94
    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    POW             shift and go to state 23
    OR              shift and go to state 24
    XOR             shift and go to state 25
    AND             shift and go to state 26
    IN              shift and go to state 27
    CMP             shift and go to state 28


state 55

    (12) exp -> exp + exp .
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . DIV exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . POW exp
    (18) exp -> exp . OR exp
    (19) exp -> exp . XOR exp
    (20) exp -> exp . AND exp
    (36) exp -> exp . IN it
    (21) cmp -> exp . CMP exp

    +               reduce using rule 12 (exp -> exp + exp .)
    -               reduce using rule 12 (exp -> exp + exp .)
    OR              reduce using rule 12 (exp -> exp + exp .)
    XOR             reduce using rule 12 (exp -> exp + exp .)
    AND             reduce using rule 12 (exp -> exp + exp .)
    IN              reduce using rule 12 (exp -> exp + exp .)
    CMP             reduce using rule 12 (exp -> exp + exp .)
    $end            reduce using rule 12 (exp -> exp + exp .)
    )               reduce using rule 12 (exp -> exp + exp .)
    ;               reduce using rule 12 (exp -> exp + exp .)
    }               reduce using rule 12 (exp -> exp + exp .)
    :               reduce using rule 12 (exp -> exp + exp .)
    ,               reduce using rule 12 (exp -> exp + exp .)
    END             reduce using rule 12 (exp -> exp + exp .)
    ELSE            reduce using rule 12 (exp -> exp + exp .)
    ]               reduce using rule 12 (exp -> exp + exp .)
    [               reduce using rule 12 (exp -> exp + exp .)
    *               shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    POW             shift and go to state 23

  ! *               [ reduce using rule 12 (exp -> exp + exp .) ]
  ! DIV             [ reduce using rule 12 (exp -> exp + exp .) ]
  ! MOD             [ reduce using rule 12 (exp -> exp + exp .) ]
  ! POW             [ reduce using rule 12 (exp -> exp + exp .) ]
  ! +               [ shift and go to state 18 ]
  ! -               [ shift and go to state 19 ]
  ! OR              [ shift and go to state 24 ]
  ! XOR             [ shift and go to state 25 ]
  ! AND             [ shift and go to state 26 ]
  ! IN              [ shift and go to state 27 ]
  ! CMP             [ shift and go to state 28 ]


state 56

    (13) exp -> exp - exp .
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . DIV exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . POW exp
    (18) exp -> exp . OR exp
    (19) exp -> exp . XOR exp
    (20) exp -> exp . AND exp
    (36) exp -> exp . IN it
    (21) cmp -> exp . CMP exp

    +               reduce using rule 13 (exp -> exp - exp .)
    -               reduce using rule 13 (exp -> exp - exp .)
    OR              reduce using rule 13 (exp -> exp - exp .)
    XOR             reduce using rule 13 (exp -> exp - exp .)
    AND             reduce using rule 13 (exp -> exp - exp .)
    IN              reduce using rule 13 (exp -> exp - exp .)
    CMP             reduce using rule 13 (exp -> exp - exp .)
    $end            reduce using rule 13 (exp -> exp - exp .)
    )               reduce using rule 13 (exp -> exp - exp .)
    ;               reduce using rule 13 (exp -> exp - exp .)
    }               reduce using rule 13 (exp -> exp - exp .)
    :               reduce using rule 13 (exp -> exp - exp .)
    ,               reduce using rule 13 (exp -> exp - exp .)
    END             reduce using rule 13 (exp -> exp - exp .)
    ELSE            reduce using rule 13 (exp -> exp - exp .)
    ]               reduce using rule 13 (exp -> exp - exp .)
    [               reduce using rule 13 (exp -> exp - exp .)
    *               shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    POW             shift and go to state 23

  ! *               [ reduce using rule 13 (exp -> exp - exp .) ]
  ! DIV             [ reduce using rule 13 (exp -> exp - exp .) ]
  ! MOD             [ reduce using rule 13 (exp -> exp - exp .) ]
  ! POW             [ reduce using rule 13 (exp -> exp - exp .) ]
  ! +               [ shift and go to state 18 ]
  ! -               [ shift and go to state 19 ]
  ! OR              [ shift and go to state 24 ]
  ! XOR             [ shift and go to state 25 ]
  ! AND             [ shift and go to state 26 ]
  ! IN              [ shift and go to state 27 ]
  ! CMP             [ shift and go to state 28 ]


state 57

    (14) exp -> exp * exp .
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . DIV exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . POW exp
    (18) exp -> exp . OR exp
    (19) exp -> exp . XOR exp
    (20) exp -> exp . AND exp
    (36) exp -> exp . IN it
    (21) cmp -> exp . CMP exp

    +               reduce using rule 14 (exp -> exp * exp .)
    -               reduce using rule 14 (exp -> exp * exp .)
    *               reduce using rule 14 (exp -> exp * exp .)
    DIV             reduce using rule 14 (exp -> exp * exp .)
    MOD             reduce using rule 14 (exp -> exp * exp .)
    OR              reduce using rule 14 (exp -> exp * exp .)
    XOR             reduce using rule 14 (exp -> exp * exp .)
    AND             reduce using rule 14 (exp -> exp * exp .)
    IN              reduce using rule 14 (exp -> exp * exp .)
    CMP             reduce using rule 14 (exp -> exp * exp .)
    $end            reduce using rule 14 (exp -> exp * exp .)
    )               reduce using rule 14 (exp -> exp * exp .)
    ;               reduce using rule 14 (exp -> exp * exp .)
    }               reduce using rule 14 (exp -> exp * exp .)
    :               reduce using rule 14 (exp -> exp * exp .)
    ,               reduce using rule 14 (exp -> exp * exp .)
    END             reduce using rule 14 (exp -> exp * exp .)
    ELSE            reduce using rule 14 (exp -> exp * exp .)
    ]               reduce using rule 14 (exp -> exp * exp .)
    [               reduce using rule 14 (exp -> exp * exp .)
    POW             shift and go to state 23

  ! POW             [ reduce using rule 14 (exp -> exp * exp .) ]
  ! +               [ shift and go to state 18 ]
  ! -               [ shift and go to state 19 ]
  ! *               [ shift and go to state 20 ]
  ! DIV             [ shift and go to state 21 ]
  ! MOD             [ shift and go to state 22 ]
  ! OR              [ shift and go to state 24 ]
  ! XOR             [ shift and go to state 25 ]
  ! AND             [ shift and go to state 26 ]
  ! IN              [ shift and go to state 27 ]
  ! CMP             [ shift and go to state 28 ]


state 58

    (15) exp -> exp DIV exp .
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . DIV exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . POW exp
    (18) exp -> exp . OR exp
    (19) exp -> exp . XOR exp
    (20) exp -> exp . AND exp
    (36) exp -> exp . IN it
    (21) cmp -> exp . CMP exp

    +               reduce using rule 15 (exp -> exp DIV exp .)
    -               reduce using rule 15 (exp -> exp DIV exp .)
    *               reduce using rule 15 (exp -> exp DIV exp .)
    DIV             reduce using rule 15 (exp -> exp DIV exp .)
    MOD             reduce using rule 15 (exp -> exp DIV exp .)
    OR              reduce using rule 15 (exp -> exp DIV exp .)
    XOR             reduce using rule 15 (exp -> exp DIV exp .)
    AND             reduce using rule 15 (exp -> exp DIV exp .)
    IN              reduce using rule 15 (exp -> exp DIV exp .)
    CMP             reduce using rule 15 (exp -> exp DIV exp .)
    $end            reduce using rule 15 (exp -> exp DIV exp .)
    )               reduce using rule 15 (exp -> exp DIV exp .)
    ;               reduce using rule 15 (exp -> exp DIV exp .)
    }               reduce using rule 15 (exp -> exp DIV exp .)
    :               reduce using rule 15 (exp -> exp DIV exp .)
    ,               reduce using rule 15 (exp -> exp DIV exp .)
    END             reduce using rule 15 (exp -> exp DIV exp .)
    ELSE            reduce using rule 15 (exp -> exp DIV exp .)
    ]               reduce using rule 15 (exp -> exp DIV exp .)
    [               reduce using rule 15 (exp -> exp DIV exp .)
    POW             shift and go to state 23

  ! POW             [ reduce using rule 15 (exp -> exp DIV exp .) ]
  ! +               [ shift and go to state 18 ]
  ! -               [ shift and go to state 19 ]
  ! *               [ shift and go to state 20 ]
  ! DIV             [ shift and go to state 21 ]
  ! MOD             [ shift and go to state 22 ]
  ! OR              [ shift and go to state 24 ]
  ! XOR             [ shift and go to state 25 ]
  ! AND             [ shift and go to state 26 ]
  ! IN              [ shift and go to state 27 ]
  ! CMP             [ shift and go to state 28 ]


state 59

    (16) exp -> exp MOD exp .
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . DIV exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . POW exp
    (18) exp -> exp . OR exp
    (19) exp -> exp . XOR exp
    (20) exp -> exp . AND exp
    (36) exp -> exp . IN it
    (21) cmp -> exp . CMP exp

    +               reduce using rule 16 (exp -> exp MOD exp .)
    -               reduce using rule 16 (exp -> exp MOD exp .)
    *               reduce using rule 16 (exp -> exp MOD exp .)
    DIV             reduce using rule 16 (exp -> exp MOD exp .)
    MOD             reduce using rule 16 (exp -> exp MOD exp .)
    OR              reduce using rule 16 (exp -> exp MOD exp .)
    XOR             reduce using rule 16 (exp -> exp MOD exp .)
    AND             reduce using rule 16 (exp -> exp MOD exp .)
    IN              reduce using rule 16 (exp -> exp MOD exp .)
    CMP             reduce using rule 16 (exp -> exp MOD exp .)
    $end            reduce using rule 16 (exp -> exp MOD exp .)
    )               reduce using rule 16 (exp -> exp MOD exp .)
    ;               reduce using rule 16 (exp -> exp MOD exp .)
    }               reduce using rule 16 (exp -> exp MOD exp .)
    :               reduce using rule 16 (exp -> exp MOD exp .)
    ,               reduce using rule 16 (exp -> exp MOD exp .)
    END             reduce using rule 16 (exp -> exp MOD exp .)
    ELSE            reduce using rule 16 (exp -> exp MOD exp .)
    ]               reduce using rule 16 (exp -> exp MOD exp .)
    [               reduce using rule 16 (exp -> exp MOD exp .)
    POW             shift and go to state 23

  ! POW             [ reduce using rule 16 (exp -> exp MOD exp .) ]
  ! +               [ shift and go to state 18 ]
  ! -               [ shift and go to state 19 ]
  ! *               [ shift and go to state 20 ]
  ! DIV             [ shift and go to state 21 ]
  ! MOD             [ shift and go to state 22 ]
  ! OR              [ shift and go to state 24 ]
  ! XOR             [ shift and go to state 25 ]
  ! AND             [ shift and go to state 26 ]
  ! IN              [ shift and go to state 27 ]
  ! CMP             [ shift and go to state 28 ]


state 60

    (17) exp -> exp POW exp .
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . DIV exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . POW exp
    (18) exp -> exp . OR exp
    (19) exp -> exp . XOR exp
    (20) exp -> exp . AND exp
    (36) exp -> exp . IN it
    (21) cmp -> exp . CMP exp

    +               reduce using rule 17 (exp -> exp POW exp .)
    -               reduce using rule 17 (exp -> exp POW exp .)
    *               reduce using rule 17 (exp -> exp POW exp .)
    DIV             reduce using rule 17 (exp -> exp POW exp .)
    MOD             reduce using rule 17 (exp -> exp POW exp .)
    OR              reduce using rule 17 (exp -> exp POW exp .)
    XOR             reduce using rule 17 (exp -> exp POW exp .)
    AND             reduce using rule 17 (exp -> exp POW exp .)
    IN              reduce using rule 17 (exp -> exp POW exp .)
    CMP             reduce using rule 17 (exp -> exp POW exp .)
    $end            reduce using rule 17 (exp -> exp POW exp .)
    )               reduce using rule 17 (exp -> exp POW exp .)
    ;               reduce using rule 17 (exp -> exp POW exp .)
    }               reduce using rule 17 (exp -> exp POW exp .)
    :               reduce using rule 17 (exp -> exp POW exp .)
    ,               reduce using rule 17 (exp -> exp POW exp .)
    END             reduce using rule 17 (exp -> exp POW exp .)
    ELSE            reduce using rule 17 (exp -> exp POW exp .)
    ]               reduce using rule 17 (exp -> exp POW exp .)
    [               reduce using rule 17 (exp -> exp POW exp .)
    POW             shift and go to state 23

  ! POW             [ reduce using rule 17 (exp -> exp POW exp .) ]
  ! +               [ shift and go to state 18 ]
  ! -               [ shift and go to state 19 ]
  ! *               [ shift and go to state 20 ]
  ! DIV             [ shift and go to state 21 ]
  ! MOD             [ shift and go to state 22 ]
  ! OR              [ shift and go to state 24 ]
  ! XOR             [ shift and go to state 25 ]
  ! AND             [ shift and go to state 26 ]
  ! IN              [ shift and go to state 27 ]
  ! CMP             [ shift and go to state 28 ]


state 61

    (18) exp -> exp OR exp .
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . DIV exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . POW exp
    (18) exp -> exp . OR exp
    (19) exp -> exp . XOR exp
    (20) exp -> exp . AND exp
    (36) exp -> exp . IN it
    (21) cmp -> exp . CMP exp

    OR              reduce using rule 18 (exp -> exp OR exp .)
    IN              reduce using rule 18 (exp -> exp OR exp .)
    $end            reduce using rule 18 (exp -> exp OR exp .)
    )               reduce using rule 18 (exp -> exp OR exp .)
    ;               reduce using rule 18 (exp -> exp OR exp .)
    }               reduce using rule 18 (exp -> exp OR exp .)
    :               reduce using rule 18 (exp -> exp OR exp .)
    ,               reduce using rule 18 (exp -> exp OR exp .)
    END             reduce using rule 18 (exp -> exp OR exp .)
    ELSE            reduce using rule 18 (exp -> exp OR exp .)
    ]               reduce using rule 18 (exp -> exp OR exp .)
    [               reduce using rule 18 (exp -> exp OR exp .)
    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    POW             shift and go to state 23
    XOR             shift and go to state 25
    AND             shift and go to state 26
    CMP             shift and go to state 28

  ! +               [ reduce using rule 18 (exp -> exp OR exp .) ]
  ! -               [ reduce using rule 18 (exp -> exp OR exp .) ]
  ! *               [ reduce using rule 18 (exp -> exp OR exp .) ]
  ! DIV             [ reduce using rule 18 (exp -> exp OR exp .) ]
  ! MOD             [ reduce using rule 18 (exp -> exp OR exp .) ]
  ! POW             [ reduce using rule 18 (exp -> exp OR exp .) ]
  ! XOR             [ reduce using rule 18 (exp -> exp OR exp .) ]
  ! AND             [ reduce using rule 18 (exp -> exp OR exp .) ]
  ! CMP             [ reduce using rule 18 (exp -> exp OR exp .) ]
  ! OR              [ shift and go to state 24 ]
  ! IN              [ shift and go to state 27 ]


state 62

    (19) exp -> exp XOR exp .
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . DIV exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . POW exp
    (18) exp -> exp . OR exp
    (19) exp -> exp . XOR exp
    (20) exp -> exp . AND exp
    (36) exp -> exp . IN it
    (21) cmp -> exp . CMP exp

    OR              reduce using rule 19 (exp -> exp XOR exp .)
    XOR             reduce using rule 19 (exp -> exp XOR exp .)
    IN              reduce using rule 19 (exp -> exp XOR exp .)
    $end            reduce using rule 19 (exp -> exp XOR exp .)
    )               reduce using rule 19 (exp -> exp XOR exp .)
    ;               reduce using rule 19 (exp -> exp XOR exp .)
    }               reduce using rule 19 (exp -> exp XOR exp .)
    :               reduce using rule 19 (exp -> exp XOR exp .)
    ,               reduce using rule 19 (exp -> exp XOR exp .)
    END             reduce using rule 19 (exp -> exp XOR exp .)
    ELSE            reduce using rule 19 (exp -> exp XOR exp .)
    ]               reduce using rule 19 (exp -> exp XOR exp .)
    [               reduce using rule 19 (exp -> exp XOR exp .)
    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    POW             shift and go to state 23
    AND             shift and go to state 26
    CMP             shift and go to state 28

  ! +               [ reduce using rule 19 (exp -> exp XOR exp .) ]
  ! -               [ reduce using rule 19 (exp -> exp XOR exp .) ]
  ! *               [ reduce using rule 19 (exp -> exp XOR exp .) ]
  ! DIV             [ reduce using rule 19 (exp -> exp XOR exp .) ]
  ! MOD             [ reduce using rule 19 (exp -> exp XOR exp .) ]
  ! POW             [ reduce using rule 19 (exp -> exp XOR exp .) ]
  ! AND             [ reduce using rule 19 (exp -> exp XOR exp .) ]
  ! CMP             [ reduce using rule 19 (exp -> exp XOR exp .) ]
  ! OR              [ shift and go to state 24 ]
  ! XOR             [ shift and go to state 25 ]
  ! IN              [ shift and go to state 27 ]


state 63

    (20) exp -> exp AND exp .
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . DIV exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . POW exp
    (18) exp -> exp . OR exp
    (19) exp -> exp . XOR exp
    (20) exp -> exp . AND exp
    (36) exp -> exp . IN it
    (21) cmp -> exp . CMP exp

    OR              reduce using rule 20 (exp -> exp AND exp .)
    XOR             reduce using rule 20 (exp -> exp AND exp .)
    AND             reduce using rule 20 (exp -> exp AND exp .)
    IN              reduce using rule 20 (exp -> exp AND exp .)
    $end            reduce using rule 20 (exp -> exp AND exp .)
    )               reduce using rule 20 (exp -> exp AND exp .)
    ;               reduce using rule 20 (exp -> exp AND exp .)
    }               reduce using rule 20 (exp -> exp AND exp .)
    :               reduce using rule 20 (exp -> exp AND exp .)
    ,               reduce using rule 20 (exp -> exp AND exp .)
    END             reduce using rule 20 (exp -> exp AND exp .)
    ELSE            reduce using rule 20 (exp -> exp AND exp .)
    ]               reduce using rule 20 (exp -> exp AND exp .)
    [               reduce using rule 20 (exp -> exp AND exp .)
    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    POW             shift and go to state 23
    CMP             shift and go to state 28

  ! +               [ reduce using rule 20 (exp -> exp AND exp .) ]
  ! -               [ reduce using rule 20 (exp -> exp AND exp .) ]
  ! *               [ reduce using rule 20 (exp -> exp AND exp .) ]
  ! DIV             [ reduce using rule 20 (exp -> exp AND exp .) ]
  ! MOD             [ reduce using rule 20 (exp -> exp AND exp .) ]
  ! POW             [ reduce using rule 20 (exp -> exp AND exp .) ]
  ! CMP             [ reduce using rule 20 (exp -> exp AND exp .) ]
  ! OR              [ shift and go to state 24 ]
  ! XOR             [ shift and go to state 25 ]
  ! AND             [ shift and go to state 26 ]
  ! IN              [ shift and go to state 27 ]


state 64

    (36) exp -> exp IN it .

    +               reduce using rule 36 (exp -> exp IN it .)
    -               reduce using rule 36 (exp -> exp IN it .)
    *               reduce using rule 36 (exp -> exp IN it .)
    DIV             reduce using rule 36 (exp -> exp IN it .)
    MOD             reduce using rule 36 (exp -> exp IN it .)
    POW             reduce using rule 36 (exp -> exp IN it .)
    OR              reduce using rule 36 (exp -> exp IN it .)
    XOR             reduce using rule 36 (exp -> exp IN it .)
    AND             reduce using rule 36 (exp -> exp IN it .)
    IN              reduce using rule 36 (exp -> exp IN it .)
    CMP             reduce using rule 36 (exp -> exp IN it .)
    $end            reduce using rule 36 (exp -> exp IN it .)
    )               reduce using rule 36 (exp -> exp IN it .)
    ;               reduce using rule 36 (exp -> exp IN it .)
    }               reduce using rule 36 (exp -> exp IN it .)
    :               reduce using rule 36 (exp -> exp IN it .)
    ,               reduce using rule 36 (exp -> exp IN it .)
    END             reduce using rule 36 (exp -> exp IN it .)
    ELSE            reduce using rule 36 (exp -> exp IN it .)
    ]               reduce using rule 36 (exp -> exp IN it .)
    [               reduce using rule 36 (exp -> exp IN it .)


state 65

    (32) it -> [ . exp , exp ]
    (34) it -> [ . exp , exp [
    (1) exp -> . ID + ASG exp
    (2) exp -> . ID - ASG exp
    (3) exp -> . ID USG
    (4) exp -> . ID * ASG exp
    (5) exp -> . ID DIV ASG exp
    (6) exp -> . ID MOD ASG exp
    (7) exp -> . ID POW ASG exp
    (8) exp -> . ID OR ASG exp
    (9) exp -> . ID XOR ASG exp
    (10) exp -> . ID AND ASG exp
    (11) exp -> . ID ASG exp
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp DIV exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp POW exp
    (18) exp -> . exp OR exp
    (19) exp -> . exp XOR exp
    (20) exp -> . exp AND exp
    (23) exp -> . cmp
    (27) exp -> . ifc END
    (28) exp -> . FOR ID IN it : exp END
    (29) exp -> . FOR NUM ID IN it : exp END
    (30) exp -> . ( exp )
    (31) exp -> . ID
    (36) exp -> . exp IN it
    (37) exp -> . ID + exp
    (38) exp -> . ID - exp
    (39) exp -> . - exp
    (40) exp -> . ID * exp
    (41) exp -> . ID DIV exp
    (42) exp -> . ID MOD exp
    (43) exp -> . ID POW exp
    (44) exp -> . ID OR exp
    (45) exp -> . ID XOR exp
    (46) exp -> . ID AND exp
    (47) exp -> . + exp
    (48) exp -> . NOT exp
    (49) exp -> . ECHO exp
    (50) exp -> . LOAD exp
    (51) exp -> . EVAL exp
    (55) exp -> . { seq }
    (56) exp -> . NUM
    (57) exp -> . STR
    (58) exp -> . WHILE exp : exp END
    (21) cmp -> . exp CMP exp
    (22) cmp -> . cmp CMP exp
    (24) ifc -> . IF exp : exp
    (25) ifc -> . IF exp : exp ELSE exp
    (26) ifc -> . IF exp : exp ELSE ifc

    ID              shift and go to state 2
    FOR             shift and go to state 7
    (               shift and go to state 9
    -               shift and go to state 4
    +               shift and go to state 3
    NOT             shift and go to state 10
    ECHO            shift and go to state 11
    LOAD            shift and go to state 12
    EVAL            shift and go to state 13
    {               shift and go to state 14
    NUM             shift and go to state 8
    STR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17

    exp                            shift and go to state 95
    cmp                            shift and go to state 5
    ifc                            shift and go to state 6

state 66

    (33) it -> ] . exp , exp ]
    (35) it -> ] . exp , exp [
    (1) exp -> . ID + ASG exp
    (2) exp -> . ID - ASG exp
    (3) exp -> . ID USG
    (4) exp -> . ID * ASG exp
    (5) exp -> . ID DIV ASG exp
    (6) exp -> . ID MOD ASG exp
    (7) exp -> . ID POW ASG exp
    (8) exp -> . ID OR ASG exp
    (9) exp -> . ID XOR ASG exp
    (10) exp -> . ID AND ASG exp
    (11) exp -> . ID ASG exp
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp DIV exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp POW exp
    (18) exp -> . exp OR exp
    (19) exp -> . exp XOR exp
    (20) exp -> . exp AND exp
    (23) exp -> . cmp
    (27) exp -> . ifc END
    (28) exp -> . FOR ID IN it : exp END
    (29) exp -> . FOR NUM ID IN it : exp END
    (30) exp -> . ( exp )
    (31) exp -> . ID
    (36) exp -> . exp IN it
    (37) exp -> . ID + exp
    (38) exp -> . ID - exp
    (39) exp -> . - exp
    (40) exp -> . ID * exp
    (41) exp -> . ID DIV exp
    (42) exp -> . ID MOD exp
    (43) exp -> . ID POW exp
    (44) exp -> . ID OR exp
    (45) exp -> . ID XOR exp
    (46) exp -> . ID AND exp
    (47) exp -> . + exp
    (48) exp -> . NOT exp
    (49) exp -> . ECHO exp
    (50) exp -> . LOAD exp
    (51) exp -> . EVAL exp
    (55) exp -> . { seq }
    (56) exp -> . NUM
    (57) exp -> . STR
    (58) exp -> . WHILE exp : exp END
    (21) cmp -> . exp CMP exp
    (22) cmp -> . cmp CMP exp
    (24) ifc -> . IF exp : exp
    (25) ifc -> . IF exp : exp ELSE exp
    (26) ifc -> . IF exp : exp ELSE ifc

    ID              shift and go to state 2
    FOR             shift and go to state 7
    (               shift and go to state 9
    -               shift and go to state 4
    +               shift and go to state 3
    NOT             shift and go to state 10
    ECHO            shift and go to state 11
    LOAD            shift and go to state 12
    EVAL            shift and go to state 13
    {               shift and go to state 14
    NUM             shift and go to state 8
    STR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17

    exp                            shift and go to state 96
    cmp                            shift and go to state 5
    ifc                            shift and go to state 6

state 67

    (21) cmp -> exp CMP exp .
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . DIV exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . POW exp
    (18) exp -> exp . OR exp
    (19) exp -> exp . XOR exp
    (20) exp -> exp . AND exp
    (36) exp -> exp . IN it
    (21) cmp -> exp . CMP exp

    CMP             reduce using rule 21 (cmp -> exp CMP exp .)
    OR              reduce using rule 21 (cmp -> exp CMP exp .)
    XOR             reduce using rule 21 (cmp -> exp CMP exp .)
    AND             reduce using rule 21 (cmp -> exp CMP exp .)
    IN              reduce using rule 21 (cmp -> exp CMP exp .)
    $end            reduce using rule 21 (cmp -> exp CMP exp .)
    )               reduce using rule 21 (cmp -> exp CMP exp .)
    ;               reduce using rule 21 (cmp -> exp CMP exp .)
    }               reduce using rule 21 (cmp -> exp CMP exp .)
    :               reduce using rule 21 (cmp -> exp CMP exp .)
    ,               reduce using rule 21 (cmp -> exp CMP exp .)
    END             reduce using rule 21 (cmp -> exp CMP exp .)
    ELSE            reduce using rule 21 (cmp -> exp CMP exp .)
    ]               reduce using rule 21 (cmp -> exp CMP exp .)
    [               reduce using rule 21 (cmp -> exp CMP exp .)
    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    POW             shift and go to state 23

  ! +               [ reduce using rule 21 (cmp -> exp CMP exp .) ]
  ! -               [ reduce using rule 21 (cmp -> exp CMP exp .) ]
  ! *               [ reduce using rule 21 (cmp -> exp CMP exp .) ]
  ! DIV             [ reduce using rule 21 (cmp -> exp CMP exp .) ]
  ! MOD             [ reduce using rule 21 (cmp -> exp CMP exp .) ]
  ! POW             [ reduce using rule 21 (cmp -> exp CMP exp .) ]
  ! OR              [ shift and go to state 24 ]
  ! XOR             [ shift and go to state 25 ]
  ! AND             [ shift and go to state 26 ]
  ! IN              [ shift and go to state 27 ]
  ! CMP             [ shift and go to state 28 ]


state 68

    (1) exp -> ID + ASG . exp
    (1) exp -> . ID + ASG exp
    (2) exp -> . ID - ASG exp
    (3) exp -> . ID USG
    (4) exp -> . ID * ASG exp
    (5) exp -> . ID DIV ASG exp
    (6) exp -> . ID MOD ASG exp
    (7) exp -> . ID POW ASG exp
    (8) exp -> . ID OR ASG exp
    (9) exp -> . ID XOR ASG exp
    (10) exp -> . ID AND ASG exp
    (11) exp -> . ID ASG exp
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp DIV exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp POW exp
    (18) exp -> . exp OR exp
    (19) exp -> . exp XOR exp
    (20) exp -> . exp AND exp
    (23) exp -> . cmp
    (27) exp -> . ifc END
    (28) exp -> . FOR ID IN it : exp END
    (29) exp -> . FOR NUM ID IN it : exp END
    (30) exp -> . ( exp )
    (31) exp -> . ID
    (36) exp -> . exp IN it
    (37) exp -> . ID + exp
    (38) exp -> . ID - exp
    (39) exp -> . - exp
    (40) exp -> . ID * exp
    (41) exp -> . ID DIV exp
    (42) exp -> . ID MOD exp
    (43) exp -> . ID POW exp
    (44) exp -> . ID OR exp
    (45) exp -> . ID XOR exp
    (46) exp -> . ID AND exp
    (47) exp -> . + exp
    (48) exp -> . NOT exp
    (49) exp -> . ECHO exp
    (50) exp -> . LOAD exp
    (51) exp -> . EVAL exp
    (55) exp -> . { seq }
    (56) exp -> . NUM
    (57) exp -> . STR
    (58) exp -> . WHILE exp : exp END
    (21) cmp -> . exp CMP exp
    (22) cmp -> . cmp CMP exp
    (24) ifc -> . IF exp : exp
    (25) ifc -> . IF exp : exp ELSE exp
    (26) ifc -> . IF exp : exp ELSE ifc

    ID              shift and go to state 2
    FOR             shift and go to state 7
    (               shift and go to state 9
    -               shift and go to state 4
    +               shift and go to state 3
    NOT             shift and go to state 10
    ECHO            shift and go to state 11
    LOAD            shift and go to state 12
    EVAL            shift and go to state 13
    {               shift and go to state 14
    NUM             shift and go to state 8
    STR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17

    exp                            shift and go to state 97
    cmp                            shift and go to state 5
    ifc                            shift and go to state 6

state 69

    (37) exp -> ID + exp .
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . DIV exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . POW exp
    (18) exp -> exp . OR exp
    (19) exp -> exp . XOR exp
    (20) exp -> exp . AND exp
    (36) exp -> exp . IN it
    (21) cmp -> exp . CMP exp

    +               reduce using rule 37 (exp -> ID + exp .)
    -               reduce using rule 37 (exp -> ID + exp .)
    OR              reduce using rule 37 (exp -> ID + exp .)
    XOR             reduce using rule 37 (exp -> ID + exp .)
    AND             reduce using rule 37 (exp -> ID + exp .)
    IN              reduce using rule 37 (exp -> ID + exp .)
    CMP             reduce using rule 37 (exp -> ID + exp .)
    $end            reduce using rule 37 (exp -> ID + exp .)
    )               reduce using rule 37 (exp -> ID + exp .)
    ;               reduce using rule 37 (exp -> ID + exp .)
    }               reduce using rule 37 (exp -> ID + exp .)
    :               reduce using rule 37 (exp -> ID + exp .)
    ,               reduce using rule 37 (exp -> ID + exp .)
    END             reduce using rule 37 (exp -> ID + exp .)
    ELSE            reduce using rule 37 (exp -> ID + exp .)
    ]               reduce using rule 37 (exp -> ID + exp .)
    [               reduce using rule 37 (exp -> ID + exp .)
    *               shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    POW             shift and go to state 23

  ! *               [ reduce using rule 37 (exp -> ID + exp .) ]
  ! DIV             [ reduce using rule 37 (exp -> ID + exp .) ]
  ! MOD             [ reduce using rule 37 (exp -> ID + exp .) ]
  ! POW             [ reduce using rule 37 (exp -> ID + exp .) ]
  ! +               [ shift and go to state 18 ]
  ! -               [ shift and go to state 19 ]
  ! OR              [ shift and go to state 24 ]
  ! XOR             [ shift and go to state 25 ]
  ! AND             [ shift and go to state 26 ]
  ! IN              [ shift and go to state 27 ]
  ! CMP             [ shift and go to state 28 ]


state 70

    (11) exp -> ID ASG exp .
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . DIV exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . POW exp
    (18) exp -> exp . OR exp
    (19) exp -> exp . XOR exp
    (20) exp -> exp . AND exp
    (36) exp -> exp . IN it
    (21) cmp -> exp . CMP exp

    IN              reduce using rule 11 (exp -> ID ASG exp .)
    $end            reduce using rule 11 (exp -> ID ASG exp .)
    )               reduce using rule 11 (exp -> ID ASG exp .)
    ;               reduce using rule 11 (exp -> ID ASG exp .)
    }               reduce using rule 11 (exp -> ID ASG exp .)
    :               reduce using rule 11 (exp -> ID ASG exp .)
    ,               reduce using rule 11 (exp -> ID ASG exp .)
    END             reduce using rule 11 (exp -> ID ASG exp .)
    ELSE            reduce using rule 11 (exp -> ID ASG exp .)
    ]               reduce using rule 11 (exp -> ID ASG exp .)
    [               reduce using rule 11 (exp -> ID ASG exp .)
    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    POW             shift and go to state 23
    OR              shift and go to state 24
    XOR             shift and go to state 25
    AND             shift and go to state 26
    CMP             shift and go to state 28

  ! +               [ reduce using rule 11 (exp -> ID ASG exp .) ]
  ! -               [ reduce using rule 11 (exp -> ID ASG exp .) ]
  ! *               [ reduce using rule 11 (exp -> ID ASG exp .) ]
  ! DIV             [ reduce using rule 11 (exp -> ID ASG exp .) ]
  ! MOD             [ reduce using rule 11 (exp -> ID ASG exp .) ]
  ! POW             [ reduce using rule 11 (exp -> ID ASG exp .) ]
  ! OR              [ reduce using rule 11 (exp -> ID ASG exp .) ]
  ! XOR             [ reduce using rule 11 (exp -> ID ASG exp .) ]
  ! AND             [ reduce using rule 11 (exp -> ID ASG exp .) ]
  ! CMP             [ reduce using rule 11 (exp -> ID ASG exp .) ]
  ! IN              [ shift and go to state 27 ]


state 71

    (2) exp -> ID - ASG . exp
    (1) exp -> . ID + ASG exp
    (2) exp -> . ID - ASG exp
    (3) exp -> . ID USG
    (4) exp -> . ID * ASG exp
    (5) exp -> . ID DIV ASG exp
    (6) exp -> . ID MOD ASG exp
    (7) exp -> . ID POW ASG exp
    (8) exp -> . ID OR ASG exp
    (9) exp -> . ID XOR ASG exp
    (10) exp -> . ID AND ASG exp
    (11) exp -> . ID ASG exp
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp DIV exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp POW exp
    (18) exp -> . exp OR exp
    (19) exp -> . exp XOR exp
    (20) exp -> . exp AND exp
    (23) exp -> . cmp
    (27) exp -> . ifc END
    (28) exp -> . FOR ID IN it : exp END
    (29) exp -> . FOR NUM ID IN it : exp END
    (30) exp -> . ( exp )
    (31) exp -> . ID
    (36) exp -> . exp IN it
    (37) exp -> . ID + exp
    (38) exp -> . ID - exp
    (39) exp -> . - exp
    (40) exp -> . ID * exp
    (41) exp -> . ID DIV exp
    (42) exp -> . ID MOD exp
    (43) exp -> . ID POW exp
    (44) exp -> . ID OR exp
    (45) exp -> . ID XOR exp
    (46) exp -> . ID AND exp
    (47) exp -> . + exp
    (48) exp -> . NOT exp
    (49) exp -> . ECHO exp
    (50) exp -> . LOAD exp
    (51) exp -> . EVAL exp
    (55) exp -> . { seq }
    (56) exp -> . NUM
    (57) exp -> . STR
    (58) exp -> . WHILE exp : exp END
    (21) cmp -> . exp CMP exp
    (22) cmp -> . cmp CMP exp
    (24) ifc -> . IF exp : exp
    (25) ifc -> . IF exp : exp ELSE exp
    (26) ifc -> . IF exp : exp ELSE ifc

    ID              shift and go to state 2
    FOR             shift and go to state 7
    (               shift and go to state 9
    -               shift and go to state 4
    +               shift and go to state 3
    NOT             shift and go to state 10
    ECHO            shift and go to state 11
    LOAD            shift and go to state 12
    EVAL            shift and go to state 13
    {               shift and go to state 14
    NUM             shift and go to state 8
    STR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17

    exp                            shift and go to state 98
    cmp                            shift and go to state 5
    ifc                            shift and go to state 6

state 72

    (38) exp -> ID - exp .
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . DIV exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . POW exp
    (18) exp -> exp . OR exp
    (19) exp -> exp . XOR exp
    (20) exp -> exp . AND exp
    (36) exp -> exp . IN it
    (21) cmp -> exp . CMP exp

    +               reduce using rule 38 (exp -> ID - exp .)
    -               reduce using rule 38 (exp -> ID - exp .)
    OR              reduce using rule 38 (exp -> ID - exp .)
    XOR             reduce using rule 38 (exp -> ID - exp .)
    AND             reduce using rule 38 (exp -> ID - exp .)
    IN              reduce using rule 38 (exp -> ID - exp .)
    CMP             reduce using rule 38 (exp -> ID - exp .)
    $end            reduce using rule 38 (exp -> ID - exp .)
    )               reduce using rule 38 (exp -> ID - exp .)
    ;               reduce using rule 38 (exp -> ID - exp .)
    }               reduce using rule 38 (exp -> ID - exp .)
    :               reduce using rule 38 (exp -> ID - exp .)
    ,               reduce using rule 38 (exp -> ID - exp .)
    END             reduce using rule 38 (exp -> ID - exp .)
    ELSE            reduce using rule 38 (exp -> ID - exp .)
    ]               reduce using rule 38 (exp -> ID - exp .)
    [               reduce using rule 38 (exp -> ID - exp .)
    *               shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    POW             shift and go to state 23

  ! *               [ reduce using rule 38 (exp -> ID - exp .) ]
  ! DIV             [ reduce using rule 38 (exp -> ID - exp .) ]
  ! MOD             [ reduce using rule 38 (exp -> ID - exp .) ]
  ! POW             [ reduce using rule 38 (exp -> ID - exp .) ]
  ! +               [ shift and go to state 18 ]
  ! -               [ shift and go to state 19 ]
  ! OR              [ shift and go to state 24 ]
  ! XOR             [ shift and go to state 25 ]
  ! AND             [ shift and go to state 26 ]
  ! IN              [ shift and go to state 27 ]
  ! CMP             [ shift and go to state 28 ]


state 73

    (4) exp -> ID * ASG . exp
    (1) exp -> . ID + ASG exp
    (2) exp -> . ID - ASG exp
    (3) exp -> . ID USG
    (4) exp -> . ID * ASG exp
    (5) exp -> . ID DIV ASG exp
    (6) exp -> . ID MOD ASG exp
    (7) exp -> . ID POW ASG exp
    (8) exp -> . ID OR ASG exp
    (9) exp -> . ID XOR ASG exp
    (10) exp -> . ID AND ASG exp
    (11) exp -> . ID ASG exp
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp DIV exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp POW exp
    (18) exp -> . exp OR exp
    (19) exp -> . exp XOR exp
    (20) exp -> . exp AND exp
    (23) exp -> . cmp
    (27) exp -> . ifc END
    (28) exp -> . FOR ID IN it : exp END
    (29) exp -> . FOR NUM ID IN it : exp END
    (30) exp -> . ( exp )
    (31) exp -> . ID
    (36) exp -> . exp IN it
    (37) exp -> . ID + exp
    (38) exp -> . ID - exp
    (39) exp -> . - exp
    (40) exp -> . ID * exp
    (41) exp -> . ID DIV exp
    (42) exp -> . ID MOD exp
    (43) exp -> . ID POW exp
    (44) exp -> . ID OR exp
    (45) exp -> . ID XOR exp
    (46) exp -> . ID AND exp
    (47) exp -> . + exp
    (48) exp -> . NOT exp
    (49) exp -> . ECHO exp
    (50) exp -> . LOAD exp
    (51) exp -> . EVAL exp
    (55) exp -> . { seq }
    (56) exp -> . NUM
    (57) exp -> . STR
    (58) exp -> . WHILE exp : exp END
    (21) cmp -> . exp CMP exp
    (22) cmp -> . cmp CMP exp
    (24) ifc -> . IF exp : exp
    (25) ifc -> . IF exp : exp ELSE exp
    (26) ifc -> . IF exp : exp ELSE ifc

    ID              shift and go to state 2
    FOR             shift and go to state 7
    (               shift and go to state 9
    -               shift and go to state 4
    +               shift and go to state 3
    NOT             shift and go to state 10
    ECHO            shift and go to state 11
    LOAD            shift and go to state 12
    EVAL            shift and go to state 13
    {               shift and go to state 14
    NUM             shift and go to state 8
    STR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17

    exp                            shift and go to state 99
    cmp                            shift and go to state 5
    ifc                            shift and go to state 6

state 74

    (40) exp -> ID * exp .
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . DIV exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . POW exp
    (18) exp -> exp . OR exp
    (19) exp -> exp . XOR exp
    (20) exp -> exp . AND exp
    (36) exp -> exp . IN it
    (21) cmp -> exp . CMP exp

    +               reduce using rule 40 (exp -> ID * exp .)
    -               reduce using rule 40 (exp -> ID * exp .)
    *               reduce using rule 40 (exp -> ID * exp .)
    DIV             reduce using rule 40 (exp -> ID * exp .)
    MOD             reduce using rule 40 (exp -> ID * exp .)
    OR              reduce using rule 40 (exp -> ID * exp .)
    XOR             reduce using rule 40 (exp -> ID * exp .)
    AND             reduce using rule 40 (exp -> ID * exp .)
    IN              reduce using rule 40 (exp -> ID * exp .)
    CMP             reduce using rule 40 (exp -> ID * exp .)
    $end            reduce using rule 40 (exp -> ID * exp .)
    )               reduce using rule 40 (exp -> ID * exp .)
    ;               reduce using rule 40 (exp -> ID * exp .)
    }               reduce using rule 40 (exp -> ID * exp .)
    :               reduce using rule 40 (exp -> ID * exp .)
    ,               reduce using rule 40 (exp -> ID * exp .)
    END             reduce using rule 40 (exp -> ID * exp .)
    ELSE            reduce using rule 40 (exp -> ID * exp .)
    ]               reduce using rule 40 (exp -> ID * exp .)
    [               reduce using rule 40 (exp -> ID * exp .)
    POW             shift and go to state 23

  ! POW             [ reduce using rule 40 (exp -> ID * exp .) ]
  ! +               [ shift and go to state 18 ]
  ! -               [ shift and go to state 19 ]
  ! *               [ shift and go to state 20 ]
  ! DIV             [ shift and go to state 21 ]
  ! MOD             [ shift and go to state 22 ]
  ! OR              [ shift and go to state 24 ]
  ! XOR             [ shift and go to state 25 ]
  ! AND             [ shift and go to state 26 ]
  ! IN              [ shift and go to state 27 ]
  ! CMP             [ shift and go to state 28 ]


state 75

    (5) exp -> ID DIV ASG . exp
    (1) exp -> . ID + ASG exp
    (2) exp -> . ID - ASG exp
    (3) exp -> . ID USG
    (4) exp -> . ID * ASG exp
    (5) exp -> . ID DIV ASG exp
    (6) exp -> . ID MOD ASG exp
    (7) exp -> . ID POW ASG exp
    (8) exp -> . ID OR ASG exp
    (9) exp -> . ID XOR ASG exp
    (10) exp -> . ID AND ASG exp
    (11) exp -> . ID ASG exp
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp DIV exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp POW exp
    (18) exp -> . exp OR exp
    (19) exp -> . exp XOR exp
    (20) exp -> . exp AND exp
    (23) exp -> . cmp
    (27) exp -> . ifc END
    (28) exp -> . FOR ID IN it : exp END
    (29) exp -> . FOR NUM ID IN it : exp END
    (30) exp -> . ( exp )
    (31) exp -> . ID
    (36) exp -> . exp IN it
    (37) exp -> . ID + exp
    (38) exp -> . ID - exp
    (39) exp -> . - exp
    (40) exp -> . ID * exp
    (41) exp -> . ID DIV exp
    (42) exp -> . ID MOD exp
    (43) exp -> . ID POW exp
    (44) exp -> . ID OR exp
    (45) exp -> . ID XOR exp
    (46) exp -> . ID AND exp
    (47) exp -> . + exp
    (48) exp -> . NOT exp
    (49) exp -> . ECHO exp
    (50) exp -> . LOAD exp
    (51) exp -> . EVAL exp
    (55) exp -> . { seq }
    (56) exp -> . NUM
    (57) exp -> . STR
    (58) exp -> . WHILE exp : exp END
    (21) cmp -> . exp CMP exp
    (22) cmp -> . cmp CMP exp
    (24) ifc -> . IF exp : exp
    (25) ifc -> . IF exp : exp ELSE exp
    (26) ifc -> . IF exp : exp ELSE ifc

    ID              shift and go to state 2
    FOR             shift and go to state 7
    (               shift and go to state 9
    -               shift and go to state 4
    +               shift and go to state 3
    NOT             shift and go to state 10
    ECHO            shift and go to state 11
    LOAD            shift and go to state 12
    EVAL            shift and go to state 13
    {               shift and go to state 14
    NUM             shift and go to state 8
    STR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17

    exp                            shift and go to state 100
    cmp                            shift and go to state 5
    ifc                            shift and go to state 6

state 76

    (41) exp -> ID DIV exp .
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . DIV exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . POW exp
    (18) exp -> exp . OR exp
    (19) exp -> exp . XOR exp
    (20) exp -> exp . AND exp
    (36) exp -> exp . IN it
    (21) cmp -> exp . CMP exp

    +               reduce using rule 41 (exp -> ID DIV exp .)
    -               reduce using rule 41 (exp -> ID DIV exp .)
    *               reduce using rule 41 (exp -> ID DIV exp .)
    DIV             reduce using rule 41 (exp -> ID DIV exp .)
    MOD             reduce using rule 41 (exp -> ID DIV exp .)
    OR              reduce using rule 41 (exp -> ID DIV exp .)
    XOR             reduce using rule 41 (exp -> ID DIV exp .)
    AND             reduce using rule 41 (exp -> ID DIV exp .)
    IN              reduce using rule 41 (exp -> ID DIV exp .)
    CMP             reduce using rule 41 (exp -> ID DIV exp .)
    $end            reduce using rule 41 (exp -> ID DIV exp .)
    )               reduce using rule 41 (exp -> ID DIV exp .)
    ;               reduce using rule 41 (exp -> ID DIV exp .)
    }               reduce using rule 41 (exp -> ID DIV exp .)
    :               reduce using rule 41 (exp -> ID DIV exp .)
    ,               reduce using rule 41 (exp -> ID DIV exp .)
    END             reduce using rule 41 (exp -> ID DIV exp .)
    ELSE            reduce using rule 41 (exp -> ID DIV exp .)
    ]               reduce using rule 41 (exp -> ID DIV exp .)
    [               reduce using rule 41 (exp -> ID DIV exp .)
    POW             shift and go to state 23

  ! POW             [ reduce using rule 41 (exp -> ID DIV exp .) ]
  ! +               [ shift and go to state 18 ]
  ! -               [ shift and go to state 19 ]
  ! *               [ shift and go to state 20 ]
  ! DIV             [ shift and go to state 21 ]
  ! MOD             [ shift and go to state 22 ]
  ! OR              [ shift and go to state 24 ]
  ! XOR             [ shift and go to state 25 ]
  ! AND             [ shift and go to state 26 ]
  ! IN              [ shift and go to state 27 ]
  ! CMP             [ shift and go to state 28 ]


state 77

    (6) exp -> ID MOD ASG . exp
    (1) exp -> . ID + ASG exp
    (2) exp -> . ID - ASG exp
    (3) exp -> . ID USG
    (4) exp -> . ID * ASG exp
    (5) exp -> . ID DIV ASG exp
    (6) exp -> . ID MOD ASG exp
    (7) exp -> . ID POW ASG exp
    (8) exp -> . ID OR ASG exp
    (9) exp -> . ID XOR ASG exp
    (10) exp -> . ID AND ASG exp
    (11) exp -> . ID ASG exp
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp DIV exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp POW exp
    (18) exp -> . exp OR exp
    (19) exp -> . exp XOR exp
    (20) exp -> . exp AND exp
    (23) exp -> . cmp
    (27) exp -> . ifc END
    (28) exp -> . FOR ID IN it : exp END
    (29) exp -> . FOR NUM ID IN it : exp END
    (30) exp -> . ( exp )
    (31) exp -> . ID
    (36) exp -> . exp IN it
    (37) exp -> . ID + exp
    (38) exp -> . ID - exp
    (39) exp -> . - exp
    (40) exp -> . ID * exp
    (41) exp -> . ID DIV exp
    (42) exp -> . ID MOD exp
    (43) exp -> . ID POW exp
    (44) exp -> . ID OR exp
    (45) exp -> . ID XOR exp
    (46) exp -> . ID AND exp
    (47) exp -> . + exp
    (48) exp -> . NOT exp
    (49) exp -> . ECHO exp
    (50) exp -> . LOAD exp
    (51) exp -> . EVAL exp
    (55) exp -> . { seq }
    (56) exp -> . NUM
    (57) exp -> . STR
    (58) exp -> . WHILE exp : exp END
    (21) cmp -> . exp CMP exp
    (22) cmp -> . cmp CMP exp
    (24) ifc -> . IF exp : exp
    (25) ifc -> . IF exp : exp ELSE exp
    (26) ifc -> . IF exp : exp ELSE ifc

    ID              shift and go to state 2
    FOR             shift and go to state 7
    (               shift and go to state 9
    -               shift and go to state 4
    +               shift and go to state 3
    NOT             shift and go to state 10
    ECHO            shift and go to state 11
    LOAD            shift and go to state 12
    EVAL            shift and go to state 13
    {               shift and go to state 14
    NUM             shift and go to state 8
    STR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17

    exp                            shift and go to state 101
    cmp                            shift and go to state 5
    ifc                            shift and go to state 6

state 78

    (42) exp -> ID MOD exp .
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . DIV exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . POW exp
    (18) exp -> exp . OR exp
    (19) exp -> exp . XOR exp
    (20) exp -> exp . AND exp
    (36) exp -> exp . IN it
    (21) cmp -> exp . CMP exp

    +               reduce using rule 42 (exp -> ID MOD exp .)
    -               reduce using rule 42 (exp -> ID MOD exp .)
    *               reduce using rule 42 (exp -> ID MOD exp .)
    DIV             reduce using rule 42 (exp -> ID MOD exp .)
    MOD             reduce using rule 42 (exp -> ID MOD exp .)
    OR              reduce using rule 42 (exp -> ID MOD exp .)
    XOR             reduce using rule 42 (exp -> ID MOD exp .)
    AND             reduce using rule 42 (exp -> ID MOD exp .)
    IN              reduce using rule 42 (exp -> ID MOD exp .)
    CMP             reduce using rule 42 (exp -> ID MOD exp .)
    $end            reduce using rule 42 (exp -> ID MOD exp .)
    )               reduce using rule 42 (exp -> ID MOD exp .)
    ;               reduce using rule 42 (exp -> ID MOD exp .)
    }               reduce using rule 42 (exp -> ID MOD exp .)
    :               reduce using rule 42 (exp -> ID MOD exp .)
    ,               reduce using rule 42 (exp -> ID MOD exp .)
    END             reduce using rule 42 (exp -> ID MOD exp .)
    ELSE            reduce using rule 42 (exp -> ID MOD exp .)
    ]               reduce using rule 42 (exp -> ID MOD exp .)
    [               reduce using rule 42 (exp -> ID MOD exp .)
    POW             shift and go to state 23

  ! POW             [ reduce using rule 42 (exp -> ID MOD exp .) ]
  ! +               [ shift and go to state 18 ]
  ! -               [ shift and go to state 19 ]
  ! *               [ shift and go to state 20 ]
  ! DIV             [ shift and go to state 21 ]
  ! MOD             [ shift and go to state 22 ]
  ! OR              [ shift and go to state 24 ]
  ! XOR             [ shift and go to state 25 ]
  ! AND             [ shift and go to state 26 ]
  ! IN              [ shift and go to state 27 ]
  ! CMP             [ shift and go to state 28 ]


state 79

    (7) exp -> ID POW ASG . exp
    (1) exp -> . ID + ASG exp
    (2) exp -> . ID - ASG exp
    (3) exp -> . ID USG
    (4) exp -> . ID * ASG exp
    (5) exp -> . ID DIV ASG exp
    (6) exp -> . ID MOD ASG exp
    (7) exp -> . ID POW ASG exp
    (8) exp -> . ID OR ASG exp
    (9) exp -> . ID XOR ASG exp
    (10) exp -> . ID AND ASG exp
    (11) exp -> . ID ASG exp
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp DIV exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp POW exp
    (18) exp -> . exp OR exp
    (19) exp -> . exp XOR exp
    (20) exp -> . exp AND exp
    (23) exp -> . cmp
    (27) exp -> . ifc END
    (28) exp -> . FOR ID IN it : exp END
    (29) exp -> . FOR NUM ID IN it : exp END
    (30) exp -> . ( exp )
    (31) exp -> . ID
    (36) exp -> . exp IN it
    (37) exp -> . ID + exp
    (38) exp -> . ID - exp
    (39) exp -> . - exp
    (40) exp -> . ID * exp
    (41) exp -> . ID DIV exp
    (42) exp -> . ID MOD exp
    (43) exp -> . ID POW exp
    (44) exp -> . ID OR exp
    (45) exp -> . ID XOR exp
    (46) exp -> . ID AND exp
    (47) exp -> . + exp
    (48) exp -> . NOT exp
    (49) exp -> . ECHO exp
    (50) exp -> . LOAD exp
    (51) exp -> . EVAL exp
    (55) exp -> . { seq }
    (56) exp -> . NUM
    (57) exp -> . STR
    (58) exp -> . WHILE exp : exp END
    (21) cmp -> . exp CMP exp
    (22) cmp -> . cmp CMP exp
    (24) ifc -> . IF exp : exp
    (25) ifc -> . IF exp : exp ELSE exp
    (26) ifc -> . IF exp : exp ELSE ifc

    ID              shift and go to state 2
    FOR             shift and go to state 7
    (               shift and go to state 9
    -               shift and go to state 4
    +               shift and go to state 3
    NOT             shift and go to state 10
    ECHO            shift and go to state 11
    LOAD            shift and go to state 12
    EVAL            shift and go to state 13
    {               shift and go to state 14
    NUM             shift and go to state 8
    STR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17

    exp                            shift and go to state 102
    cmp                            shift and go to state 5
    ifc                            shift and go to state 6

state 80

    (43) exp -> ID POW exp .
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . DIV exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . POW exp
    (18) exp -> exp . OR exp
    (19) exp -> exp . XOR exp
    (20) exp -> exp . AND exp
    (36) exp -> exp . IN it
    (21) cmp -> exp . CMP exp

    +               reduce using rule 43 (exp -> ID POW exp .)
    -               reduce using rule 43 (exp -> ID POW exp .)
    *               reduce using rule 43 (exp -> ID POW exp .)
    DIV             reduce using rule 43 (exp -> ID POW exp .)
    MOD             reduce using rule 43 (exp -> ID POW exp .)
    OR              reduce using rule 43 (exp -> ID POW exp .)
    XOR             reduce using rule 43 (exp -> ID POW exp .)
    AND             reduce using rule 43 (exp -> ID POW exp .)
    IN              reduce using rule 43 (exp -> ID POW exp .)
    CMP             reduce using rule 43 (exp -> ID POW exp .)
    $end            reduce using rule 43 (exp -> ID POW exp .)
    )               reduce using rule 43 (exp -> ID POW exp .)
    ;               reduce using rule 43 (exp -> ID POW exp .)
    }               reduce using rule 43 (exp -> ID POW exp .)
    :               reduce using rule 43 (exp -> ID POW exp .)
    ,               reduce using rule 43 (exp -> ID POW exp .)
    END             reduce using rule 43 (exp -> ID POW exp .)
    ELSE            reduce using rule 43 (exp -> ID POW exp .)
    ]               reduce using rule 43 (exp -> ID POW exp .)
    [               reduce using rule 43 (exp -> ID POW exp .)
    POW             shift and go to state 23

  ! POW             [ reduce using rule 43 (exp -> ID POW exp .) ]
  ! +               [ shift and go to state 18 ]
  ! -               [ shift and go to state 19 ]
  ! *               [ shift and go to state 20 ]
  ! DIV             [ shift and go to state 21 ]
  ! MOD             [ shift and go to state 22 ]
  ! OR              [ shift and go to state 24 ]
  ! XOR             [ shift and go to state 25 ]
  ! AND             [ shift and go to state 26 ]
  ! IN              [ shift and go to state 27 ]
  ! CMP             [ shift and go to state 28 ]


state 81

    (8) exp -> ID OR ASG . exp
    (1) exp -> . ID + ASG exp
    (2) exp -> . ID - ASG exp
    (3) exp -> . ID USG
    (4) exp -> . ID * ASG exp
    (5) exp -> . ID DIV ASG exp
    (6) exp -> . ID MOD ASG exp
    (7) exp -> . ID POW ASG exp
    (8) exp -> . ID OR ASG exp
    (9) exp -> . ID XOR ASG exp
    (10) exp -> . ID AND ASG exp
    (11) exp -> . ID ASG exp
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp DIV exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp POW exp
    (18) exp -> . exp OR exp
    (19) exp -> . exp XOR exp
    (20) exp -> . exp AND exp
    (23) exp -> . cmp
    (27) exp -> . ifc END
    (28) exp -> . FOR ID IN it : exp END
    (29) exp -> . FOR NUM ID IN it : exp END
    (30) exp -> . ( exp )
    (31) exp -> . ID
    (36) exp -> . exp IN it
    (37) exp -> . ID + exp
    (38) exp -> . ID - exp
    (39) exp -> . - exp
    (40) exp -> . ID * exp
    (41) exp -> . ID DIV exp
    (42) exp -> . ID MOD exp
    (43) exp -> . ID POW exp
    (44) exp -> . ID OR exp
    (45) exp -> . ID XOR exp
    (46) exp -> . ID AND exp
    (47) exp -> . + exp
    (48) exp -> . NOT exp
    (49) exp -> . ECHO exp
    (50) exp -> . LOAD exp
    (51) exp -> . EVAL exp
    (55) exp -> . { seq }
    (56) exp -> . NUM
    (57) exp -> . STR
    (58) exp -> . WHILE exp : exp END
    (21) cmp -> . exp CMP exp
    (22) cmp -> . cmp CMP exp
    (24) ifc -> . IF exp : exp
    (25) ifc -> . IF exp : exp ELSE exp
    (26) ifc -> . IF exp : exp ELSE ifc

    ID              shift and go to state 2
    FOR             shift and go to state 7
    (               shift and go to state 9
    -               shift and go to state 4
    +               shift and go to state 3
    NOT             shift and go to state 10
    ECHO            shift and go to state 11
    LOAD            shift and go to state 12
    EVAL            shift and go to state 13
    {               shift and go to state 14
    NUM             shift and go to state 8
    STR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17

    exp                            shift and go to state 103
    cmp                            shift and go to state 5
    ifc                            shift and go to state 6

state 82

    (44) exp -> ID OR exp .
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . DIV exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . POW exp
    (18) exp -> exp . OR exp
    (19) exp -> exp . XOR exp
    (20) exp -> exp . AND exp
    (36) exp -> exp . IN it
    (21) cmp -> exp . CMP exp

    OR              reduce using rule 44 (exp -> ID OR exp .)
    IN              reduce using rule 44 (exp -> ID OR exp .)
    $end            reduce using rule 44 (exp -> ID OR exp .)
    )               reduce using rule 44 (exp -> ID OR exp .)
    ;               reduce using rule 44 (exp -> ID OR exp .)
    }               reduce using rule 44 (exp -> ID OR exp .)
    :               reduce using rule 44 (exp -> ID OR exp .)
    ,               reduce using rule 44 (exp -> ID OR exp .)
    END             reduce using rule 44 (exp -> ID OR exp .)
    ELSE            reduce using rule 44 (exp -> ID OR exp .)
    ]               reduce using rule 44 (exp -> ID OR exp .)
    [               reduce using rule 44 (exp -> ID OR exp .)
    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    POW             shift and go to state 23
    XOR             shift and go to state 25
    AND             shift and go to state 26
    CMP             shift and go to state 28

  ! +               [ reduce using rule 44 (exp -> ID OR exp .) ]
  ! -               [ reduce using rule 44 (exp -> ID OR exp .) ]
  ! *               [ reduce using rule 44 (exp -> ID OR exp .) ]
  ! DIV             [ reduce using rule 44 (exp -> ID OR exp .) ]
  ! MOD             [ reduce using rule 44 (exp -> ID OR exp .) ]
  ! POW             [ reduce using rule 44 (exp -> ID OR exp .) ]
  ! XOR             [ reduce using rule 44 (exp -> ID OR exp .) ]
  ! AND             [ reduce using rule 44 (exp -> ID OR exp .) ]
  ! CMP             [ reduce using rule 44 (exp -> ID OR exp .) ]
  ! OR              [ shift and go to state 24 ]
  ! IN              [ shift and go to state 27 ]


state 83

    (9) exp -> ID XOR ASG . exp
    (1) exp -> . ID + ASG exp
    (2) exp -> . ID - ASG exp
    (3) exp -> . ID USG
    (4) exp -> . ID * ASG exp
    (5) exp -> . ID DIV ASG exp
    (6) exp -> . ID MOD ASG exp
    (7) exp -> . ID POW ASG exp
    (8) exp -> . ID OR ASG exp
    (9) exp -> . ID XOR ASG exp
    (10) exp -> . ID AND ASG exp
    (11) exp -> . ID ASG exp
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp DIV exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp POW exp
    (18) exp -> . exp OR exp
    (19) exp -> . exp XOR exp
    (20) exp -> . exp AND exp
    (23) exp -> . cmp
    (27) exp -> . ifc END
    (28) exp -> . FOR ID IN it : exp END
    (29) exp -> . FOR NUM ID IN it : exp END
    (30) exp -> . ( exp )
    (31) exp -> . ID
    (36) exp -> . exp IN it
    (37) exp -> . ID + exp
    (38) exp -> . ID - exp
    (39) exp -> . - exp
    (40) exp -> . ID * exp
    (41) exp -> . ID DIV exp
    (42) exp -> . ID MOD exp
    (43) exp -> . ID POW exp
    (44) exp -> . ID OR exp
    (45) exp -> . ID XOR exp
    (46) exp -> . ID AND exp
    (47) exp -> . + exp
    (48) exp -> . NOT exp
    (49) exp -> . ECHO exp
    (50) exp -> . LOAD exp
    (51) exp -> . EVAL exp
    (55) exp -> . { seq }
    (56) exp -> . NUM
    (57) exp -> . STR
    (58) exp -> . WHILE exp : exp END
    (21) cmp -> . exp CMP exp
    (22) cmp -> . cmp CMP exp
    (24) ifc -> . IF exp : exp
    (25) ifc -> . IF exp : exp ELSE exp
    (26) ifc -> . IF exp : exp ELSE ifc

    ID              shift and go to state 2
    FOR             shift and go to state 7
    (               shift and go to state 9
    -               shift and go to state 4
    +               shift and go to state 3
    NOT             shift and go to state 10
    ECHO            shift and go to state 11
    LOAD            shift and go to state 12
    EVAL            shift and go to state 13
    {               shift and go to state 14
    NUM             shift and go to state 8
    STR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17

    exp                            shift and go to state 104
    cmp                            shift and go to state 5
    ifc                            shift and go to state 6

state 84

    (45) exp -> ID XOR exp .
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . DIV exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . POW exp
    (18) exp -> exp . OR exp
    (19) exp -> exp . XOR exp
    (20) exp -> exp . AND exp
    (36) exp -> exp . IN it
    (21) cmp -> exp . CMP exp

    OR              reduce using rule 45 (exp -> ID XOR exp .)
    XOR             reduce using rule 45 (exp -> ID XOR exp .)
    IN              reduce using rule 45 (exp -> ID XOR exp .)
    $end            reduce using rule 45 (exp -> ID XOR exp .)
    )               reduce using rule 45 (exp -> ID XOR exp .)
    ;               reduce using rule 45 (exp -> ID XOR exp .)
    }               reduce using rule 45 (exp -> ID XOR exp .)
    :               reduce using rule 45 (exp -> ID XOR exp .)
    ,               reduce using rule 45 (exp -> ID XOR exp .)
    END             reduce using rule 45 (exp -> ID XOR exp .)
    ELSE            reduce using rule 45 (exp -> ID XOR exp .)
    ]               reduce using rule 45 (exp -> ID XOR exp .)
    [               reduce using rule 45 (exp -> ID XOR exp .)
    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    POW             shift and go to state 23
    AND             shift and go to state 26
    CMP             shift and go to state 28

  ! +               [ reduce using rule 45 (exp -> ID XOR exp .) ]
  ! -               [ reduce using rule 45 (exp -> ID XOR exp .) ]
  ! *               [ reduce using rule 45 (exp -> ID XOR exp .) ]
  ! DIV             [ reduce using rule 45 (exp -> ID XOR exp .) ]
  ! MOD             [ reduce using rule 45 (exp -> ID XOR exp .) ]
  ! POW             [ reduce using rule 45 (exp -> ID XOR exp .) ]
  ! AND             [ reduce using rule 45 (exp -> ID XOR exp .) ]
  ! CMP             [ reduce using rule 45 (exp -> ID XOR exp .) ]
  ! OR              [ shift and go to state 24 ]
  ! XOR             [ shift and go to state 25 ]
  ! IN              [ shift and go to state 27 ]


state 85

    (10) exp -> ID AND ASG . exp
    (1) exp -> . ID + ASG exp
    (2) exp -> . ID - ASG exp
    (3) exp -> . ID USG
    (4) exp -> . ID * ASG exp
    (5) exp -> . ID DIV ASG exp
    (6) exp -> . ID MOD ASG exp
    (7) exp -> . ID POW ASG exp
    (8) exp -> . ID OR ASG exp
    (9) exp -> . ID XOR ASG exp
    (10) exp -> . ID AND ASG exp
    (11) exp -> . ID ASG exp
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp DIV exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp POW exp
    (18) exp -> . exp OR exp
    (19) exp -> . exp XOR exp
    (20) exp -> . exp AND exp
    (23) exp -> . cmp
    (27) exp -> . ifc END
    (28) exp -> . FOR ID IN it : exp END
    (29) exp -> . FOR NUM ID IN it : exp END
    (30) exp -> . ( exp )
    (31) exp -> . ID
    (36) exp -> . exp IN it
    (37) exp -> . ID + exp
    (38) exp -> . ID - exp
    (39) exp -> . - exp
    (40) exp -> . ID * exp
    (41) exp -> . ID DIV exp
    (42) exp -> . ID MOD exp
    (43) exp -> . ID POW exp
    (44) exp -> . ID OR exp
    (45) exp -> . ID XOR exp
    (46) exp -> . ID AND exp
    (47) exp -> . + exp
    (48) exp -> . NOT exp
    (49) exp -> . ECHO exp
    (50) exp -> . LOAD exp
    (51) exp -> . EVAL exp
    (55) exp -> . { seq }
    (56) exp -> . NUM
    (57) exp -> . STR
    (58) exp -> . WHILE exp : exp END
    (21) cmp -> . exp CMP exp
    (22) cmp -> . cmp CMP exp
    (24) ifc -> . IF exp : exp
    (25) ifc -> . IF exp : exp ELSE exp
    (26) ifc -> . IF exp : exp ELSE ifc

    ID              shift and go to state 2
    FOR             shift and go to state 7
    (               shift and go to state 9
    -               shift and go to state 4
    +               shift and go to state 3
    NOT             shift and go to state 10
    ECHO            shift and go to state 11
    LOAD            shift and go to state 12
    EVAL            shift and go to state 13
    {               shift and go to state 14
    NUM             shift and go to state 8
    STR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17

    exp                            shift and go to state 105
    cmp                            shift and go to state 5
    ifc                            shift and go to state 6

state 86

    (46) exp -> ID AND exp .
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . DIV exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . POW exp
    (18) exp -> exp . OR exp
    (19) exp -> exp . XOR exp
    (20) exp -> exp . AND exp
    (36) exp -> exp . IN it
    (21) cmp -> exp . CMP exp

    OR              reduce using rule 46 (exp -> ID AND exp .)
    XOR             reduce using rule 46 (exp -> ID AND exp .)
    AND             reduce using rule 46 (exp -> ID AND exp .)
    IN              reduce using rule 46 (exp -> ID AND exp .)
    $end            reduce using rule 46 (exp -> ID AND exp .)
    )               reduce using rule 46 (exp -> ID AND exp .)
    ;               reduce using rule 46 (exp -> ID AND exp .)
    }               reduce using rule 46 (exp -> ID AND exp .)
    :               reduce using rule 46 (exp -> ID AND exp .)
    ,               reduce using rule 46 (exp -> ID AND exp .)
    END             reduce using rule 46 (exp -> ID AND exp .)
    ELSE            reduce using rule 46 (exp -> ID AND exp .)
    ]               reduce using rule 46 (exp -> ID AND exp .)
    [               reduce using rule 46 (exp -> ID AND exp .)
    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    POW             shift and go to state 23
    CMP             shift and go to state 28

  ! +               [ reduce using rule 46 (exp -> ID AND exp .) ]
  ! -               [ reduce using rule 46 (exp -> ID AND exp .) ]
  ! *               [ reduce using rule 46 (exp -> ID AND exp .) ]
  ! DIV             [ reduce using rule 46 (exp -> ID AND exp .) ]
  ! MOD             [ reduce using rule 46 (exp -> ID AND exp .) ]
  ! POW             [ reduce using rule 46 (exp -> ID AND exp .) ]
  ! CMP             [ reduce using rule 46 (exp -> ID AND exp .) ]
  ! OR              [ shift and go to state 24 ]
  ! XOR             [ shift and go to state 25 ]
  ! AND             [ shift and go to state 26 ]
  ! IN              [ shift and go to state 27 ]


state 87

    (22) cmp -> cmp CMP exp .
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . DIV exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . POW exp
    (18) exp -> exp . OR exp
    (19) exp -> exp . XOR exp
    (20) exp -> exp . AND exp
    (36) exp -> exp . IN it
    (21) cmp -> exp . CMP exp

    CMP             reduce using rule 22 (cmp -> cmp CMP exp .)
    OR              reduce using rule 22 (cmp -> cmp CMP exp .)
    XOR             reduce using rule 22 (cmp -> cmp CMP exp .)
    AND             reduce using rule 22 (cmp -> cmp CMP exp .)
    IN              reduce using rule 22 (cmp -> cmp CMP exp .)
    $end            reduce using rule 22 (cmp -> cmp CMP exp .)
    )               reduce using rule 22 (cmp -> cmp CMP exp .)
    ;               reduce using rule 22 (cmp -> cmp CMP exp .)
    }               reduce using rule 22 (cmp -> cmp CMP exp .)
    :               reduce using rule 22 (cmp -> cmp CMP exp .)
    ,               reduce using rule 22 (cmp -> cmp CMP exp .)
    END             reduce using rule 22 (cmp -> cmp CMP exp .)
    ELSE            reduce using rule 22 (cmp -> cmp CMP exp .)
    ]               reduce using rule 22 (cmp -> cmp CMP exp .)
    [               reduce using rule 22 (cmp -> cmp CMP exp .)
    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    POW             shift and go to state 23

  ! +               [ reduce using rule 22 (cmp -> cmp CMP exp .) ]
  ! -               [ reduce using rule 22 (cmp -> cmp CMP exp .) ]
  ! *               [ reduce using rule 22 (cmp -> cmp CMP exp .) ]
  ! DIV             [ reduce using rule 22 (cmp -> cmp CMP exp .) ]
  ! MOD             [ reduce using rule 22 (cmp -> cmp CMP exp .) ]
  ! POW             [ reduce using rule 22 (cmp -> cmp CMP exp .) ]
  ! OR              [ shift and go to state 24 ]
  ! XOR             [ shift and go to state 25 ]
  ! AND             [ shift and go to state 26 ]
  ! IN              [ shift and go to state 27 ]
  ! CMP             [ shift and go to state 28 ]


state 88

    (28) exp -> FOR ID IN . it : exp END
    (32) it -> . [ exp , exp ]
    (33) it -> . ] exp , exp ]
    (34) it -> . [ exp , exp [
    (35) it -> . ] exp , exp [

    [               shift and go to state 65
    ]               shift and go to state 66

    it                             shift and go to state 106

state 89

    (29) exp -> FOR NUM ID . IN it : exp END

    IN              shift and go to state 107


state 90

    (30) exp -> ( exp ) .

    +               reduce using rule 30 (exp -> ( exp ) .)
    -               reduce using rule 30 (exp -> ( exp ) .)
    *               reduce using rule 30 (exp -> ( exp ) .)
    DIV             reduce using rule 30 (exp -> ( exp ) .)
    MOD             reduce using rule 30 (exp -> ( exp ) .)
    POW             reduce using rule 30 (exp -> ( exp ) .)
    OR              reduce using rule 30 (exp -> ( exp ) .)
    XOR             reduce using rule 30 (exp -> ( exp ) .)
    AND             reduce using rule 30 (exp -> ( exp ) .)
    IN              reduce using rule 30 (exp -> ( exp ) .)
    CMP             reduce using rule 30 (exp -> ( exp ) .)
    $end            reduce using rule 30 (exp -> ( exp ) .)
    )               reduce using rule 30 (exp -> ( exp ) .)
    ;               reduce using rule 30 (exp -> ( exp ) .)
    }               reduce using rule 30 (exp -> ( exp ) .)
    :               reduce using rule 30 (exp -> ( exp ) .)
    ,               reduce using rule 30 (exp -> ( exp ) .)
    END             reduce using rule 30 (exp -> ( exp ) .)
    ELSE            reduce using rule 30 (exp -> ( exp ) .)
    ]               reduce using rule 30 (exp -> ( exp ) .)
    [               reduce using rule 30 (exp -> ( exp ) .)


state 91

    (55) exp -> { seq } .

    +               reduce using rule 55 (exp -> { seq } .)
    -               reduce using rule 55 (exp -> { seq } .)
    *               reduce using rule 55 (exp -> { seq } .)
    DIV             reduce using rule 55 (exp -> { seq } .)
    MOD             reduce using rule 55 (exp -> { seq } .)
    POW             reduce using rule 55 (exp -> { seq } .)
    OR              reduce using rule 55 (exp -> { seq } .)
    XOR             reduce using rule 55 (exp -> { seq } .)
    AND             reduce using rule 55 (exp -> { seq } .)
    IN              reduce using rule 55 (exp -> { seq } .)
    CMP             reduce using rule 55 (exp -> { seq } .)
    $end            reduce using rule 55 (exp -> { seq } .)
    )               reduce using rule 55 (exp -> { seq } .)
    ;               reduce using rule 55 (exp -> { seq } .)
    }               reduce using rule 55 (exp -> { seq } .)
    :               reduce using rule 55 (exp -> { seq } .)
    ,               reduce using rule 55 (exp -> { seq } .)
    END             reduce using rule 55 (exp -> { seq } .)
    ELSE            reduce using rule 55 (exp -> { seq } .)
    ]               reduce using rule 55 (exp -> { seq } .)
    [               reduce using rule 55 (exp -> { seq } .)


state 92

    (52) seq -> exp ; . seq
    (53) seq -> exp ; .
    (52) seq -> . exp ; seq
    (53) seq -> . exp ;
    (54) seq -> . exp
    (1) exp -> . ID + ASG exp
    (2) exp -> . ID - ASG exp
    (3) exp -> . ID USG
    (4) exp -> . ID * ASG exp
    (5) exp -> . ID DIV ASG exp
    (6) exp -> . ID MOD ASG exp
    (7) exp -> . ID POW ASG exp
    (8) exp -> . ID OR ASG exp
    (9) exp -> . ID XOR ASG exp
    (10) exp -> . ID AND ASG exp
    (11) exp -> . ID ASG exp
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp DIV exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp POW exp
    (18) exp -> . exp OR exp
    (19) exp -> . exp XOR exp
    (20) exp -> . exp AND exp
    (23) exp -> . cmp
    (27) exp -> . ifc END
    (28) exp -> . FOR ID IN it : exp END
    (29) exp -> . FOR NUM ID IN it : exp END
    (30) exp -> . ( exp )
    (31) exp -> . ID
    (36) exp -> . exp IN it
    (37) exp -> . ID + exp
    (38) exp -> . ID - exp
    (39) exp -> . - exp
    (40) exp -> . ID * exp
    (41) exp -> . ID DIV exp
    (42) exp -> . ID MOD exp
    (43) exp -> . ID POW exp
    (44) exp -> . ID OR exp
    (45) exp -> . ID XOR exp
    (46) exp -> . ID AND exp
    (47) exp -> . + exp
    (48) exp -> . NOT exp
    (49) exp -> . ECHO exp
    (50) exp -> . LOAD exp
    (51) exp -> . EVAL exp
    (55) exp -> . { seq }
    (56) exp -> . NUM
    (57) exp -> . STR
    (58) exp -> . WHILE exp : exp END
    (21) cmp -> . exp CMP exp
    (22) cmp -> . cmp CMP exp
    (24) ifc -> . IF exp : exp
    (25) ifc -> . IF exp : exp ELSE exp
    (26) ifc -> . IF exp : exp ELSE ifc

    }               reduce using rule 53 (seq -> exp ; .)
    ID              shift and go to state 2
    FOR             shift and go to state 7
    (               shift and go to state 9
    -               shift and go to state 4
    +               shift and go to state 3
    NOT             shift and go to state 10
    ECHO            shift and go to state 11
    LOAD            shift and go to state 12
    EVAL            shift and go to state 13
    {               shift and go to state 14
    NUM             shift and go to state 8
    STR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17

    exp                            shift and go to state 52
    seq                            shift and go to state 108
    cmp                            shift and go to state 5
    ifc                            shift and go to state 6

state 93

    (58) exp -> WHILE exp : . exp END
    (1) exp -> . ID + ASG exp
    (2) exp -> . ID - ASG exp
    (3) exp -> . ID USG
    (4) exp -> . ID * ASG exp
    (5) exp -> . ID DIV ASG exp
    (6) exp -> . ID MOD ASG exp
    (7) exp -> . ID POW ASG exp
    (8) exp -> . ID OR ASG exp
    (9) exp -> . ID XOR ASG exp
    (10) exp -> . ID AND ASG exp
    (11) exp -> . ID ASG exp
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp DIV exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp POW exp
    (18) exp -> . exp OR exp
    (19) exp -> . exp XOR exp
    (20) exp -> . exp AND exp
    (23) exp -> . cmp
    (27) exp -> . ifc END
    (28) exp -> . FOR ID IN it : exp END
    (29) exp -> . FOR NUM ID IN it : exp END
    (30) exp -> . ( exp )
    (31) exp -> . ID
    (36) exp -> . exp IN it
    (37) exp -> . ID + exp
    (38) exp -> . ID - exp
    (39) exp -> . - exp
    (40) exp -> . ID * exp
    (41) exp -> . ID DIV exp
    (42) exp -> . ID MOD exp
    (43) exp -> . ID POW exp
    (44) exp -> . ID OR exp
    (45) exp -> . ID XOR exp
    (46) exp -> . ID AND exp
    (47) exp -> . + exp
    (48) exp -> . NOT exp
    (49) exp -> . ECHO exp
    (50) exp -> . LOAD exp
    (51) exp -> . EVAL exp
    (55) exp -> . { seq }
    (56) exp -> . NUM
    (57) exp -> . STR
    (58) exp -> . WHILE exp : exp END
    (21) cmp -> . exp CMP exp
    (22) cmp -> . cmp CMP exp
    (24) ifc -> . IF exp : exp
    (25) ifc -> . IF exp : exp ELSE exp
    (26) ifc -> . IF exp : exp ELSE ifc

    ID              shift and go to state 2
    FOR             shift and go to state 7
    (               shift and go to state 9
    -               shift and go to state 4
    +               shift and go to state 3
    NOT             shift and go to state 10
    ECHO            shift and go to state 11
    LOAD            shift and go to state 12
    EVAL            shift and go to state 13
    {               shift and go to state 14
    NUM             shift and go to state 8
    STR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17

    exp                            shift and go to state 109
    cmp                            shift and go to state 5
    ifc                            shift and go to state 6

state 94

    (24) ifc -> IF exp : . exp
    (25) ifc -> IF exp : . exp ELSE exp
    (26) ifc -> IF exp : . exp ELSE ifc
    (1) exp -> . ID + ASG exp
    (2) exp -> . ID - ASG exp
    (3) exp -> . ID USG
    (4) exp -> . ID * ASG exp
    (5) exp -> . ID DIV ASG exp
    (6) exp -> . ID MOD ASG exp
    (7) exp -> . ID POW ASG exp
    (8) exp -> . ID OR ASG exp
    (9) exp -> . ID XOR ASG exp
    (10) exp -> . ID AND ASG exp
    (11) exp -> . ID ASG exp
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp DIV exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp POW exp
    (18) exp -> . exp OR exp
    (19) exp -> . exp XOR exp
    (20) exp -> . exp AND exp
    (23) exp -> . cmp
    (27) exp -> . ifc END
    (28) exp -> . FOR ID IN it : exp END
    (29) exp -> . FOR NUM ID IN it : exp END
    (30) exp -> . ( exp )
    (31) exp -> . ID
    (36) exp -> . exp IN it
    (37) exp -> . ID + exp
    (38) exp -> . ID - exp
    (39) exp -> . - exp
    (40) exp -> . ID * exp
    (41) exp -> . ID DIV exp
    (42) exp -> . ID MOD exp
    (43) exp -> . ID POW exp
    (44) exp -> . ID OR exp
    (45) exp -> . ID XOR exp
    (46) exp -> . ID AND exp
    (47) exp -> . + exp
    (48) exp -> . NOT exp
    (49) exp -> . ECHO exp
    (50) exp -> . LOAD exp
    (51) exp -> . EVAL exp
    (55) exp -> . { seq }
    (56) exp -> . NUM
    (57) exp -> . STR
    (58) exp -> . WHILE exp : exp END
    (21) cmp -> . exp CMP exp
    (22) cmp -> . cmp CMP exp
    (24) ifc -> . IF exp : exp
    (25) ifc -> . IF exp : exp ELSE exp
    (26) ifc -> . IF exp : exp ELSE ifc

    ID              shift and go to state 2
    FOR             shift and go to state 7
    (               shift and go to state 9
    -               shift and go to state 4
    +               shift and go to state 3
    NOT             shift and go to state 10
    ECHO            shift and go to state 11
    LOAD            shift and go to state 12
    EVAL            shift and go to state 13
    {               shift and go to state 14
    NUM             shift and go to state 8
    STR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17

    exp                            shift and go to state 110
    ifc                            shift and go to state 6
    cmp                            shift and go to state 5

state 95

    (32) it -> [ exp . , exp ]
    (34) it -> [ exp . , exp [
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . DIV exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . POW exp
    (18) exp -> exp . OR exp
    (19) exp -> exp . XOR exp
    (20) exp -> exp . AND exp
    (36) exp -> exp . IN it
    (21) cmp -> exp . CMP exp

    ,               shift and go to state 111
    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    POW             shift and go to state 23
    OR              shift and go to state 24
    XOR             shift and go to state 25
    AND             shift and go to state 26
    IN              shift and go to state 27
    CMP             shift and go to state 28


state 96

    (33) it -> ] exp . , exp ]
    (35) it -> ] exp . , exp [
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . DIV exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . POW exp
    (18) exp -> exp . OR exp
    (19) exp -> exp . XOR exp
    (20) exp -> exp . AND exp
    (36) exp -> exp . IN it
    (21) cmp -> exp . CMP exp

    ,               shift and go to state 112
    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    POW             shift and go to state 23
    OR              shift and go to state 24
    XOR             shift and go to state 25
    AND             shift and go to state 26
    IN              shift and go to state 27
    CMP             shift and go to state 28


state 97

    (1) exp -> ID + ASG exp .
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . DIV exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . POW exp
    (18) exp -> exp . OR exp
    (19) exp -> exp . XOR exp
    (20) exp -> exp . AND exp
    (36) exp -> exp . IN it
    (21) cmp -> exp . CMP exp

    IN              reduce using rule 1 (exp -> ID + ASG exp .)
    $end            reduce using rule 1 (exp -> ID + ASG exp .)
    )               reduce using rule 1 (exp -> ID + ASG exp .)
    ;               reduce using rule 1 (exp -> ID + ASG exp .)
    }               reduce using rule 1 (exp -> ID + ASG exp .)
    :               reduce using rule 1 (exp -> ID + ASG exp .)
    ,               reduce using rule 1 (exp -> ID + ASG exp .)
    END             reduce using rule 1 (exp -> ID + ASG exp .)
    ELSE            reduce using rule 1 (exp -> ID + ASG exp .)
    ]               reduce using rule 1 (exp -> ID + ASG exp .)
    [               reduce using rule 1 (exp -> ID + ASG exp .)
    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    POW             shift and go to state 23
    OR              shift and go to state 24
    XOR             shift and go to state 25
    AND             shift and go to state 26
    CMP             shift and go to state 28

  ! +               [ reduce using rule 1 (exp -> ID + ASG exp .) ]
  ! -               [ reduce using rule 1 (exp -> ID + ASG exp .) ]
  ! *               [ reduce using rule 1 (exp -> ID + ASG exp .) ]
  ! DIV             [ reduce using rule 1 (exp -> ID + ASG exp .) ]
  ! MOD             [ reduce using rule 1 (exp -> ID + ASG exp .) ]
  ! POW             [ reduce using rule 1 (exp -> ID + ASG exp .) ]
  ! OR              [ reduce using rule 1 (exp -> ID + ASG exp .) ]
  ! XOR             [ reduce using rule 1 (exp -> ID + ASG exp .) ]
  ! AND             [ reduce using rule 1 (exp -> ID + ASG exp .) ]
  ! CMP             [ reduce using rule 1 (exp -> ID + ASG exp .) ]
  ! IN              [ shift and go to state 27 ]


state 98

    (2) exp -> ID - ASG exp .
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . DIV exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . POW exp
    (18) exp -> exp . OR exp
    (19) exp -> exp . XOR exp
    (20) exp -> exp . AND exp
    (36) exp -> exp . IN it
    (21) cmp -> exp . CMP exp

    IN              reduce using rule 2 (exp -> ID - ASG exp .)
    $end            reduce using rule 2 (exp -> ID - ASG exp .)
    )               reduce using rule 2 (exp -> ID - ASG exp .)
    ;               reduce using rule 2 (exp -> ID - ASG exp .)
    }               reduce using rule 2 (exp -> ID - ASG exp .)
    :               reduce using rule 2 (exp -> ID - ASG exp .)
    ,               reduce using rule 2 (exp -> ID - ASG exp .)
    END             reduce using rule 2 (exp -> ID - ASG exp .)
    ELSE            reduce using rule 2 (exp -> ID - ASG exp .)
    ]               reduce using rule 2 (exp -> ID - ASG exp .)
    [               reduce using rule 2 (exp -> ID - ASG exp .)
    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    POW             shift and go to state 23
    OR              shift and go to state 24
    XOR             shift and go to state 25
    AND             shift and go to state 26
    CMP             shift and go to state 28

  ! +               [ reduce using rule 2 (exp -> ID - ASG exp .) ]
  ! -               [ reduce using rule 2 (exp -> ID - ASG exp .) ]
  ! *               [ reduce using rule 2 (exp -> ID - ASG exp .) ]
  ! DIV             [ reduce using rule 2 (exp -> ID - ASG exp .) ]
  ! MOD             [ reduce using rule 2 (exp -> ID - ASG exp .) ]
  ! POW             [ reduce using rule 2 (exp -> ID - ASG exp .) ]
  ! OR              [ reduce using rule 2 (exp -> ID - ASG exp .) ]
  ! XOR             [ reduce using rule 2 (exp -> ID - ASG exp .) ]
  ! AND             [ reduce using rule 2 (exp -> ID - ASG exp .) ]
  ! CMP             [ reduce using rule 2 (exp -> ID - ASG exp .) ]
  ! IN              [ shift and go to state 27 ]


state 99

    (4) exp -> ID * ASG exp .
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . DIV exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . POW exp
    (18) exp -> exp . OR exp
    (19) exp -> exp . XOR exp
    (20) exp -> exp . AND exp
    (36) exp -> exp . IN it
    (21) cmp -> exp . CMP exp

    IN              reduce using rule 4 (exp -> ID * ASG exp .)
    $end            reduce using rule 4 (exp -> ID * ASG exp .)
    )               reduce using rule 4 (exp -> ID * ASG exp .)
    ;               reduce using rule 4 (exp -> ID * ASG exp .)
    }               reduce using rule 4 (exp -> ID * ASG exp .)
    :               reduce using rule 4 (exp -> ID * ASG exp .)
    ,               reduce using rule 4 (exp -> ID * ASG exp .)
    END             reduce using rule 4 (exp -> ID * ASG exp .)
    ELSE            reduce using rule 4 (exp -> ID * ASG exp .)
    ]               reduce using rule 4 (exp -> ID * ASG exp .)
    [               reduce using rule 4 (exp -> ID * ASG exp .)
    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    POW             shift and go to state 23
    OR              shift and go to state 24
    XOR             shift and go to state 25
    AND             shift and go to state 26
    CMP             shift and go to state 28

  ! +               [ reduce using rule 4 (exp -> ID * ASG exp .) ]
  ! -               [ reduce using rule 4 (exp -> ID * ASG exp .) ]
  ! *               [ reduce using rule 4 (exp -> ID * ASG exp .) ]
  ! DIV             [ reduce using rule 4 (exp -> ID * ASG exp .) ]
  ! MOD             [ reduce using rule 4 (exp -> ID * ASG exp .) ]
  ! POW             [ reduce using rule 4 (exp -> ID * ASG exp .) ]
  ! OR              [ reduce using rule 4 (exp -> ID * ASG exp .) ]
  ! XOR             [ reduce using rule 4 (exp -> ID * ASG exp .) ]
  ! AND             [ reduce using rule 4 (exp -> ID * ASG exp .) ]
  ! CMP             [ reduce using rule 4 (exp -> ID * ASG exp .) ]
  ! IN              [ shift and go to state 27 ]


state 100

    (5) exp -> ID DIV ASG exp .
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . DIV exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . POW exp
    (18) exp -> exp . OR exp
    (19) exp -> exp . XOR exp
    (20) exp -> exp . AND exp
    (36) exp -> exp . IN it
    (21) cmp -> exp . CMP exp

    IN              reduce using rule 5 (exp -> ID DIV ASG exp .)
    $end            reduce using rule 5 (exp -> ID DIV ASG exp .)
    )               reduce using rule 5 (exp -> ID DIV ASG exp .)
    ;               reduce using rule 5 (exp -> ID DIV ASG exp .)
    }               reduce using rule 5 (exp -> ID DIV ASG exp .)
    :               reduce using rule 5 (exp -> ID DIV ASG exp .)
    ,               reduce using rule 5 (exp -> ID DIV ASG exp .)
    END             reduce using rule 5 (exp -> ID DIV ASG exp .)
    ELSE            reduce using rule 5 (exp -> ID DIV ASG exp .)
    ]               reduce using rule 5 (exp -> ID DIV ASG exp .)
    [               reduce using rule 5 (exp -> ID DIV ASG exp .)
    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    POW             shift and go to state 23
    OR              shift and go to state 24
    XOR             shift and go to state 25
    AND             shift and go to state 26
    CMP             shift and go to state 28

  ! +               [ reduce using rule 5 (exp -> ID DIV ASG exp .) ]
  ! -               [ reduce using rule 5 (exp -> ID DIV ASG exp .) ]
  ! *               [ reduce using rule 5 (exp -> ID DIV ASG exp .) ]
  ! DIV             [ reduce using rule 5 (exp -> ID DIV ASG exp .) ]
  ! MOD             [ reduce using rule 5 (exp -> ID DIV ASG exp .) ]
  ! POW             [ reduce using rule 5 (exp -> ID DIV ASG exp .) ]
  ! OR              [ reduce using rule 5 (exp -> ID DIV ASG exp .) ]
  ! XOR             [ reduce using rule 5 (exp -> ID DIV ASG exp .) ]
  ! AND             [ reduce using rule 5 (exp -> ID DIV ASG exp .) ]
  ! CMP             [ reduce using rule 5 (exp -> ID DIV ASG exp .) ]
  ! IN              [ shift and go to state 27 ]


state 101

    (6) exp -> ID MOD ASG exp .
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . DIV exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . POW exp
    (18) exp -> exp . OR exp
    (19) exp -> exp . XOR exp
    (20) exp -> exp . AND exp
    (36) exp -> exp . IN it
    (21) cmp -> exp . CMP exp

    IN              reduce using rule 6 (exp -> ID MOD ASG exp .)
    $end            reduce using rule 6 (exp -> ID MOD ASG exp .)
    )               reduce using rule 6 (exp -> ID MOD ASG exp .)
    ;               reduce using rule 6 (exp -> ID MOD ASG exp .)
    }               reduce using rule 6 (exp -> ID MOD ASG exp .)
    :               reduce using rule 6 (exp -> ID MOD ASG exp .)
    ,               reduce using rule 6 (exp -> ID MOD ASG exp .)
    END             reduce using rule 6 (exp -> ID MOD ASG exp .)
    ELSE            reduce using rule 6 (exp -> ID MOD ASG exp .)
    ]               reduce using rule 6 (exp -> ID MOD ASG exp .)
    [               reduce using rule 6 (exp -> ID MOD ASG exp .)
    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    POW             shift and go to state 23
    OR              shift and go to state 24
    XOR             shift and go to state 25
    AND             shift and go to state 26
    CMP             shift and go to state 28

  ! +               [ reduce using rule 6 (exp -> ID MOD ASG exp .) ]
  ! -               [ reduce using rule 6 (exp -> ID MOD ASG exp .) ]
  ! *               [ reduce using rule 6 (exp -> ID MOD ASG exp .) ]
  ! DIV             [ reduce using rule 6 (exp -> ID MOD ASG exp .) ]
  ! MOD             [ reduce using rule 6 (exp -> ID MOD ASG exp .) ]
  ! POW             [ reduce using rule 6 (exp -> ID MOD ASG exp .) ]
  ! OR              [ reduce using rule 6 (exp -> ID MOD ASG exp .) ]
  ! XOR             [ reduce using rule 6 (exp -> ID MOD ASG exp .) ]
  ! AND             [ reduce using rule 6 (exp -> ID MOD ASG exp .) ]
  ! CMP             [ reduce using rule 6 (exp -> ID MOD ASG exp .) ]
  ! IN              [ shift and go to state 27 ]


state 102

    (7) exp -> ID POW ASG exp .
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . DIV exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . POW exp
    (18) exp -> exp . OR exp
    (19) exp -> exp . XOR exp
    (20) exp -> exp . AND exp
    (36) exp -> exp . IN it
    (21) cmp -> exp . CMP exp

    IN              reduce using rule 7 (exp -> ID POW ASG exp .)
    $end            reduce using rule 7 (exp -> ID POW ASG exp .)
    )               reduce using rule 7 (exp -> ID POW ASG exp .)
    ;               reduce using rule 7 (exp -> ID POW ASG exp .)
    }               reduce using rule 7 (exp -> ID POW ASG exp .)
    :               reduce using rule 7 (exp -> ID POW ASG exp .)
    ,               reduce using rule 7 (exp -> ID POW ASG exp .)
    END             reduce using rule 7 (exp -> ID POW ASG exp .)
    ELSE            reduce using rule 7 (exp -> ID POW ASG exp .)
    ]               reduce using rule 7 (exp -> ID POW ASG exp .)
    [               reduce using rule 7 (exp -> ID POW ASG exp .)
    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    POW             shift and go to state 23
    OR              shift and go to state 24
    XOR             shift and go to state 25
    AND             shift and go to state 26
    CMP             shift and go to state 28

  ! +               [ reduce using rule 7 (exp -> ID POW ASG exp .) ]
  ! -               [ reduce using rule 7 (exp -> ID POW ASG exp .) ]
  ! *               [ reduce using rule 7 (exp -> ID POW ASG exp .) ]
  ! DIV             [ reduce using rule 7 (exp -> ID POW ASG exp .) ]
  ! MOD             [ reduce using rule 7 (exp -> ID POW ASG exp .) ]
  ! POW             [ reduce using rule 7 (exp -> ID POW ASG exp .) ]
  ! OR              [ reduce using rule 7 (exp -> ID POW ASG exp .) ]
  ! XOR             [ reduce using rule 7 (exp -> ID POW ASG exp .) ]
  ! AND             [ reduce using rule 7 (exp -> ID POW ASG exp .) ]
  ! CMP             [ reduce using rule 7 (exp -> ID POW ASG exp .) ]
  ! IN              [ shift and go to state 27 ]


state 103

    (8) exp -> ID OR ASG exp .
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . DIV exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . POW exp
    (18) exp -> exp . OR exp
    (19) exp -> exp . XOR exp
    (20) exp -> exp . AND exp
    (36) exp -> exp . IN it
    (21) cmp -> exp . CMP exp

    IN              reduce using rule 8 (exp -> ID OR ASG exp .)
    $end            reduce using rule 8 (exp -> ID OR ASG exp .)
    )               reduce using rule 8 (exp -> ID OR ASG exp .)
    ;               reduce using rule 8 (exp -> ID OR ASG exp .)
    }               reduce using rule 8 (exp -> ID OR ASG exp .)
    :               reduce using rule 8 (exp -> ID OR ASG exp .)
    ,               reduce using rule 8 (exp -> ID OR ASG exp .)
    END             reduce using rule 8 (exp -> ID OR ASG exp .)
    ELSE            reduce using rule 8 (exp -> ID OR ASG exp .)
    ]               reduce using rule 8 (exp -> ID OR ASG exp .)
    [               reduce using rule 8 (exp -> ID OR ASG exp .)
    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    POW             shift and go to state 23
    OR              shift and go to state 24
    XOR             shift and go to state 25
    AND             shift and go to state 26
    CMP             shift and go to state 28

  ! +               [ reduce using rule 8 (exp -> ID OR ASG exp .) ]
  ! -               [ reduce using rule 8 (exp -> ID OR ASG exp .) ]
  ! *               [ reduce using rule 8 (exp -> ID OR ASG exp .) ]
  ! DIV             [ reduce using rule 8 (exp -> ID OR ASG exp .) ]
  ! MOD             [ reduce using rule 8 (exp -> ID OR ASG exp .) ]
  ! POW             [ reduce using rule 8 (exp -> ID OR ASG exp .) ]
  ! OR              [ reduce using rule 8 (exp -> ID OR ASG exp .) ]
  ! XOR             [ reduce using rule 8 (exp -> ID OR ASG exp .) ]
  ! AND             [ reduce using rule 8 (exp -> ID OR ASG exp .) ]
  ! CMP             [ reduce using rule 8 (exp -> ID OR ASG exp .) ]
  ! IN              [ shift and go to state 27 ]


state 104

    (9) exp -> ID XOR ASG exp .
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . DIV exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . POW exp
    (18) exp -> exp . OR exp
    (19) exp -> exp . XOR exp
    (20) exp -> exp . AND exp
    (36) exp -> exp . IN it
    (21) cmp -> exp . CMP exp

    IN              reduce using rule 9 (exp -> ID XOR ASG exp .)
    $end            reduce using rule 9 (exp -> ID XOR ASG exp .)
    )               reduce using rule 9 (exp -> ID XOR ASG exp .)
    ;               reduce using rule 9 (exp -> ID XOR ASG exp .)
    }               reduce using rule 9 (exp -> ID XOR ASG exp .)
    :               reduce using rule 9 (exp -> ID XOR ASG exp .)
    ,               reduce using rule 9 (exp -> ID XOR ASG exp .)
    END             reduce using rule 9 (exp -> ID XOR ASG exp .)
    ELSE            reduce using rule 9 (exp -> ID XOR ASG exp .)
    ]               reduce using rule 9 (exp -> ID XOR ASG exp .)
    [               reduce using rule 9 (exp -> ID XOR ASG exp .)
    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    POW             shift and go to state 23
    OR              shift and go to state 24
    XOR             shift and go to state 25
    AND             shift and go to state 26
    CMP             shift and go to state 28

  ! +               [ reduce using rule 9 (exp -> ID XOR ASG exp .) ]
  ! -               [ reduce using rule 9 (exp -> ID XOR ASG exp .) ]
  ! *               [ reduce using rule 9 (exp -> ID XOR ASG exp .) ]
  ! DIV             [ reduce using rule 9 (exp -> ID XOR ASG exp .) ]
  ! MOD             [ reduce using rule 9 (exp -> ID XOR ASG exp .) ]
  ! POW             [ reduce using rule 9 (exp -> ID XOR ASG exp .) ]
  ! OR              [ reduce using rule 9 (exp -> ID XOR ASG exp .) ]
  ! XOR             [ reduce using rule 9 (exp -> ID XOR ASG exp .) ]
  ! AND             [ reduce using rule 9 (exp -> ID XOR ASG exp .) ]
  ! CMP             [ reduce using rule 9 (exp -> ID XOR ASG exp .) ]
  ! IN              [ shift and go to state 27 ]


state 105

    (10) exp -> ID AND ASG exp .
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . DIV exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . POW exp
    (18) exp -> exp . OR exp
    (19) exp -> exp . XOR exp
    (20) exp -> exp . AND exp
    (36) exp -> exp . IN it
    (21) cmp -> exp . CMP exp

    IN              reduce using rule 10 (exp -> ID AND ASG exp .)
    $end            reduce using rule 10 (exp -> ID AND ASG exp .)
    )               reduce using rule 10 (exp -> ID AND ASG exp .)
    ;               reduce using rule 10 (exp -> ID AND ASG exp .)
    }               reduce using rule 10 (exp -> ID AND ASG exp .)
    :               reduce using rule 10 (exp -> ID AND ASG exp .)
    ,               reduce using rule 10 (exp -> ID AND ASG exp .)
    END             reduce using rule 10 (exp -> ID AND ASG exp .)
    ELSE            reduce using rule 10 (exp -> ID AND ASG exp .)
    ]               reduce using rule 10 (exp -> ID AND ASG exp .)
    [               reduce using rule 10 (exp -> ID AND ASG exp .)
    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    POW             shift and go to state 23
    OR              shift and go to state 24
    XOR             shift and go to state 25
    AND             shift and go to state 26
    CMP             shift and go to state 28

  ! +               [ reduce using rule 10 (exp -> ID AND ASG exp .) ]
  ! -               [ reduce using rule 10 (exp -> ID AND ASG exp .) ]
  ! *               [ reduce using rule 10 (exp -> ID AND ASG exp .) ]
  ! DIV             [ reduce using rule 10 (exp -> ID AND ASG exp .) ]
  ! MOD             [ reduce using rule 10 (exp -> ID AND ASG exp .) ]
  ! POW             [ reduce using rule 10 (exp -> ID AND ASG exp .) ]
  ! OR              [ reduce using rule 10 (exp -> ID AND ASG exp .) ]
  ! XOR             [ reduce using rule 10 (exp -> ID AND ASG exp .) ]
  ! AND             [ reduce using rule 10 (exp -> ID AND ASG exp .) ]
  ! CMP             [ reduce using rule 10 (exp -> ID AND ASG exp .) ]
  ! IN              [ shift and go to state 27 ]


state 106

    (28) exp -> FOR ID IN it . : exp END

    :               shift and go to state 113


state 107

    (29) exp -> FOR NUM ID IN . it : exp END
    (32) it -> . [ exp , exp ]
    (33) it -> . ] exp , exp ]
    (34) it -> . [ exp , exp [
    (35) it -> . ] exp , exp [

    [               shift and go to state 65
    ]               shift and go to state 66

    it                             shift and go to state 114

state 108

    (52) seq -> exp ; seq .

    }               reduce using rule 52 (seq -> exp ; seq .)


state 109

    (58) exp -> WHILE exp : exp . END
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . DIV exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . POW exp
    (18) exp -> exp . OR exp
    (19) exp -> exp . XOR exp
    (20) exp -> exp . AND exp
    (36) exp -> exp . IN it
    (21) cmp -> exp . CMP exp

    END             shift and go to state 115
    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    POW             shift and go to state 23
    OR              shift and go to state 24
    XOR             shift and go to state 25
    AND             shift and go to state 26
    IN              shift and go to state 27
    CMP             shift and go to state 28


state 110

    (24) ifc -> IF exp : exp .
    (25) ifc -> IF exp : exp . ELSE exp
    (26) ifc -> IF exp : exp . ELSE ifc
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . DIV exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . POW exp
    (18) exp -> exp . OR exp
    (19) exp -> exp . XOR exp
    (20) exp -> exp . AND exp
    (36) exp -> exp . IN it
    (21) cmp -> exp . CMP exp

    END             reduce using rule 24 (ifc -> IF exp : exp .)
    ELSE            shift and go to state 116
    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    POW             shift and go to state 23
    OR              shift and go to state 24
    XOR             shift and go to state 25
    AND             shift and go to state 26
    IN              shift and go to state 27
    CMP             shift and go to state 28


state 111

    (32) it -> [ exp , . exp ]
    (34) it -> [ exp , . exp [
    (1) exp -> . ID + ASG exp
    (2) exp -> . ID - ASG exp
    (3) exp -> . ID USG
    (4) exp -> . ID * ASG exp
    (5) exp -> . ID DIV ASG exp
    (6) exp -> . ID MOD ASG exp
    (7) exp -> . ID POW ASG exp
    (8) exp -> . ID OR ASG exp
    (9) exp -> . ID XOR ASG exp
    (10) exp -> . ID AND ASG exp
    (11) exp -> . ID ASG exp
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp DIV exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp POW exp
    (18) exp -> . exp OR exp
    (19) exp -> . exp XOR exp
    (20) exp -> . exp AND exp
    (23) exp -> . cmp
    (27) exp -> . ifc END
    (28) exp -> . FOR ID IN it : exp END
    (29) exp -> . FOR NUM ID IN it : exp END
    (30) exp -> . ( exp )
    (31) exp -> . ID
    (36) exp -> . exp IN it
    (37) exp -> . ID + exp
    (38) exp -> . ID - exp
    (39) exp -> . - exp
    (40) exp -> . ID * exp
    (41) exp -> . ID DIV exp
    (42) exp -> . ID MOD exp
    (43) exp -> . ID POW exp
    (44) exp -> . ID OR exp
    (45) exp -> . ID XOR exp
    (46) exp -> . ID AND exp
    (47) exp -> . + exp
    (48) exp -> . NOT exp
    (49) exp -> . ECHO exp
    (50) exp -> . LOAD exp
    (51) exp -> . EVAL exp
    (55) exp -> . { seq }
    (56) exp -> . NUM
    (57) exp -> . STR
    (58) exp -> . WHILE exp : exp END
    (21) cmp -> . exp CMP exp
    (22) cmp -> . cmp CMP exp
    (24) ifc -> . IF exp : exp
    (25) ifc -> . IF exp : exp ELSE exp
    (26) ifc -> . IF exp : exp ELSE ifc

    ID              shift and go to state 2
    FOR             shift and go to state 7
    (               shift and go to state 9
    -               shift and go to state 4
    +               shift and go to state 3
    NOT             shift and go to state 10
    ECHO            shift and go to state 11
    LOAD            shift and go to state 12
    EVAL            shift and go to state 13
    {               shift and go to state 14
    NUM             shift and go to state 8
    STR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17

    exp                            shift and go to state 117
    cmp                            shift and go to state 5
    ifc                            shift and go to state 6

state 112

    (33) it -> ] exp , . exp ]
    (35) it -> ] exp , . exp [
    (1) exp -> . ID + ASG exp
    (2) exp -> . ID - ASG exp
    (3) exp -> . ID USG
    (4) exp -> . ID * ASG exp
    (5) exp -> . ID DIV ASG exp
    (6) exp -> . ID MOD ASG exp
    (7) exp -> . ID POW ASG exp
    (8) exp -> . ID OR ASG exp
    (9) exp -> . ID XOR ASG exp
    (10) exp -> . ID AND ASG exp
    (11) exp -> . ID ASG exp
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp DIV exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp POW exp
    (18) exp -> . exp OR exp
    (19) exp -> . exp XOR exp
    (20) exp -> . exp AND exp
    (23) exp -> . cmp
    (27) exp -> . ifc END
    (28) exp -> . FOR ID IN it : exp END
    (29) exp -> . FOR NUM ID IN it : exp END
    (30) exp -> . ( exp )
    (31) exp -> . ID
    (36) exp -> . exp IN it
    (37) exp -> . ID + exp
    (38) exp -> . ID - exp
    (39) exp -> . - exp
    (40) exp -> . ID * exp
    (41) exp -> . ID DIV exp
    (42) exp -> . ID MOD exp
    (43) exp -> . ID POW exp
    (44) exp -> . ID OR exp
    (45) exp -> . ID XOR exp
    (46) exp -> . ID AND exp
    (47) exp -> . + exp
    (48) exp -> . NOT exp
    (49) exp -> . ECHO exp
    (50) exp -> . LOAD exp
    (51) exp -> . EVAL exp
    (55) exp -> . { seq }
    (56) exp -> . NUM
    (57) exp -> . STR
    (58) exp -> . WHILE exp : exp END
    (21) cmp -> . exp CMP exp
    (22) cmp -> . cmp CMP exp
    (24) ifc -> . IF exp : exp
    (25) ifc -> . IF exp : exp ELSE exp
    (26) ifc -> . IF exp : exp ELSE ifc

    ID              shift and go to state 2
    FOR             shift and go to state 7
    (               shift and go to state 9
    -               shift and go to state 4
    +               shift and go to state 3
    NOT             shift and go to state 10
    ECHO            shift and go to state 11
    LOAD            shift and go to state 12
    EVAL            shift and go to state 13
    {               shift and go to state 14
    NUM             shift and go to state 8
    STR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17

    exp                            shift and go to state 118
    cmp                            shift and go to state 5
    ifc                            shift and go to state 6

state 113

    (28) exp -> FOR ID IN it : . exp END
    (1) exp -> . ID + ASG exp
    (2) exp -> . ID - ASG exp
    (3) exp -> . ID USG
    (4) exp -> . ID * ASG exp
    (5) exp -> . ID DIV ASG exp
    (6) exp -> . ID MOD ASG exp
    (7) exp -> . ID POW ASG exp
    (8) exp -> . ID OR ASG exp
    (9) exp -> . ID XOR ASG exp
    (10) exp -> . ID AND ASG exp
    (11) exp -> . ID ASG exp
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp DIV exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp POW exp
    (18) exp -> . exp OR exp
    (19) exp -> . exp XOR exp
    (20) exp -> . exp AND exp
    (23) exp -> . cmp
    (27) exp -> . ifc END
    (28) exp -> . FOR ID IN it : exp END
    (29) exp -> . FOR NUM ID IN it : exp END
    (30) exp -> . ( exp )
    (31) exp -> . ID
    (36) exp -> . exp IN it
    (37) exp -> . ID + exp
    (38) exp -> . ID - exp
    (39) exp -> . - exp
    (40) exp -> . ID * exp
    (41) exp -> . ID DIV exp
    (42) exp -> . ID MOD exp
    (43) exp -> . ID POW exp
    (44) exp -> . ID OR exp
    (45) exp -> . ID XOR exp
    (46) exp -> . ID AND exp
    (47) exp -> . + exp
    (48) exp -> . NOT exp
    (49) exp -> . ECHO exp
    (50) exp -> . LOAD exp
    (51) exp -> . EVAL exp
    (55) exp -> . { seq }
    (56) exp -> . NUM
    (57) exp -> . STR
    (58) exp -> . WHILE exp : exp END
    (21) cmp -> . exp CMP exp
    (22) cmp -> . cmp CMP exp
    (24) ifc -> . IF exp : exp
    (25) ifc -> . IF exp : exp ELSE exp
    (26) ifc -> . IF exp : exp ELSE ifc

    ID              shift and go to state 2
    FOR             shift and go to state 7
    (               shift and go to state 9
    -               shift and go to state 4
    +               shift and go to state 3
    NOT             shift and go to state 10
    ECHO            shift and go to state 11
    LOAD            shift and go to state 12
    EVAL            shift and go to state 13
    {               shift and go to state 14
    NUM             shift and go to state 8
    STR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17

    exp                            shift and go to state 119
    cmp                            shift and go to state 5
    ifc                            shift and go to state 6

state 114

    (29) exp -> FOR NUM ID IN it . : exp END

    :               shift and go to state 120


state 115

    (58) exp -> WHILE exp : exp END .

    +               reduce using rule 58 (exp -> WHILE exp : exp END .)
    -               reduce using rule 58 (exp -> WHILE exp : exp END .)
    *               reduce using rule 58 (exp -> WHILE exp : exp END .)
    DIV             reduce using rule 58 (exp -> WHILE exp : exp END .)
    MOD             reduce using rule 58 (exp -> WHILE exp : exp END .)
    POW             reduce using rule 58 (exp -> WHILE exp : exp END .)
    OR              reduce using rule 58 (exp -> WHILE exp : exp END .)
    XOR             reduce using rule 58 (exp -> WHILE exp : exp END .)
    AND             reduce using rule 58 (exp -> WHILE exp : exp END .)
    IN              reduce using rule 58 (exp -> WHILE exp : exp END .)
    CMP             reduce using rule 58 (exp -> WHILE exp : exp END .)
    $end            reduce using rule 58 (exp -> WHILE exp : exp END .)
    )               reduce using rule 58 (exp -> WHILE exp : exp END .)
    ;               reduce using rule 58 (exp -> WHILE exp : exp END .)
    }               reduce using rule 58 (exp -> WHILE exp : exp END .)
    :               reduce using rule 58 (exp -> WHILE exp : exp END .)
    ,               reduce using rule 58 (exp -> WHILE exp : exp END .)
    END             reduce using rule 58 (exp -> WHILE exp : exp END .)
    ELSE            reduce using rule 58 (exp -> WHILE exp : exp END .)
    ]               reduce using rule 58 (exp -> WHILE exp : exp END .)
    [               reduce using rule 58 (exp -> WHILE exp : exp END .)


state 116

    (25) ifc -> IF exp : exp ELSE . exp
    (26) ifc -> IF exp : exp ELSE . ifc
    (1) exp -> . ID + ASG exp
    (2) exp -> . ID - ASG exp
    (3) exp -> . ID USG
    (4) exp -> . ID * ASG exp
    (5) exp -> . ID DIV ASG exp
    (6) exp -> . ID MOD ASG exp
    (7) exp -> . ID POW ASG exp
    (8) exp -> . ID OR ASG exp
    (9) exp -> . ID XOR ASG exp
    (10) exp -> . ID AND ASG exp
    (11) exp -> . ID ASG exp
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp DIV exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp POW exp
    (18) exp -> . exp OR exp
    (19) exp -> . exp XOR exp
    (20) exp -> . exp AND exp
    (23) exp -> . cmp
    (27) exp -> . ifc END
    (28) exp -> . FOR ID IN it : exp END
    (29) exp -> . FOR NUM ID IN it : exp END
    (30) exp -> . ( exp )
    (31) exp -> . ID
    (36) exp -> . exp IN it
    (37) exp -> . ID + exp
    (38) exp -> . ID - exp
    (39) exp -> . - exp
    (40) exp -> . ID * exp
    (41) exp -> . ID DIV exp
    (42) exp -> . ID MOD exp
    (43) exp -> . ID POW exp
    (44) exp -> . ID OR exp
    (45) exp -> . ID XOR exp
    (46) exp -> . ID AND exp
    (47) exp -> . + exp
    (48) exp -> . NOT exp
    (49) exp -> . ECHO exp
    (50) exp -> . LOAD exp
    (51) exp -> . EVAL exp
    (55) exp -> . { seq }
    (56) exp -> . NUM
    (57) exp -> . STR
    (58) exp -> . WHILE exp : exp END
    (24) ifc -> . IF exp : exp
    (25) ifc -> . IF exp : exp ELSE exp
    (26) ifc -> . IF exp : exp ELSE ifc
    (21) cmp -> . exp CMP exp
    (22) cmp -> . cmp CMP exp

    ID              shift and go to state 2
    FOR             shift and go to state 7
    (               shift and go to state 9
    -               shift and go to state 4
    +               shift and go to state 3
    NOT             shift and go to state 10
    ECHO            shift and go to state 11
    LOAD            shift and go to state 12
    EVAL            shift and go to state 13
    {               shift and go to state 14
    NUM             shift and go to state 8
    STR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17

    exp                            shift and go to state 121
    ifc                            shift and go to state 122
    cmp                            shift and go to state 5

state 117

    (32) it -> [ exp , exp . ]
    (34) it -> [ exp , exp . [
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . DIV exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . POW exp
    (18) exp -> exp . OR exp
    (19) exp -> exp . XOR exp
    (20) exp -> exp . AND exp
    (36) exp -> exp . IN it
    (21) cmp -> exp . CMP exp

    ]               shift and go to state 124
    [               shift and go to state 123
    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    POW             shift and go to state 23
    OR              shift and go to state 24
    XOR             shift and go to state 25
    AND             shift and go to state 26
    IN              shift and go to state 27
    CMP             shift and go to state 28


state 118

    (33) it -> ] exp , exp . ]
    (35) it -> ] exp , exp . [
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . DIV exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . POW exp
    (18) exp -> exp . OR exp
    (19) exp -> exp . XOR exp
    (20) exp -> exp . AND exp
    (36) exp -> exp . IN it
    (21) cmp -> exp . CMP exp

    ]               shift and go to state 125
    [               shift and go to state 126
    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    POW             shift and go to state 23
    OR              shift and go to state 24
    XOR             shift and go to state 25
    AND             shift and go to state 26
    IN              shift and go to state 27
    CMP             shift and go to state 28


state 119

    (28) exp -> FOR ID IN it : exp . END
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . DIV exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . POW exp
    (18) exp -> exp . OR exp
    (19) exp -> exp . XOR exp
    (20) exp -> exp . AND exp
    (36) exp -> exp . IN it
    (21) cmp -> exp . CMP exp

    END             shift and go to state 127
    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    POW             shift and go to state 23
    OR              shift and go to state 24
    XOR             shift and go to state 25
    AND             shift and go to state 26
    IN              shift and go to state 27
    CMP             shift and go to state 28


state 120

    (29) exp -> FOR NUM ID IN it : . exp END
    (1) exp -> . ID + ASG exp
    (2) exp -> . ID - ASG exp
    (3) exp -> . ID USG
    (4) exp -> . ID * ASG exp
    (5) exp -> . ID DIV ASG exp
    (6) exp -> . ID MOD ASG exp
    (7) exp -> . ID POW ASG exp
    (8) exp -> . ID OR ASG exp
    (9) exp -> . ID XOR ASG exp
    (10) exp -> . ID AND ASG exp
    (11) exp -> . ID ASG exp
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp DIV exp
    (16) exp -> . exp MOD exp
    (17) exp -> . exp POW exp
    (18) exp -> . exp OR exp
    (19) exp -> . exp XOR exp
    (20) exp -> . exp AND exp
    (23) exp -> . cmp
    (27) exp -> . ifc END
    (28) exp -> . FOR ID IN it : exp END
    (29) exp -> . FOR NUM ID IN it : exp END
    (30) exp -> . ( exp )
    (31) exp -> . ID
    (36) exp -> . exp IN it
    (37) exp -> . ID + exp
    (38) exp -> . ID - exp
    (39) exp -> . - exp
    (40) exp -> . ID * exp
    (41) exp -> . ID DIV exp
    (42) exp -> . ID MOD exp
    (43) exp -> . ID POW exp
    (44) exp -> . ID OR exp
    (45) exp -> . ID XOR exp
    (46) exp -> . ID AND exp
    (47) exp -> . + exp
    (48) exp -> . NOT exp
    (49) exp -> . ECHO exp
    (50) exp -> . LOAD exp
    (51) exp -> . EVAL exp
    (55) exp -> . { seq }
    (56) exp -> . NUM
    (57) exp -> . STR
    (58) exp -> . WHILE exp : exp END
    (21) cmp -> . exp CMP exp
    (22) cmp -> . cmp CMP exp
    (24) ifc -> . IF exp : exp
    (25) ifc -> . IF exp : exp ELSE exp
    (26) ifc -> . IF exp : exp ELSE ifc

    ID              shift and go to state 2
    FOR             shift and go to state 7
    (               shift and go to state 9
    -               shift and go to state 4
    +               shift and go to state 3
    NOT             shift and go to state 10
    ECHO            shift and go to state 11
    LOAD            shift and go to state 12
    EVAL            shift and go to state 13
    {               shift and go to state 14
    NUM             shift and go to state 8
    STR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17

    exp                            shift and go to state 128
    cmp                            shift and go to state 5
    ifc                            shift and go to state 6

state 121

    (25) ifc -> IF exp : exp ELSE exp .
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . DIV exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . POW exp
    (18) exp -> exp . OR exp
    (19) exp -> exp . XOR exp
    (20) exp -> exp . AND exp
    (36) exp -> exp . IN it
    (21) cmp -> exp . CMP exp

    END             reduce using rule 25 (ifc -> IF exp : exp ELSE exp .)
    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    POW             shift and go to state 23
    OR              shift and go to state 24
    XOR             shift and go to state 25
    AND             shift and go to state 26
    IN              shift and go to state 27
    CMP             shift and go to state 28


state 122

    (26) ifc -> IF exp : exp ELSE ifc .
    (27) exp -> ifc . END

    END             reduce using rule 26 (ifc -> IF exp : exp ELSE ifc .)

  ! END             [ shift and go to state 43 ]


state 123

    (34) it -> [ exp , exp [ .

    +               reduce using rule 34 (it -> [ exp , exp [ .)
    -               reduce using rule 34 (it -> [ exp , exp [ .)
    *               reduce using rule 34 (it -> [ exp , exp [ .)
    DIV             reduce using rule 34 (it -> [ exp , exp [ .)
    MOD             reduce using rule 34 (it -> [ exp , exp [ .)
    POW             reduce using rule 34 (it -> [ exp , exp [ .)
    OR              reduce using rule 34 (it -> [ exp , exp [ .)
    XOR             reduce using rule 34 (it -> [ exp , exp [ .)
    AND             reduce using rule 34 (it -> [ exp , exp [ .)
    IN              reduce using rule 34 (it -> [ exp , exp [ .)
    CMP             reduce using rule 34 (it -> [ exp , exp [ .)
    $end            reduce using rule 34 (it -> [ exp , exp [ .)
    )               reduce using rule 34 (it -> [ exp , exp [ .)
    ;               reduce using rule 34 (it -> [ exp , exp [ .)
    }               reduce using rule 34 (it -> [ exp , exp [ .)
    :               reduce using rule 34 (it -> [ exp , exp [ .)
    ,               reduce using rule 34 (it -> [ exp , exp [ .)
    END             reduce using rule 34 (it -> [ exp , exp [ .)
    ELSE            reduce using rule 34 (it -> [ exp , exp [ .)
    ]               reduce using rule 34 (it -> [ exp , exp [ .)
    [               reduce using rule 34 (it -> [ exp , exp [ .)


state 124

    (32) it -> [ exp , exp ] .

    +               reduce using rule 32 (it -> [ exp , exp ] .)
    -               reduce using rule 32 (it -> [ exp , exp ] .)
    *               reduce using rule 32 (it -> [ exp , exp ] .)
    DIV             reduce using rule 32 (it -> [ exp , exp ] .)
    MOD             reduce using rule 32 (it -> [ exp , exp ] .)
    POW             reduce using rule 32 (it -> [ exp , exp ] .)
    OR              reduce using rule 32 (it -> [ exp , exp ] .)
    XOR             reduce using rule 32 (it -> [ exp , exp ] .)
    AND             reduce using rule 32 (it -> [ exp , exp ] .)
    IN              reduce using rule 32 (it -> [ exp , exp ] .)
    CMP             reduce using rule 32 (it -> [ exp , exp ] .)
    $end            reduce using rule 32 (it -> [ exp , exp ] .)
    )               reduce using rule 32 (it -> [ exp , exp ] .)
    ;               reduce using rule 32 (it -> [ exp , exp ] .)
    }               reduce using rule 32 (it -> [ exp , exp ] .)
    :               reduce using rule 32 (it -> [ exp , exp ] .)
    ,               reduce using rule 32 (it -> [ exp , exp ] .)
    END             reduce using rule 32 (it -> [ exp , exp ] .)
    ELSE            reduce using rule 32 (it -> [ exp , exp ] .)
    ]               reduce using rule 32 (it -> [ exp , exp ] .)
    [               reduce using rule 32 (it -> [ exp , exp ] .)


state 125

    (33) it -> ] exp , exp ] .

    +               reduce using rule 33 (it -> ] exp , exp ] .)
    -               reduce using rule 33 (it -> ] exp , exp ] .)
    *               reduce using rule 33 (it -> ] exp , exp ] .)
    DIV             reduce using rule 33 (it -> ] exp , exp ] .)
    MOD             reduce using rule 33 (it -> ] exp , exp ] .)
    POW             reduce using rule 33 (it -> ] exp , exp ] .)
    OR              reduce using rule 33 (it -> ] exp , exp ] .)
    XOR             reduce using rule 33 (it -> ] exp , exp ] .)
    AND             reduce using rule 33 (it -> ] exp , exp ] .)
    IN              reduce using rule 33 (it -> ] exp , exp ] .)
    CMP             reduce using rule 33 (it -> ] exp , exp ] .)
    $end            reduce using rule 33 (it -> ] exp , exp ] .)
    )               reduce using rule 33 (it -> ] exp , exp ] .)
    ;               reduce using rule 33 (it -> ] exp , exp ] .)
    }               reduce using rule 33 (it -> ] exp , exp ] .)
    :               reduce using rule 33 (it -> ] exp , exp ] .)
    ,               reduce using rule 33 (it -> ] exp , exp ] .)
    END             reduce using rule 33 (it -> ] exp , exp ] .)
    ELSE            reduce using rule 33 (it -> ] exp , exp ] .)
    ]               reduce using rule 33 (it -> ] exp , exp ] .)
    [               reduce using rule 33 (it -> ] exp , exp ] .)


state 126

    (35) it -> ] exp , exp [ .

    +               reduce using rule 35 (it -> ] exp , exp [ .)
    -               reduce using rule 35 (it -> ] exp , exp [ .)
    *               reduce using rule 35 (it -> ] exp , exp [ .)
    DIV             reduce using rule 35 (it -> ] exp , exp [ .)
    MOD             reduce using rule 35 (it -> ] exp , exp [ .)
    POW             reduce using rule 35 (it -> ] exp , exp [ .)
    OR              reduce using rule 35 (it -> ] exp , exp [ .)
    XOR             reduce using rule 35 (it -> ] exp , exp [ .)
    AND             reduce using rule 35 (it -> ] exp , exp [ .)
    IN              reduce using rule 35 (it -> ] exp , exp [ .)
    CMP             reduce using rule 35 (it -> ] exp , exp [ .)
    $end            reduce using rule 35 (it -> ] exp , exp [ .)
    )               reduce using rule 35 (it -> ] exp , exp [ .)
    ;               reduce using rule 35 (it -> ] exp , exp [ .)
    }               reduce using rule 35 (it -> ] exp , exp [ .)
    :               reduce using rule 35 (it -> ] exp , exp [ .)
    ,               reduce using rule 35 (it -> ] exp , exp [ .)
    END             reduce using rule 35 (it -> ] exp , exp [ .)
    ELSE            reduce using rule 35 (it -> ] exp , exp [ .)
    ]               reduce using rule 35 (it -> ] exp , exp [ .)
    [               reduce using rule 35 (it -> ] exp , exp [ .)


state 127

    (28) exp -> FOR ID IN it : exp END .

    +               reduce using rule 28 (exp -> FOR ID IN it : exp END .)
    -               reduce using rule 28 (exp -> FOR ID IN it : exp END .)
    *               reduce using rule 28 (exp -> FOR ID IN it : exp END .)
    DIV             reduce using rule 28 (exp -> FOR ID IN it : exp END .)
    MOD             reduce using rule 28 (exp -> FOR ID IN it : exp END .)
    POW             reduce using rule 28 (exp -> FOR ID IN it : exp END .)
    OR              reduce using rule 28 (exp -> FOR ID IN it : exp END .)
    XOR             reduce using rule 28 (exp -> FOR ID IN it : exp END .)
    AND             reduce using rule 28 (exp -> FOR ID IN it : exp END .)
    IN              reduce using rule 28 (exp -> FOR ID IN it : exp END .)
    CMP             reduce using rule 28 (exp -> FOR ID IN it : exp END .)
    $end            reduce using rule 28 (exp -> FOR ID IN it : exp END .)
    )               reduce using rule 28 (exp -> FOR ID IN it : exp END .)
    ;               reduce using rule 28 (exp -> FOR ID IN it : exp END .)
    }               reduce using rule 28 (exp -> FOR ID IN it : exp END .)
    :               reduce using rule 28 (exp -> FOR ID IN it : exp END .)
    ,               reduce using rule 28 (exp -> FOR ID IN it : exp END .)
    END             reduce using rule 28 (exp -> FOR ID IN it : exp END .)
    ELSE            reduce using rule 28 (exp -> FOR ID IN it : exp END .)
    ]               reduce using rule 28 (exp -> FOR ID IN it : exp END .)
    [               reduce using rule 28 (exp -> FOR ID IN it : exp END .)


state 128

    (29) exp -> FOR NUM ID IN it : exp . END
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . DIV exp
    (16) exp -> exp . MOD exp
    (17) exp -> exp . POW exp
    (18) exp -> exp . OR exp
    (19) exp -> exp . XOR exp
    (20) exp -> exp . AND exp
    (36) exp -> exp . IN it
    (21) cmp -> exp . CMP exp

    END             shift and go to state 129
    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    POW             shift and go to state 23
    OR              shift and go to state 24
    XOR             shift and go to state 25
    AND             shift and go to state 26
    IN              shift and go to state 27
    CMP             shift and go to state 28


state 129

    (29) exp -> FOR NUM ID IN it : exp END .

    +               reduce using rule 29 (exp -> FOR NUM ID IN it : exp END .)
    -               reduce using rule 29 (exp -> FOR NUM ID IN it : exp END .)
    *               reduce using rule 29 (exp -> FOR NUM ID IN it : exp END .)
    DIV             reduce using rule 29 (exp -> FOR NUM ID IN it : exp END .)
    MOD             reduce using rule 29 (exp -> FOR NUM ID IN it : exp END .)
    POW             reduce using rule 29 (exp -> FOR NUM ID IN it : exp END .)
    OR              reduce using rule 29 (exp -> FOR NUM ID IN it : exp END .)
    XOR             reduce using rule 29 (exp -> FOR NUM ID IN it : exp END .)
    AND             reduce using rule 29 (exp -> FOR NUM ID IN it : exp END .)
    IN              reduce using rule 29 (exp -> FOR NUM ID IN it : exp END .)
    CMP             reduce using rule 29 (exp -> FOR NUM ID IN it : exp END .)
    $end            reduce using rule 29 (exp -> FOR NUM ID IN it : exp END .)
    )               reduce using rule 29 (exp -> FOR NUM ID IN it : exp END .)
    ;               reduce using rule 29 (exp -> FOR NUM ID IN it : exp END .)
    }               reduce using rule 29 (exp -> FOR NUM ID IN it : exp END .)
    :               reduce using rule 29 (exp -> FOR NUM ID IN it : exp END .)
    ,               reduce using rule 29 (exp -> FOR NUM ID IN it : exp END .)
    END             reduce using rule 29 (exp -> FOR NUM ID IN it : exp END .)
    ELSE            reduce using rule 29 (exp -> FOR NUM ID IN it : exp END .)
    ]               reduce using rule 29 (exp -> FOR NUM ID IN it : exp END .)
    [               reduce using rule 29 (exp -> FOR NUM ID IN it : exp END .)

